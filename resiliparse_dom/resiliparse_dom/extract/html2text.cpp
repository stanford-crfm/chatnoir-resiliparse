/* Generated by Cython 3.0.10 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "resiliparse_dom/parse/html.h"
        ],
        "extra_compile_args": [
            "-std=c++17",
            "-O3",
            "-Wall",
            "-Wno-deprecated-declarations",
            "-Wno-unreachable-code",
            "-Wno-unused-function"
        ],
        "extra_link_args": [
            "-std=c++17"
        ],
        "include_dirs": [
            "resiliparse_dom/parse"
        ],
        "language": "c++",
        "libraries": [
            "lexbor",
            "re2"
        ],
        "name": "resiliparse_dom.extract.html2text",
        "sources": [
            "resiliparse_dom/extract/html2text.pyx"
        ]
    },
    "module_name": "resiliparse_dom.extract.html2text"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_10" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000AF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__resiliparse_dom__extract__html2text
#define __PYX_HAVE_API__resiliparse_dom__extract__html2text
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <set>
#include <string.h>
#include <memory>
#include <string>
#include <vector>
#include <string_view>
#include <cctype>

    #include <cctype>

    /**
     * Strip leading white space from a C string.
     */
    inline size_t lstrip_c_str(const char** s_ptr, size_t l) {
        const char* end = *s_ptr + l;
        while (*s_ptr < end && std::isspace((*s_ptr)[0])) {
            ++(*s_ptr);
        }
        return end - *s_ptr;
    }

    /**
     * Strip trailing white space from a C string.
     */
    inline size_t rstrip_c_str(const char** s_ptr, size_t l) {
        const char* end = *s_ptr + l;
        while (end > *s_ptr && std::isspace((end - 1)[0])) {
            --end;
        }
        return end - *s_ptr;
    }

    /**
     * Strip leading and trailing white space from a C string.
     */
    inline size_t strip_c_str(const char** s_ptr, size_t l) {
        return rstrip_c_str(s_ptr, lstrip_c_str(s_ptr, l));
    }

    /**
     * Strip leading white space from a C++ string.
     */
    inline std::string lstrip_str(const std::string& s) {
        const char* start = s.data();
        size_t l = lstrip_c_str(&start, s.size());
        return l != s.size() ? std::string(start, l) : s;
    }

    /**
     * Strip trailing white space from a C++ string.
     */
    inline std::string rstrip_str(std::string&& s) {
        const char* start = s.data();
        size_t l = rstrip_c_str(&start, s.size());
        if (l != s.size()) {
            s.resize(l);
        }
        return s;
    }

    /**
     * Strip leading and trailing white space from a C++ string.
     */
    inline std::string strip_str(std::string&& s) {
        const char* start = s.data();
        size_t l = strip_c_str(&start, s.size());
        if (l != s.size()) {
            memmove(s.data(), start, l);
            s.resize(l);
        }
        return s;
    }
    
#include <stdint.h>
#include <lexbor/core/core.h>
#include <lexbor/html/html.h>
#include <lexbor/dom/dom.h>
#include <lexbor/dom/interfaces/element.h>
#include "lexbor/dom/interfaces/document.h"
#include <lexbor/dom/collection.h>
#include <lexbor/css/css.h>
#include <lexbor/tag/tag.h>
#include <lexbor/html/encoding.h>
#include <lexbor/encoding/encoding.h>
#include "html.h"
#include <map>
#include <re2/re2.h>

    #include <string_view>

    class RE2Stack {
    public:
        RE2Stack()
            : instance(nullptr) {}
        RE2Stack(const char* pattern)
            : instance(new re2::RE2(pattern)) {}
        RE2Stack(const std::string& pattern)
            : instance(new re2::RE2(pattern)){}
        RE2Stack(const std::string_view pattern)
            : instance(new re2::RE2(pattern)) {}
        RE2Stack(const std::string_view pattern, const re2::RE2::Options& options)
            : instance(new re2::RE2(pattern, options)) {}
        RE2Stack(const RE2Stack&) = delete;
        RE2Stack(RE2Stack&&) = delete;
        ~RE2Stack() {
            if (instance) {
                delete instance;
                instance = nullptr;
            }
        }
        RE2Stack& operator=(const RE2Stack&) = delete;
        RE2Stack& operator=(RE2Stack&& other) {
            if (this != &other) {
                instance = other.instance;
                other.instance = nullptr;
            }
            return *this;
        }

        inline const re2::RE2& operator()() const {
            return *instance;
        }

    private:
        re2::RE2* instance;
    };
    

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>
    namespace stdx {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }
    #endif
    

    enum FormattingOpts {
        FORMAT_OFF = 0,
        FORMAT_BASIC = 1,
        FORMAT_MINIMAL_HTML = 2
    };

    struct ExtractOpts {
        FormattingOpts preserve_formatting = FORMAT_BASIC;
        bool list_bullets = true;
        bool links = false;
        bool alt_texts = true;
        bool form_fields = false;
        bool noscript = false;
    };

    struct ExtractContext {
        lxb_dom_node_t* root_node = NULL;
        lxb_dom_node_t* node = NULL;
        size_t depth = 0;
        ExtractOpts opts;
    };

    struct ExtractNode {
        lxb_dom_node_t* reference_node = NULL;
        lxb_tag_id_t tag_id = LXB_TAG__UNDEF;
        size_t depth = 0;
        size_t pre_depth = 0;
        bool space_after = false;
        bool collapse_margins = true;
        bool make_block = true;
        bool make_big_block = false;
        bool is_end_tag = false;
        bool escape_text_contents = false;
        std::shared_ptr<std::string> text_contents = NULL;
    };
    
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "resiliparse_dom/extract/html2text.pyx",
  "<stringsource>",
  "resiliparse_dom/parse/html.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMElementClassList;
struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode;
struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection;
struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_next_node;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_next_element_node;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_get_element_by_id_impl;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_get_elements_by_attr_impl;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_get_elements_by_class_name_impl;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_query_selector_all_impl;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_getattr;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_get_element_by_id;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_get_elements_by_attr;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_get_elements_by_class_name;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_13DOMCollection_get_element_by_id;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_13DOMCollection_get_elements_by_attr;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_13DOMCollection_get_elements_by_class_name;
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_create_html_tree;

/* "resiliparse_dom/parse/html.pxd":131
 * 
 * # noinspection DuplicatedCode
 * cpdef enum NodeType:             # <<<<<<<<<<<<<<
 *     ELEMENT = 0x01,
 *     ATTRIBUTE = 0x02,
 */
enum __pyx_t_15resiliparse_dom_5parse_4html_NodeType {
  __pyx_e_15resiliparse_dom_5parse_4html_ELEMENT = 0x01,
  __pyx_e_15resiliparse_dom_5parse_4html_ATTRIBUTE = 0x02,
  __pyx_e_15resiliparse_dom_5parse_4html_TEXT = 0x03,
  __pyx_e_15resiliparse_dom_5parse_4html_CDATA_SECTION = 0x04,
  __pyx_e_15resiliparse_dom_5parse_4html_ENTITY_REFERENCE = 0x05,
  __pyx_e_15resiliparse_dom_5parse_4html_ENTITY = 0x06,
  __pyx_e_15resiliparse_dom_5parse_4html_PROCESSING_INSTRUCTION = 0x07,
  __pyx_e_15resiliparse_dom_5parse_4html_COMMENT = 0x08,
  __pyx_e_15resiliparse_dom_5parse_4html_DOCUMENT = 0x09,
  __pyx_e_15resiliparse_dom_5parse_4html_DOCUMENT_TYPE = 0x0A,
  __pyx_e_15resiliparse_dom_5parse_4html_DOCUMENT_FRAGMENT = 0x0B,
  __pyx_e_15resiliparse_dom_5parse_4html_NOTATION = 0x0C,
  __pyx_e_15resiliparse_dom_5parse_4html_LAST_ENTRY = 0x0D
};

/* "resiliparse_dom/parse/html.pxd":31
 *                                                   size_t selector_len) except NULL nogil
 * 
 * cdef lxb_dom_node_t* next_node(const lxb_dom_node_t* root_node, lxb_dom_node_t* node,             # <<<<<<<<<<<<<<
 *                                size_t* depth=*, bint* end_tag=*) noexcept nogil
 * 
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_next_node {
  int __pyx_n;
  size_t *depth;
  int *end_tag;
};

/* "resiliparse_dom/parse/html.pxd":34
 *                                size_t* depth=*, bint* end_tag=*) noexcept nogil
 * 
 * cdef inline lxb_dom_node_t* next_element_node(const lxb_dom_node_t* root_node, lxb_dom_node_t* node,             # <<<<<<<<<<<<<<
 *                                               size_t* depth=NULL, bint* end_tag=NULL) noexcept nogil:
 *     node = next_node(root_node, node, depth, end_tag)
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_next_element_node {
  int __pyx_n;
  size_t *depth;
  int *end_tag;
};

/* "resiliparse_dom/parse/html.pxd":50
 * cdef string get_node_text(lxb_dom_node_t* node) noexcept nogil
 * 
 * cdef lxb_dom_node_t* get_element_by_id_impl(lxb_dom_node_t* node,             # <<<<<<<<<<<<<<
 *                                             const char* id_value, size_t id_value_len,
 *                                             bint case_insensitive=*) noexcept nogil
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_get_element_by_id_impl {
  int __pyx_n;
  int case_insensitive;
};

/* "resiliparse_dom/parse/html.pxd":53
 *                                             const char* id_value, size_t id_value_len,
 *                                             bint case_insensitive=*) noexcept nogil
 * cdef lxb_dom_collection_t* get_elements_by_attr_impl(lxb_dom_node_t* node,             # <<<<<<<<<<<<<<
 *                                                      const char* attr_name, size_t attr_name_len,
 *                                                      const char* attr_value, size_t attr_value_len,
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_get_elements_by_attr_impl {
  int __pyx_n;
  size_t init_size;
  int case_insensitive;
};

/* "resiliparse_dom/parse/html.pxd":57
 *                                                      const char* attr_value, size_t attr_value_len,
 *                                                      size_t init_size=*, bint case_insensitive=*) noexcept nogil
 * cdef lxb_dom_collection_t* get_elements_by_class_name_impl(lxb_dom_node_t* node, const char* class_name,             # <<<<<<<<<<<<<<
 *                                                            size_t class_name_len, size_t init_size=*) noexcept nogil
 * cdef lxb_dom_collection_t* get_elements_by_tag_name_impl(lxb_dom_node_t* node,
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_get_elements_by_class_name_impl {
  int __pyx_n;
  size_t init_size;
};

/* "resiliparse_dom/parse/html.pxd":63
 * cdef lxb_dom_node_t* query_selector_impl(lxb_dom_node_t* node, HTMLTree tree,
 *                                          const char* selector, size_t select_len) except <lxb_dom_node_t*>-1 nogil
 * cdef lxb_dom_collection_t* query_selector_all_impl(lxb_dom_node_t* node, HTMLTree tree,             # <<<<<<<<<<<<<<
 *                                                    const char* selector, size_t selector_len,
 *                                                    size_t init_size=*) except <lxb_dom_collection_t*>-1 nogil
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_query_selector_all_impl {
  int __pyx_n;
  size_t init_size;
};

/* "resiliparse_dom/parse/html.pxd":90
 *     cdef bint _getattr_impl(self, const char* attr_name, size_t attr_name_len,
 *                             const char** attr_out_value, size_t* attr_out_len) except -1 nogil
 *     cpdef str getattr(self, str attr_name, str default_value=*)             # <<<<<<<<<<<<<<
 *     cdef bint _setattr_impl(self, const char* attr_name, size_t attr_name_len,
 *                             const char* attr_value, size_t attr_value_len) except -1 nogil
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_getattr {
  int __pyx_n;
  PyObject *default_value;
};

/* "resiliparse_dom/parse/html.pxd":97
 *     cpdef delattr(self, str attr_name)
 * 
 *     cpdef DOMNode get_element_by_id(self, str element_id, bint case_insensitive=*)             # <<<<<<<<<<<<<<
 *     cpdef DOMCollection get_elements_by_attr(self, str attr_name, str attr_value, bint case_insensitive=*)
 *     cpdef DOMCollection get_elements_by_class_name(self, str class_name, bint case_insensitive=*)
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_get_element_by_id {
  int __pyx_n;
  int case_insensitive;
};

/* "resiliparse_dom/parse/html.pxd":98
 * 
 *     cpdef DOMNode get_element_by_id(self, str element_id, bint case_insensitive=*)
 *     cpdef DOMCollection get_elements_by_attr(self, str attr_name, str attr_value, bint case_insensitive=*)             # <<<<<<<<<<<<<<
 *     cpdef DOMCollection get_elements_by_class_name(self, str class_name, bint case_insensitive=*)
 *     cpdef DOMCollection get_elements_by_tag_name(self, str tag_name)
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_get_elements_by_attr {
  int __pyx_n;
  int case_insensitive;
};

/* "resiliparse_dom/parse/html.pxd":99
 *     cpdef DOMNode get_element_by_id(self, str element_id, bint case_insensitive=*)
 *     cpdef DOMCollection get_elements_by_attr(self, str attr_name, str attr_value, bint case_insensitive=*)
 *     cpdef DOMCollection get_elements_by_class_name(self, str class_name, bint case_insensitive=*)             # <<<<<<<<<<<<<<
 *     cpdef DOMCollection get_elements_by_tag_name(self, str tag_name)
 * 
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_get_elements_by_class_name {
  int __pyx_n;
  int case_insensitive;
};

/* "resiliparse_dom/parse/html.pxd":120
 *     cdef DOMCollection _forward_collection_match(self, bytes func, attrs)
 * 
 *     cpdef DOMNode get_element_by_id(self, str element_id, bint case_insensitive=*)             # <<<<<<<<<<<<<<
 *     cpdef DOMCollection get_elements_by_attr(self, str attr_name, str attr_value, bint case_insensitive=*)
 *     cpdef DOMCollection get_elements_by_class_name(self, str class_name, bint case_insensitive=*)
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_13DOMCollection_get_element_by_id {
  int __pyx_n;
  int case_insensitive;
};

/* "resiliparse_dom/parse/html.pxd":121
 * 
 *     cpdef DOMNode get_element_by_id(self, str element_id, bint case_insensitive=*)
 *     cpdef DOMCollection get_elements_by_attr(self, str attr_name, str attr_value, bint case_insensitive=*)             # <<<<<<<<<<<<<<
 *     cpdef DOMCollection get_elements_by_class_name(self, str class_name, bint case_insensitive=*)
 *     cpdef DOMCollection get_elements_by_tag_name(self, str tag_name)
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_13DOMCollection_get_elements_by_attr {
  int __pyx_n;
  int case_insensitive;
};

/* "resiliparse_dom/parse/html.pxd":122
 *     cpdef DOMNode get_element_by_id(self, str element_id, bint case_insensitive=*)
 *     cpdef DOMCollection get_elements_by_attr(self, str attr_name, str attr_value, bint case_insensitive=*)
 *     cpdef DOMCollection get_elements_by_class_name(self, str class_name, bint case_insensitive=*)             # <<<<<<<<<<<<<<
 *     cpdef DOMCollection get_elements_by_tag_name(self, str tag_name)
 * 
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_13DOMCollection_get_elements_by_class_name {
  int __pyx_n;
  int case_insensitive;
};

/* "resiliparse_dom/parse/html.pxd":147
 * 
 * 
 * cdef HTMLTree create_html_tree(bytes document, bint reencode=*, str encoding=*, str errors=*)             # <<<<<<<<<<<<<<
 * 
 * cdef class HTMLTree:
 */
struct __pyx_opt_args_15resiliparse_dom_5parse_4html_create_html_tree {
  int __pyx_n;
  int reencode;
  PyObject *encoding;
  PyObject *errors;
};

/* "resiliparse_dom/parse/html.pxd":73
 * 
 * 
 * cdef class DOMElementClassList:             # <<<<<<<<<<<<<<
 *     cdef DOMNode node
 * 
 */
struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMElementClassList {
  PyObject_HEAD
  struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMElementClassList *__pyx_vtab;
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *node;
};


/* "resiliparse_dom/parse/html.pxd":82
 * 
 * 
 * cdef class DOMNode:             # <<<<<<<<<<<<<<
 *     cdef HTMLTree tree
 *     cdef lxb_dom_node_t* node
 */
struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode {
  PyObject_HEAD
  struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMNode *__pyx_vtab;
  struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *tree;
  lxb_dom_node_t *node;
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMElementClassList *class_list_singleton;
};


/* "resiliparse_dom/parse/html.pxd":113
 * 
 * 
 * cdef class DOMCollection:             # <<<<<<<<<<<<<<
 *     cdef HTMLTree tree
 *     cdef lxb_dom_collection_t* coll
 */
struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection {
  PyObject_HEAD
  struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMCollection *__pyx_vtab;
  struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *tree;
  lxb_dom_collection_t *coll;
};


/* "resiliparse_dom/parse/html.pxd":149
 * cdef HTMLTree create_html_tree(bytes document, bint reencode=*, str encoding=*, str errors=*)
 * 
 * cdef class HTMLTree:             # <<<<<<<<<<<<<<
 *     cdef lxb_html_document_t* dom_document
 *     cdef str encoding
 */
struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree {
  PyObject_HEAD
  struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_HTMLTree *__pyx_vtab;
  lxb_html_document_t *dom_document;
  PyObject *encoding;
  lxb_css_parser_t *css_parser;
  lxb_css_memory_t *css_memory;
};



/* "resiliparse_dom/parse/html.pxd":73
 * 
 * 
 * cdef class DOMElementClassList:             # <<<<<<<<<<<<<<
 *     cdef DOMNode node
 * 
 */

struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMElementClassList {
  PyObject *(*_create_list)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMElementClassList *);
  PyObject *(*_class_name_bytes)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMElementClassList *);
  void (*add)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMElementClassList *, PyObject *, int __pyx_skip_dispatch);
  void (*remove)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMElementClassList *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMElementClassList *__pyx_vtabptr_15resiliparse_dom_5parse_4html_DOMElementClassList;


/* "resiliparse_dom/parse/html.pxd":82
 * 
 * 
 * cdef class DOMNode:             # <<<<<<<<<<<<<<
 *     cdef HTMLTree tree
 *     cdef lxb_dom_node_t* node
 */

struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMNode {
  int (*hasattr)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, PyObject *, int __pyx_skip_dispatch);
  int (*_getattr_impl)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, char const *, size_t, char const **, size_t *);
  PyObject *(*getattr)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_getattr *__pyx_optional_args);
  int (*_setattr_impl)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, char const *, size_t, char const *, size_t);
  PyObject *(*setattr)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  int (*_delattr_impl)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, char const *, size_t);
  PyObject *(*delattr)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *(*get_element_by_id)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_get_element_by_id *__pyx_optional_args);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *(*get_elements_by_attr)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_get_elements_by_attr *__pyx_optional_args);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *(*get_elements_by_class_name)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_7DOMNode_get_elements_by_class_name *__pyx_optional_args);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *(*get_elements_by_tag_name)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *(*query_selector)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *(*query_selector_all)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, PyObject *, int __pyx_skip_dispatch);
  int (*matches)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *(*append_child)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, int __pyx_skip_dispatch);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *(*insert_before)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, int __pyx_skip_dispatch);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *(*replace_child)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, int __pyx_skip_dispatch);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *(*remove_child)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, int __pyx_skip_dispatch);
  PyObject *(*decompose)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMNode *__pyx_vtabptr_15resiliparse_dom_5parse_4html_DOMNode;


/* "resiliparse_dom/parse/html.pxd":113
 * 
 * 
 * cdef class DOMCollection:             # <<<<<<<<<<<<<<
 *     cdef HTMLTree tree
 *     cdef lxb_dom_collection_t* coll
 */

struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMCollection {
  size_t (*_wrap_idx)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *, Py_ssize_t);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *(*_forward_collection_match)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *, PyObject *, PyObject *);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *(*get_element_by_id)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_13DOMCollection_get_element_by_id *__pyx_optional_args);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *(*get_elements_by_attr)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_13DOMCollection_get_elements_by_attr *__pyx_optional_args);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *(*get_elements_by_class_name)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_13DOMCollection_get_elements_by_class_name *__pyx_optional_args);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *(*get_elements_by_tag_name)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *(*query_selector)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *(*query_selector_all)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *, PyObject *, int __pyx_skip_dispatch);
  int (*matches)(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMCollection *__pyx_vtabptr_15resiliparse_dom_5parse_4html_DOMCollection;


/* "resiliparse_dom/parse/html.pxd":149
 * cdef HTMLTree create_html_tree(bytes document, bint reencode=*, str encoding=*, str errors=*)
 * 
 * cdef class HTMLTree:             # <<<<<<<<<<<<<<
 *     cdef lxb_html_document_t* dom_document
 *     cdef str encoding
 */

struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_HTMLTree {
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *(*create_element)(struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *(*create_text_node)(struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *, PyObject *, int __pyx_skip_dispatch);
  void (*init_css_parser)(struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *);
};
static struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_HTMLTree *__pyx_vtabptr_15resiliparse_dom_5parse_4html_HTMLTree;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);

/* ErrOccurredWithGIL.proto */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_10
#define __PYX_HAVE_RT_ImportType_proto_3_0_10
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_10(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_10(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_10 {
   __Pyx_ImportType_CheckSize_Error_3_0_10 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_10 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_10 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_10(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_10 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_FormattingOpts(FormattingOpts value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_0_10(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.set" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.memory" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "resiliparse_inc.string_view" */

/* Module declarations from "resiliparse_inc.cctype" */

/* Module declarations from "resiliparse_common.string_util" */
static CYTHON_INLINE std::string_view __pyx_f_18resiliparse_common_11string_util_strip_sv(std::string_view); /*proto*/

/* Module declarations from "libc.stdint" */

/* Module declarations from "resiliparse_inc.lexbor" */

/* Module declarations from "resiliparse_dom.parse.html" */
static CYTHON_INLINE int __pyx_f_15resiliparse_dom_5parse_4html_check_node(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *); /*proto*/
static lxb_dom_node_t *(*__pyx_f_15resiliparse_dom_5parse_4html_next_node)(lxb_dom_node_t const *, lxb_dom_node_t *, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_next_node *__pyx_optional_args); /*proto*/
static CYTHON_INLINE lxb_dom_node_t *__pyx_f_15resiliparse_dom_5parse_4html_next_element_node(lxb_dom_node_t const *, lxb_dom_node_t *, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_next_element_node *__pyx_optional_args); /*proto*/
static CYTHON_INLINE std::string_view __pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(lxb_dom_node_t *, std::string const &); /*proto*/
static std::string (*__pyx_f_15resiliparse_dom_5parse_4html_get_node_text)(lxb_dom_node_t *); /*proto*/
static lxb_dom_collection_t *(*__pyx_f_15resiliparse_dom_5parse_4html_query_selector_all_impl)(lxb_dom_node_t *, struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *, char const *, size_t, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_query_selector_all_impl *__pyx_optional_args); /*proto*/
static int (*__pyx_f_15resiliparse_dom_5parse_4html_is_block_element)(lxb_tag_id_t); /*proto*/

/* Module declarations from "libcpp.map" */

/* Module declarations from "resiliparse_inc.re2" */

/* Module declarations from "resiliparse_inc.utility" */

/* Module declarations from "resiliparse_dom.extract.html2text" */
static std::string __pyx_v_15resiliparse_dom_7extract_9html2text_LIST_BULLET;
static re2::RE2::Options __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_article_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_nav_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_recommended_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_landmark_id_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_header_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_footer_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_post_meta_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_sidebar_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_search_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_skip_link_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_display_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_display_css_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_modal_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_gallery_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_signin_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_ads_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_social_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_comments_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_logo_cls_regex;
static RE2Stack __pyx_v_15resiliparse_dom_7extract_9html2text_print_cls_regex;
static std::set<std::string>  __pyx_v_15resiliparse_dom_7extract_9html2text_blacklist_aria_roles;
static std::string __pyx_f_15resiliparse_dom_7extract_9html2text__get_collapsed_string(std::string const &); /*proto*/
static CYTHON_INLINE void __pyx_f_15resiliparse_dom_7extract_9html2text__ensure_text_contents(std::vector<std::shared_ptr<struct ExtractNode> >  &); /*proto*/
static std::string __pyx_f_15resiliparse_dom_7extract_9html2text__escape_html(char const *, size_t); /*proto*/
static void __pyx_f_15resiliparse_dom_7extract_9html2text__extract_cb(std::vector<std::shared_ptr<struct ExtractNode> >  &, struct ExtractContext &, int); /*proto*/
static CYTHON_INLINE void __pyx_f_15resiliparse_dom_7extract_9html2text__make_indent(std::string &, size_t, struct ExtractNode const *, struct ExtractOpts const &); /*proto*/
static CYTHON_INLINE void __pyx_f_15resiliparse_dom_7extract_9html2text__make_margin(std::string &, size_t &, struct ExtractNode const *, struct ExtractOpts const &); /*proto*/
static std::string __pyx_f_15resiliparse_dom_7extract_9html2text__serialize_extract_nodes(std::vector<std::shared_ptr<struct ExtractNode> >  &, struct ExtractOpts const &, size_t); /*proto*/
static CYTHON_INLINE int __pyx_f_15resiliparse_dom_7extract_9html2text__is_unprintable_pua(lxb_dom_node_t *); /*proto*/
static CYTHON_INLINE int __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(std::string_view const , RE2Stack const &); /*proto*/
static CYTHON_INLINE int __pyx_f_15resiliparse_dom_7extract_9html2text__is_link_cluster(lxb_dom_node_t *, double, size_t); /*proto*/
static CYTHON_INLINE int __pyx_f_15resiliparse_dom_7extract_9html2text__is_main_content_node(lxb_dom_node_t *, size_t, int); /*proto*/
static std::string __pyx_f_15resiliparse_dom_7extract_9html2text_serialize_node(lxb_dom_node_t *); /*proto*/
static std::string __pyx_f_15resiliparse_dom_7extract_9html2text__extract_simplified_dom_impl(struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *, FormattingOpts, int, int, int, int, int, int, int, std::string); /*proto*/
static CYTHON_INLINE int __pyx_f_15resiliparse_dom_7extract_9html2text_is_descendant(lxb_dom_node_t *, lxb_dom_node_t *); /*proto*/
static std::string __pyx_f_15resiliparse_dom_7extract_9html2text__extract_plain_text_impl(struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *, FormattingOpts, int, int, int, int, int, int, int, std::string); /*proto*/
static std::string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(PyObject *); /*proto*/
static std::set<std::string>  __pyx_convert_set_from_py_std_3a__3a_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "resiliparse_dom.extract.html2text"
extern int __pyx_module_is_main_resiliparse_dom__extract__html2text;
int __pyx_module_is_main_resiliparse_dom__extract__html2text = 0;

/* Implementation of "resiliparse_dom.extract.html2text" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
/* #### Code section: string_decls ### */
static const char __pyx_k_e[] = "e";
static const char __pyx_k__2[] = "";
static const char __pyx_k__3[] = ",";
static const char __pyx_k__4[] = "\000";
static const char __pyx_k_id[] = "id";
static const char __pyx_k__10[] = "?";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_alt[] = "alt";
static const char __pyx_k_img[] = "img";
static const char __pyx_k_rel[] = "rel";
static const char __pyx_k_svg[] = "svg";
static const char __pyx_k_tab[] = "tab";
static const char __pyx_k_area[] = "area";
static const char __pyx_k_body[] = "body";
static const char __pyx_k_href[] = "href";
static const char __pyx_k_html[] = "html";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_menu[] = "menu";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_role[] = "role";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tree[] = "tree";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_alert[] = "alert";
static const char __pyx_k_audio[] = "audio";
static const char __pyx_k_class[] = "class";
static const char __pyx_k_embed[] = "embed";
static const char __pyx_k_frame[] = "frame";
static const char __pyx_k_input[] = "input";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_links[] = "links";
static const char __pyx_k_parse[] = "parse";
static const char __pyx_k_radio[] = "radio";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_style[] = "style";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_video[] = "video";
static const char __pyx_k_banner[] = "banner";
static const char __pyx_k_button[] = "button";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_dialog[] = "dialog";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_figure[] = "figure";
static const char __pyx_k_iframe[] = "iframe";
static const char __pyx_k_ignore[] = "ignore";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_option[] = "option";
static const char __pyx_k_script[] = "script";
static const char __pyx_k_search[] = "search";
static const char __pyx_k_select[] = "select";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_comment[] = "comment";
static const char __pyx_k_menubar[] = "menubar";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_toolbar[] = "toolbar";
static const char __pyx_k_tooltip[] = "tooltip";
static const char __pyx_k_checkbox[] = "checkbox";
static const char __pyx_k_comments[] = "comments";
static const char __pyx_k_embedimg[] = "embedimg";
static const char __pyx_k_itemprop[] = "itemprop";
static const char __pyx_k_menuitem[] = "menuitem";
static const char __pyx_k_noscript[] = "noscript";
static const char __pyx_k_template[] = "template";
static const char __pyx_k_textarea[] = "textarea";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_alt_texts[] = "alt_texts";
static const char __pyx_k_extracted[] = "extracted";
static const char __pyx_k_searchbox[] = "searchbox";
static const char __pyx_k_separator[] = "separator";
static const char __pyx_k_figcaption[] = "figcaption";
static const char __pyx_k_navigation[] = "navigation";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_aria_hidden[] = "aria-hidden";
static const char __pyx_k_contentinfo[] = "contentinfo";
static const char __pyx_k_form_fields[] = "form_fields";
static const char __pyx_k_placeholder[] = "placeholder";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_list_bullets[] = "list_bullets";
static const char __pyx_k_main_content[] = "main_content";
static const char __pyx_k_minimal_html[] = "minimal_html";
static const char __pyx_k_presentation[] = "presentation";
static const char __pyx_k_aria_expanded[] = "aria-expanded";
static const char __pyx_k_complementary[] = "complementary";
static const char __pyx_k_skip_elements[] = "skip_elements";
static const char __pyx_k_skip_selector[] = "skip_selector";
static const char __pyx_k_skip_selectors[] = "skip_selectors";
static const char __pyx_k_formatting_opts[] = "formatting_opts";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_extract_plain_text[] = "extract_plain_text";
static const char __pyx_k_preserve_formatting[] = "preserve_formatting";
static const char __pyx_k_extract_simplified_dom[] = "extract_simplified_dom";
static const char __pyx_k_Parameter_html_is_neither_string[] = "Parameter \"html\" is neither string nor HTMLTree.";
static const char __pyx_k_resiliparse_dom_extract_html2tex[] = "resiliparse_dom/extract/html2text.pyx";
static const char __pyx_k_resiliparse_dom_extract_html2tex_2[] = "resiliparse_dom.extract.html2text";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_15resiliparse_dom_7extract_9html2text_extract_simplified_dom(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_html, CYTHON_UNUSED int __pyx_v_preserve_formatting, int __pyx_v_main_content, int __pyx_v_list_bullets, int __pyx_v_alt_texts, int __pyx_v_links, int __pyx_v_form_fields, int __pyx_v_noscript, int __pyx_v_comments, PyObject *__pyx_v_skip_elements); /* proto */
static PyObject *__pyx_pf_15resiliparse_dom_7extract_9html2text_2extract_plain_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_html, PyObject *__pyx_v_preserve_formatting, int __pyx_v_main_content, int __pyx_v_list_bullets, int __pyx_v_alt_texts, int __pyx_v_links, int __pyx_v_form_fields, int __pyx_v_noscript, int __pyx_v_comments, PyObject *__pyx_v_skip_elements); /* proto */
static __Pyx_CachedCFunction __pyx_umethod_PySet_Type_update = {0, 0, 0, 0, 0};
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_15resiliparse_dom_5parse_4html_DOMElementClassList;
  PyTypeObject *__pyx_ptype_15resiliparse_dom_5parse_4html_DOMNode;
  PyTypeObject *__pyx_ptype_15resiliparse_dom_5parse_4html_DOMCollection;
  PyTypeObject *__pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyObject *__pyx_kp_u_Parameter_html_is_neither_string;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s__10;
  PyObject *__pyx_kp_u__2;
  PyObject *__pyx_kp_b__3;
  PyObject *__pyx_kp_u__4;
  PyObject *__pyx_n_b_alert;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_n_s_alt_texts;
  PyObject *__pyx_n_b_area;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_b_audio;
  PyObject *__pyx_n_b_banner;
  PyObject *__pyx_n_s_body;
  PyObject *__pyx_n_b_button;
  PyObject *__pyx_n_b_checkbox;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_b_comment;
  PyObject *__pyx_n_s_comments;
  PyObject *__pyx_n_b_complementary;
  PyObject *__pyx_n_b_contentinfo;
  PyObject *__pyx_n_s_decode;
  PyObject *__pyx_n_b_dialog;
  PyObject *__pyx_n_s_e;
  PyObject *__pyx_n_b_embed;
  PyObject *__pyx_n_b_embedimg;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_n_s_errors;
  PyObject *__pyx_n_s_extract_plain_text;
  PyObject *__pyx_n_u_extract_plain_text;
  PyObject *__pyx_n_s_extract_simplified_dom;
  PyObject *__pyx_n_s_extracted;
  PyObject *__pyx_n_b_figcaption;
  PyObject *__pyx_n_b_figure;
  PyObject *__pyx_n_s_form_fields;
  PyObject *__pyx_n_s_formatting_opts;
  PyObject *__pyx_n_b_frame;
  PyObject *__pyx_n_s_html;
  PyObject *__pyx_n_b_iframe;
  PyObject *__pyx_n_u_ignore;
  PyObject *__pyx_n_b_img;
  PyObject *__pyx_n_b_input;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_join;
  PyObject *__pyx_n_b_label;
  PyObject *__pyx_n_s_links;
  PyObject *__pyx_n_s_list_bullets;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_main_content;
  PyObject *__pyx_n_b_menu;
  PyObject *__pyx_n_b_menubar;
  PyObject *__pyx_n_b_menuitem;
  PyObject *__pyx_n_u_minimal_html;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_b_navigation;
  PyObject *__pyx_n_b_noscript;
  PyObject *__pyx_n_s_noscript;
  PyObject *__pyx_n_b_object;
  PyObject *__pyx_n_b_option;
  PyObject *__pyx_n_s_parse;
  PyObject *__pyx_n_b_presentation;
  PyObject *__pyx_n_s_preserve_formatting;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_b_radio;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_replace;
  PyObject *__pyx_kp_s_resiliparse_dom_extract_html2tex;
  PyObject *__pyx_n_s_resiliparse_dom_extract_html2tex_2;
  PyObject *__pyx_n_b_script;
  PyObject *__pyx_n_b_search;
  PyObject *__pyx_n_b_searchbox;
  PyObject *__pyx_n_b_select;
  PyObject *__pyx_n_b_separator;
  PyObject *__pyx_n_s_skip_elements;
  PyObject *__pyx_n_s_skip_selector;
  PyObject *__pyx_n_s_skip_selectors;
  PyObject *__pyx_n_b_style;
  PyObject *__pyx_n_b_svg;
  PyObject *__pyx_n_b_tab;
  PyObject *__pyx_n_b_template;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_b_textarea;
  PyObject *__pyx_n_b_toolbar;
  PyObject *__pyx_n_b_tooltip;
  PyObject *__pyx_n_s_tree;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_b_video;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_codeobj__7;
  PyObject *__pyx_codeobj__9;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_15resiliparse_dom_5parse_4html_DOMElementClassList);
  Py_CLEAR(clear_module_state->__pyx_ptype_15resiliparse_dom_5parse_4html_DOMNode);
  Py_CLEAR(clear_module_state->__pyx_ptype_15resiliparse_dom_5parse_4html_DOMCollection);
  Py_CLEAR(clear_module_state->__pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Parameter_html_is_neither_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s__10);
  Py_CLEAR(clear_module_state->__pyx_kp_u__2);
  Py_CLEAR(clear_module_state->__pyx_kp_b__3);
  Py_CLEAR(clear_module_state->__pyx_kp_u__4);
  Py_CLEAR(clear_module_state->__pyx_n_b_alert);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_alt_texts);
  Py_CLEAR(clear_module_state->__pyx_n_b_area);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_b_audio);
  Py_CLEAR(clear_module_state->__pyx_n_b_banner);
  Py_CLEAR(clear_module_state->__pyx_n_s_body);
  Py_CLEAR(clear_module_state->__pyx_n_b_button);
  Py_CLEAR(clear_module_state->__pyx_n_b_checkbox);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_b_comment);
  Py_CLEAR(clear_module_state->__pyx_n_s_comments);
  Py_CLEAR(clear_module_state->__pyx_n_b_complementary);
  Py_CLEAR(clear_module_state->__pyx_n_b_contentinfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_decode);
  Py_CLEAR(clear_module_state->__pyx_n_b_dialog);
  Py_CLEAR(clear_module_state->__pyx_n_s_e);
  Py_CLEAR(clear_module_state->__pyx_n_b_embed);
  Py_CLEAR(clear_module_state->__pyx_n_b_embedimg);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_n_s_errors);
  Py_CLEAR(clear_module_state->__pyx_n_s_extract_plain_text);
  Py_CLEAR(clear_module_state->__pyx_n_u_extract_plain_text);
  Py_CLEAR(clear_module_state->__pyx_n_s_extract_simplified_dom);
  Py_CLEAR(clear_module_state->__pyx_n_s_extracted);
  Py_CLEAR(clear_module_state->__pyx_n_b_figcaption);
  Py_CLEAR(clear_module_state->__pyx_n_b_figure);
  Py_CLEAR(clear_module_state->__pyx_n_s_form_fields);
  Py_CLEAR(clear_module_state->__pyx_n_s_formatting_opts);
  Py_CLEAR(clear_module_state->__pyx_n_b_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_html);
  Py_CLEAR(clear_module_state->__pyx_n_b_iframe);
  Py_CLEAR(clear_module_state->__pyx_n_u_ignore);
  Py_CLEAR(clear_module_state->__pyx_n_b_img);
  Py_CLEAR(clear_module_state->__pyx_n_b_input);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_join);
  Py_CLEAR(clear_module_state->__pyx_n_b_label);
  Py_CLEAR(clear_module_state->__pyx_n_s_links);
  Py_CLEAR(clear_module_state->__pyx_n_s_list_bullets);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_main_content);
  Py_CLEAR(clear_module_state->__pyx_n_b_menu);
  Py_CLEAR(clear_module_state->__pyx_n_b_menubar);
  Py_CLEAR(clear_module_state->__pyx_n_b_menuitem);
  Py_CLEAR(clear_module_state->__pyx_n_u_minimal_html);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_b_navigation);
  Py_CLEAR(clear_module_state->__pyx_n_b_noscript);
  Py_CLEAR(clear_module_state->__pyx_n_s_noscript);
  Py_CLEAR(clear_module_state->__pyx_n_b_object);
  Py_CLEAR(clear_module_state->__pyx_n_b_option);
  Py_CLEAR(clear_module_state->__pyx_n_s_parse);
  Py_CLEAR(clear_module_state->__pyx_n_b_presentation);
  Py_CLEAR(clear_module_state->__pyx_n_s_preserve_formatting);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_b_radio);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_replace);
  Py_CLEAR(clear_module_state->__pyx_kp_s_resiliparse_dom_extract_html2tex);
  Py_CLEAR(clear_module_state->__pyx_n_s_resiliparse_dom_extract_html2tex_2);
  Py_CLEAR(clear_module_state->__pyx_n_b_script);
  Py_CLEAR(clear_module_state->__pyx_n_b_search);
  Py_CLEAR(clear_module_state->__pyx_n_b_searchbox);
  Py_CLEAR(clear_module_state->__pyx_n_b_select);
  Py_CLEAR(clear_module_state->__pyx_n_b_separator);
  Py_CLEAR(clear_module_state->__pyx_n_s_skip_elements);
  Py_CLEAR(clear_module_state->__pyx_n_s_skip_selector);
  Py_CLEAR(clear_module_state->__pyx_n_s_skip_selectors);
  Py_CLEAR(clear_module_state->__pyx_n_b_style);
  Py_CLEAR(clear_module_state->__pyx_n_b_svg);
  Py_CLEAR(clear_module_state->__pyx_n_b_tab);
  Py_CLEAR(clear_module_state->__pyx_n_b_template);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_b_textarea);
  Py_CLEAR(clear_module_state->__pyx_n_b_toolbar);
  Py_CLEAR(clear_module_state->__pyx_n_b_tooltip);
  Py_CLEAR(clear_module_state->__pyx_n_s_tree);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_b_video);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_codeobj__7);
  Py_CLEAR(clear_module_state->__pyx_codeobj__9);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_15resiliparse_dom_5parse_4html_DOMElementClassList);
  Py_VISIT(traverse_module_state->__pyx_ptype_15resiliparse_dom_5parse_4html_DOMNode);
  Py_VISIT(traverse_module_state->__pyx_ptype_15resiliparse_dom_5parse_4html_DOMCollection);
  Py_VISIT(traverse_module_state->__pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Parameter_html_is_neither_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s__10);
  Py_VISIT(traverse_module_state->__pyx_kp_u__2);
  Py_VISIT(traverse_module_state->__pyx_kp_b__3);
  Py_VISIT(traverse_module_state->__pyx_kp_u__4);
  Py_VISIT(traverse_module_state->__pyx_n_b_alert);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_alt_texts);
  Py_VISIT(traverse_module_state->__pyx_n_b_area);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_b_audio);
  Py_VISIT(traverse_module_state->__pyx_n_b_banner);
  Py_VISIT(traverse_module_state->__pyx_n_s_body);
  Py_VISIT(traverse_module_state->__pyx_n_b_button);
  Py_VISIT(traverse_module_state->__pyx_n_b_checkbox);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_b_comment);
  Py_VISIT(traverse_module_state->__pyx_n_s_comments);
  Py_VISIT(traverse_module_state->__pyx_n_b_complementary);
  Py_VISIT(traverse_module_state->__pyx_n_b_contentinfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_decode);
  Py_VISIT(traverse_module_state->__pyx_n_b_dialog);
  Py_VISIT(traverse_module_state->__pyx_n_s_e);
  Py_VISIT(traverse_module_state->__pyx_n_b_embed);
  Py_VISIT(traverse_module_state->__pyx_n_b_embedimg);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_n_s_errors);
  Py_VISIT(traverse_module_state->__pyx_n_s_extract_plain_text);
  Py_VISIT(traverse_module_state->__pyx_n_u_extract_plain_text);
  Py_VISIT(traverse_module_state->__pyx_n_s_extract_simplified_dom);
  Py_VISIT(traverse_module_state->__pyx_n_s_extracted);
  Py_VISIT(traverse_module_state->__pyx_n_b_figcaption);
  Py_VISIT(traverse_module_state->__pyx_n_b_figure);
  Py_VISIT(traverse_module_state->__pyx_n_s_form_fields);
  Py_VISIT(traverse_module_state->__pyx_n_s_formatting_opts);
  Py_VISIT(traverse_module_state->__pyx_n_b_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_html);
  Py_VISIT(traverse_module_state->__pyx_n_b_iframe);
  Py_VISIT(traverse_module_state->__pyx_n_u_ignore);
  Py_VISIT(traverse_module_state->__pyx_n_b_img);
  Py_VISIT(traverse_module_state->__pyx_n_b_input);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_join);
  Py_VISIT(traverse_module_state->__pyx_n_b_label);
  Py_VISIT(traverse_module_state->__pyx_n_s_links);
  Py_VISIT(traverse_module_state->__pyx_n_s_list_bullets);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_main_content);
  Py_VISIT(traverse_module_state->__pyx_n_b_menu);
  Py_VISIT(traverse_module_state->__pyx_n_b_menubar);
  Py_VISIT(traverse_module_state->__pyx_n_b_menuitem);
  Py_VISIT(traverse_module_state->__pyx_n_u_minimal_html);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_b_navigation);
  Py_VISIT(traverse_module_state->__pyx_n_b_noscript);
  Py_VISIT(traverse_module_state->__pyx_n_s_noscript);
  Py_VISIT(traverse_module_state->__pyx_n_b_object);
  Py_VISIT(traverse_module_state->__pyx_n_b_option);
  Py_VISIT(traverse_module_state->__pyx_n_s_parse);
  Py_VISIT(traverse_module_state->__pyx_n_b_presentation);
  Py_VISIT(traverse_module_state->__pyx_n_s_preserve_formatting);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_b_radio);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_replace);
  Py_VISIT(traverse_module_state->__pyx_kp_s_resiliparse_dom_extract_html2tex);
  Py_VISIT(traverse_module_state->__pyx_n_s_resiliparse_dom_extract_html2tex_2);
  Py_VISIT(traverse_module_state->__pyx_n_b_script);
  Py_VISIT(traverse_module_state->__pyx_n_b_search);
  Py_VISIT(traverse_module_state->__pyx_n_b_searchbox);
  Py_VISIT(traverse_module_state->__pyx_n_b_select);
  Py_VISIT(traverse_module_state->__pyx_n_b_separator);
  Py_VISIT(traverse_module_state->__pyx_n_s_skip_elements);
  Py_VISIT(traverse_module_state->__pyx_n_s_skip_selector);
  Py_VISIT(traverse_module_state->__pyx_n_s_skip_selectors);
  Py_VISIT(traverse_module_state->__pyx_n_b_style);
  Py_VISIT(traverse_module_state->__pyx_n_b_svg);
  Py_VISIT(traverse_module_state->__pyx_n_b_tab);
  Py_VISIT(traverse_module_state->__pyx_n_b_template);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_b_textarea);
  Py_VISIT(traverse_module_state->__pyx_n_b_toolbar);
  Py_VISIT(traverse_module_state->__pyx_n_b_tooltip);
  Py_VISIT(traverse_module_state->__pyx_n_s_tree);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_b_video);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_codeobj__7);
  Py_VISIT(traverse_module_state->__pyx_codeobj__9);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_15resiliparse_dom_5parse_4html_DOMElementClassList __pyx_mstate_global->__pyx_ptype_15resiliparse_dom_5parse_4html_DOMElementClassList
#define __pyx_ptype_15resiliparse_dom_5parse_4html_DOMNode __pyx_mstate_global->__pyx_ptype_15resiliparse_dom_5parse_4html_DOMNode
#define __pyx_ptype_15resiliparse_dom_5parse_4html_DOMCollection __pyx_mstate_global->__pyx_ptype_15resiliparse_dom_5parse_4html_DOMCollection
#define __pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree __pyx_mstate_global->__pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_kp_u_Parameter_html_is_neither_string __pyx_mstate_global->__pyx_kp_u_Parameter_html_is_neither_string
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s__10 __pyx_mstate_global->__pyx_n_s__10
#define __pyx_kp_u__2 __pyx_mstate_global->__pyx_kp_u__2
#define __pyx_kp_b__3 __pyx_mstate_global->__pyx_kp_b__3
#define __pyx_kp_u__4 __pyx_mstate_global->__pyx_kp_u__4
#define __pyx_n_b_alert __pyx_mstate_global->__pyx_n_b_alert
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_n_s_alt_texts __pyx_mstate_global->__pyx_n_s_alt_texts
#define __pyx_n_b_area __pyx_mstate_global->__pyx_n_b_area
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_b_audio __pyx_mstate_global->__pyx_n_b_audio
#define __pyx_n_b_banner __pyx_mstate_global->__pyx_n_b_banner
#define __pyx_n_s_body __pyx_mstate_global->__pyx_n_s_body
#define __pyx_n_b_button __pyx_mstate_global->__pyx_n_b_button
#define __pyx_n_b_checkbox __pyx_mstate_global->__pyx_n_b_checkbox
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_b_comment __pyx_mstate_global->__pyx_n_b_comment
#define __pyx_n_s_comments __pyx_mstate_global->__pyx_n_s_comments
#define __pyx_n_b_complementary __pyx_mstate_global->__pyx_n_b_complementary
#define __pyx_n_b_contentinfo __pyx_mstate_global->__pyx_n_b_contentinfo
#define __pyx_n_s_decode __pyx_mstate_global->__pyx_n_s_decode
#define __pyx_n_b_dialog __pyx_mstate_global->__pyx_n_b_dialog
#define __pyx_n_s_e __pyx_mstate_global->__pyx_n_s_e
#define __pyx_n_b_embed __pyx_mstate_global->__pyx_n_b_embed
#define __pyx_n_b_embedimg __pyx_mstate_global->__pyx_n_b_embedimg
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_n_s_errors __pyx_mstate_global->__pyx_n_s_errors
#define __pyx_n_s_extract_plain_text __pyx_mstate_global->__pyx_n_s_extract_plain_text
#define __pyx_n_u_extract_plain_text __pyx_mstate_global->__pyx_n_u_extract_plain_text
#define __pyx_n_s_extract_simplified_dom __pyx_mstate_global->__pyx_n_s_extract_simplified_dom
#define __pyx_n_s_extracted __pyx_mstate_global->__pyx_n_s_extracted
#define __pyx_n_b_figcaption __pyx_mstate_global->__pyx_n_b_figcaption
#define __pyx_n_b_figure __pyx_mstate_global->__pyx_n_b_figure
#define __pyx_n_s_form_fields __pyx_mstate_global->__pyx_n_s_form_fields
#define __pyx_n_s_formatting_opts __pyx_mstate_global->__pyx_n_s_formatting_opts
#define __pyx_n_b_frame __pyx_mstate_global->__pyx_n_b_frame
#define __pyx_n_s_html __pyx_mstate_global->__pyx_n_s_html
#define __pyx_n_b_iframe __pyx_mstate_global->__pyx_n_b_iframe
#define __pyx_n_u_ignore __pyx_mstate_global->__pyx_n_u_ignore
#define __pyx_n_b_img __pyx_mstate_global->__pyx_n_b_img
#define __pyx_n_b_input __pyx_mstate_global->__pyx_n_b_input
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_join __pyx_mstate_global->__pyx_n_s_join
#define __pyx_n_b_label __pyx_mstate_global->__pyx_n_b_label
#define __pyx_n_s_links __pyx_mstate_global->__pyx_n_s_links
#define __pyx_n_s_list_bullets __pyx_mstate_global->__pyx_n_s_list_bullets
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_main_content __pyx_mstate_global->__pyx_n_s_main_content
#define __pyx_n_b_menu __pyx_mstate_global->__pyx_n_b_menu
#define __pyx_n_b_menubar __pyx_mstate_global->__pyx_n_b_menubar
#define __pyx_n_b_menuitem __pyx_mstate_global->__pyx_n_b_menuitem
#define __pyx_n_u_minimal_html __pyx_mstate_global->__pyx_n_u_minimal_html
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_b_navigation __pyx_mstate_global->__pyx_n_b_navigation
#define __pyx_n_b_noscript __pyx_mstate_global->__pyx_n_b_noscript
#define __pyx_n_s_noscript __pyx_mstate_global->__pyx_n_s_noscript
#define __pyx_n_b_object __pyx_mstate_global->__pyx_n_b_object
#define __pyx_n_b_option __pyx_mstate_global->__pyx_n_b_option
#define __pyx_n_s_parse __pyx_mstate_global->__pyx_n_s_parse
#define __pyx_n_b_presentation __pyx_mstate_global->__pyx_n_b_presentation
#define __pyx_n_s_preserve_formatting __pyx_mstate_global->__pyx_n_s_preserve_formatting
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_b_radio __pyx_mstate_global->__pyx_n_b_radio
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_replace __pyx_mstate_global->__pyx_n_s_replace
#define __pyx_kp_s_resiliparse_dom_extract_html2tex __pyx_mstate_global->__pyx_kp_s_resiliparse_dom_extract_html2tex
#define __pyx_n_s_resiliparse_dom_extract_html2tex_2 __pyx_mstate_global->__pyx_n_s_resiliparse_dom_extract_html2tex_2
#define __pyx_n_b_script __pyx_mstate_global->__pyx_n_b_script
#define __pyx_n_b_search __pyx_mstate_global->__pyx_n_b_search
#define __pyx_n_b_searchbox __pyx_mstate_global->__pyx_n_b_searchbox
#define __pyx_n_b_select __pyx_mstate_global->__pyx_n_b_select
#define __pyx_n_b_separator __pyx_mstate_global->__pyx_n_b_separator
#define __pyx_n_s_skip_elements __pyx_mstate_global->__pyx_n_s_skip_elements
#define __pyx_n_s_skip_selector __pyx_mstate_global->__pyx_n_s_skip_selector
#define __pyx_n_s_skip_selectors __pyx_mstate_global->__pyx_n_s_skip_selectors
#define __pyx_n_b_style __pyx_mstate_global->__pyx_n_b_style
#define __pyx_n_b_svg __pyx_mstate_global->__pyx_n_b_svg
#define __pyx_n_b_tab __pyx_mstate_global->__pyx_n_b_tab
#define __pyx_n_b_template __pyx_mstate_global->__pyx_n_b_template
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_b_textarea __pyx_mstate_global->__pyx_n_b_textarea
#define __pyx_n_b_toolbar __pyx_mstate_global->__pyx_n_b_toolbar
#define __pyx_n_b_tooltip __pyx_mstate_global->__pyx_n_b_tooltip
#define __pyx_n_s_tree __pyx_mstate_global->__pyx_n_s_tree
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_b_video __pyx_mstate_global->__pyx_n_b_video
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_codeobj__7 __pyx_mstate_global->__pyx_codeobj__7
#define __pyx_codeobj__9 __pyx_mstate_global->__pyx_codeobj__9
/* #### Code section: module_code ### */

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  char const *__pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 16, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "set.from_py":145
 * 
 * @cname("__pyx_convert_set_from_py_std_3a__3a_string")
 * cdef set[X] __pyx_convert_set_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

static std::set<std::string>  __pyx_convert_set_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::set<std::string>  __pyx_v_s;
  PyObject *__pyx_v_item = NULL;
  std::set<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_set_from_py_std_3a__3a_string", 1);

  /* "set.from_py":147
 * cdef set[X] __pyx_convert_set_from_py_std_3a__3a_string(object o) except *:
 *     cdef set[X] s
 *     for item in o:             # <<<<<<<<<<<<<<
 *         s.insert(<X>item)
 *     return s
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 147, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 147, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 147, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 147, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 147, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 147, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "set.from_py":148
 *     cdef set[X] s
 *     for item in o:
 *         s.insert(<X>item)             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 148, __pyx_L1_error)
    try {
      __pyx_v_s.insert(((std::string)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 148, __pyx_L1_error)
    }

    /* "set.from_py":147
 * cdef set[X] __pyx_convert_set_from_py_std_3a__3a_string(object o) except *:
 *     cdef set[X] s
 *     for item in o:             # <<<<<<<<<<<<<<
 *         s.insert(<X>item)
 *     return s
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "set.from_py":149
 *     for item in o:
 *         s.insert(<X>item)
 *     return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "set.from_py":145
 * 
 * @cname("__pyx_convert_set_from_py_std_3a__3a_string")
 * cdef set[X] __pyx_convert_set_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef set[X] s
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("set.from_py.__pyx_convert_set_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string", 1);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string", 1);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string", 1);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string", 1);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string", 1);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "resiliparse_common/string_util.pxd":99
 * 
 * 
 * cdef inline string_view strip_sv(string_view s) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """Strip leading and trailing white space from a C++ string_view."""
 *     cdef const char* start = s.data()
 */

static CYTHON_INLINE std::string_view __pyx_f_18resiliparse_common_11string_util_strip_sv(std::string_view __pyx_v_s) {
  char const *__pyx_v_start;
  size_t __pyx_v_l;
  std::string_view __pyx_r;
  int __pyx_t_1;

  /* "resiliparse_common/string_util.pxd":101
 * cdef inline string_view strip_sv(string_view s) noexcept nogil:
 *     """Strip leading and trailing white space from a C++ string_view."""
 *     cdef const char* start = s.data()             # <<<<<<<<<<<<<<
 *     cdef size_t l = strip_c_str(&start, s.size())
 *     if start != s.data():
 */
  __pyx_v_start = __pyx_v_s.data();

  /* "resiliparse_common/string_util.pxd":102
 *     """Strip leading and trailing white space from a C++ string_view."""
 *     cdef const char* start = s.data()
 *     cdef size_t l = strip_c_str(&start, s.size())             # <<<<<<<<<<<<<<
 *     if start != s.data():
 *         s.remove_prefix(start - s.data())
 */
  __pyx_v_l = strip_c_str((&__pyx_v_start), __pyx_v_s.size());

  /* "resiliparse_common/string_util.pxd":103
 *     cdef const char* start = s.data()
 *     cdef size_t l = strip_c_str(&start, s.size())
 *     if start != s.data():             # <<<<<<<<<<<<<<
 *         s.remove_prefix(start - s.data())
 *     if l != s.size():
 */
  __pyx_t_1 = (__pyx_v_start != __pyx_v_s.data());
  if (__pyx_t_1) {

    /* "resiliparse_common/string_util.pxd":104
 *     cdef size_t l = strip_c_str(&start, s.size())
 *     if start != s.data():
 *         s.remove_prefix(start - s.data())             # <<<<<<<<<<<<<<
 *     if l != s.size():
 *         s.remove_suffix(s.size() - l)
 */
    (void)(__pyx_v_s.remove_prefix((__pyx_v_start - __pyx_v_s.data())));

    /* "resiliparse_common/string_util.pxd":103
 *     cdef const char* start = s.data()
 *     cdef size_t l = strip_c_str(&start, s.size())
 *     if start != s.data():             # <<<<<<<<<<<<<<
 *         s.remove_prefix(start - s.data())
 *     if l != s.size():
 */
  }

  /* "resiliparse_common/string_util.pxd":105
 *     if start != s.data():
 *         s.remove_prefix(start - s.data())
 *     if l != s.size():             # <<<<<<<<<<<<<<
 *         s.remove_suffix(s.size() - l)
 *     return s
 */
  __pyx_t_1 = (__pyx_v_l != __pyx_v_s.size());
  if (__pyx_t_1) {

    /* "resiliparse_common/string_util.pxd":106
 *         s.remove_prefix(start - s.data())
 *     if l != s.size():
 *         s.remove_suffix(s.size() - l)             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    (void)(__pyx_v_s.remove_suffix((__pyx_v_s.size() - __pyx_v_l)));

    /* "resiliparse_common/string_util.pxd":105
 *     if start != s.data():
 *         s.remove_prefix(start - s.data())
 *     if l != s.size():             # <<<<<<<<<<<<<<
 *         s.remove_suffix(s.size() - l)
 *     return s
 */
  }

  /* "resiliparse_common/string_util.pxd":107
 *     if l != s.size():
 *         s.remove_suffix(s.size() - l)
 *     return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "resiliparse_common/string_util.pxd":99
 * 
 * 
 * cdef inline string_view strip_sv(string_view s) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """Strip leading and trailing white space from a C++ string_view."""
 *     cdef const char* start = s.data()
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_common/string_util.pxd":110
 * 
 * 
 * cdef inline string str_to_lower(string s) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """Convert a C++ string to lower-case characters."""
 *     cdef size_t i
 */

static CYTHON_INLINE std::string __pyx_f_18resiliparse_common_11string_util_str_to_lower(std::string __pyx_v_s) {
  size_t __pyx_v_i;
  std::string __pyx_r;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;

  /* "resiliparse_common/string_util.pxd":113
 *     """Convert a C++ string to lower-case characters."""
 *     cdef size_t i
 *     for i in range(s.size()):             # <<<<<<<<<<<<<<
 *         s[i] = tolower(s[i])
 *     return s
 */
  __pyx_t_1 = __pyx_v_s.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "resiliparse_common/string_util.pxd":114
 *     cdef size_t i
 *     for i in range(s.size()):
 *         s[i] = tolower(s[i])             # <<<<<<<<<<<<<<
 *     return s
 */
    (__pyx_v_s[__pyx_v_i]) = std::tolower((__pyx_v_s[__pyx_v_i]));
  }

  /* "resiliparse_common/string_util.pxd":115
 *     for i in range(s.size()):
 *         s[i] = tolower(s[i])
 *     return s             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "resiliparse_common/string_util.pxd":110
 * 
 * 
 * cdef inline string str_to_lower(string s) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """Convert a C++ string to lower-case characters."""
 *     cdef size_t i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/parse/html.pxd":20
 * 
 * 
 * cdef inline bint check_node(DOMNode node) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """Check whether node is initialized and valid."""
 *     return node is not None and node.tree is not None and node.node != NULL
 */

static CYTHON_INLINE int __pyx_f_15resiliparse_dom_5parse_4html_check_node(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *__pyx_v_node) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "resiliparse_dom/parse/html.pxd":22
 * cdef inline bint check_node(DOMNode node) noexcept nogil:
 *     """Check whether node is initialized and valid."""
 *     return node is not None and node.tree is not None and node.node != NULL             # <<<<<<<<<<<<<<
 * 
 * cdef void create_css_parser(lxb_css_memory_t** memory, lxb_css_parser_t** parser) noexcept nogil
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_node) != Py_None);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (((PyObject *)__pyx_v_node->tree) != Py_None);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_node->node != NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "resiliparse_dom/parse/html.pxd":20
 * 
 * 
 * cdef inline bint check_node(DOMNode node) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """Check whether node is initialized and valid."""
 *     return node is not None and node.tree is not None and node.node != NULL
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/parse/html.pxd":34
 *                                size_t* depth=*, bint* end_tag=*) noexcept nogil
 * 
 * cdef inline lxb_dom_node_t* next_element_node(const lxb_dom_node_t* root_node, lxb_dom_node_t* node,             # <<<<<<<<<<<<<<
 *                                               size_t* depth=NULL, bint* end_tag=NULL) noexcept nogil:
 *     node = next_node(root_node, node, depth, end_tag)
 */

static CYTHON_INLINE lxb_dom_node_t *__pyx_f_15resiliparse_dom_5parse_4html_next_element_node(lxb_dom_node_t const *__pyx_v_root_node, lxb_dom_node_t *__pyx_v_node, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_next_element_node *__pyx_optional_args) {

  /* "resiliparse_dom/parse/html.pxd":35
 * 
 * cdef inline lxb_dom_node_t* next_element_node(const lxb_dom_node_t* root_node, lxb_dom_node_t* node,
 *                                               size_t* depth=NULL, bint* end_tag=NULL) noexcept nogil:             # <<<<<<<<<<<<<<
 *     node = next_node(root_node, node, depth, end_tag)
 *     while node and node.type != LXB_DOM_NODE_TYPE_ELEMENT:
 */
  size_t *__pyx_v_depth = ((size_t *)NULL);
  int *__pyx_v_end_tag = ((int *)NULL);
  lxb_dom_node_t *__pyx_r;
  lxb_dom_node_t *__pyx_t_1;
  struct __pyx_opt_args_15resiliparse_dom_5parse_4html_next_node __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_depth = __pyx_optional_args->depth;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_end_tag = __pyx_optional_args->end_tag;
      }
    }
  }

  /* "resiliparse_dom/parse/html.pxd":36
 * cdef inline lxb_dom_node_t* next_element_node(const lxb_dom_node_t* root_node, lxb_dom_node_t* node,
 *                                               size_t* depth=NULL, bint* end_tag=NULL) noexcept nogil:
 *     node = next_node(root_node, node, depth, end_tag)             # <<<<<<<<<<<<<<
 *     while node and node.type != LXB_DOM_NODE_TYPE_ELEMENT:
 *         node = next_node(root_node, node, depth, end_tag)
 */
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.depth = __pyx_v_depth;
  __pyx_t_2.end_tag = __pyx_v_end_tag;
  __pyx_t_1 = __pyx_f_15resiliparse_dom_5parse_4html_next_node(__pyx_v_root_node, __pyx_v_node, &__pyx_t_2); 
  __pyx_v_node = __pyx_t_1;

  /* "resiliparse_dom/parse/html.pxd":37
 *                                               size_t* depth=NULL, bint* end_tag=NULL) noexcept nogil:
 *     node = next_node(root_node, node, depth, end_tag)
 *     while node and node.type != LXB_DOM_NODE_TYPE_ELEMENT:             # <<<<<<<<<<<<<<
 *         node = next_node(root_node, node, depth, end_tag)
 *     return node
 */
  while (1) {
    __pyx_t_4 = (__pyx_v_node != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_node->type != LXB_DOM_NODE_TYPE_ELEMENT);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_3) break;

    /* "resiliparse_dom/parse/html.pxd":38
 *     node = next_node(root_node, node, depth, end_tag)
 *     while node and node.type != LXB_DOM_NODE_TYPE_ELEMENT:
 *         node = next_node(root_node, node, depth, end_tag)             # <<<<<<<<<<<<<<
 *     return node
 * 
 */
    __pyx_t_2.__pyx_n = 2;
    __pyx_t_2.depth = __pyx_v_depth;
    __pyx_t_2.end_tag = __pyx_v_end_tag;
    __pyx_t_1 = __pyx_f_15resiliparse_dom_5parse_4html_next_node(__pyx_v_root_node, __pyx_v_node, &__pyx_t_2); 
    __pyx_v_node = __pyx_t_1;
  }

  /* "resiliparse_dom/parse/html.pxd":39
 *     while node and node.type != LXB_DOM_NODE_TYPE_ELEMENT:
 *         node = next_node(root_node, node, depth, end_tag)
 *     return node             # <<<<<<<<<<<<<<
 * 
 * cdef inline string_view get_node_attr_sv(lxb_dom_node_t* node, const string& attr) noexcept nogil:
 */
  __pyx_r = __pyx_v_node;
  goto __pyx_L0;

  /* "resiliparse_dom/parse/html.pxd":34
 *                                size_t* depth=*, bint* end_tag=*) noexcept nogil
 * 
 * cdef inline lxb_dom_node_t* next_element_node(const lxb_dom_node_t* root_node, lxb_dom_node_t* node,             # <<<<<<<<<<<<<<
 *                                               size_t* depth=NULL, bint* end_tag=NULL) noexcept nogil:
 *     node = next_node(root_node, node, depth, end_tag)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/parse/html.pxd":41
 *     return node
 * 
 * cdef inline string_view get_node_attr_sv(lxb_dom_node_t* node, const string& attr) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """Get node attribute value as string_view."""
 *     cdef size_t node_attr_len
 */

static CYTHON_INLINE std::string_view __pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(lxb_dom_node_t *__pyx_v_node, std::string const &__pyx_v_attr) {
  size_t __pyx_v_node_attr_len;
  lxb_char_t const *__pyx_v_node_attr_data;
  std::string_view __pyx_r;

  /* "resiliparse_dom/parse/html.pxd":44
 *     """Get node attribute value as string_view."""
 *     cdef size_t node_attr_len
 *     cdef const lxb_char_t* node_attr_data = lxb_dom_element_get_attribute(             # <<<<<<<<<<<<<<
 *         <lxb_dom_element_t*>node, <lxb_char_t*>attr.data(), attr.size(), &node_attr_len)
 *     return string_view(<const char*>node_attr_data, node_attr_len)
 */
  __pyx_v_node_attr_data = lxb_dom_element_get_attribute(((lxb_dom_element_t *)__pyx_v_node), ((lxb_char_t *)__pyx_v_attr.data()), __pyx_v_attr.size(), (&__pyx_v_node_attr_len));

  /* "resiliparse_dom/parse/html.pxd":46
 *     cdef const lxb_char_t* node_attr_data = lxb_dom_element_get_attribute(
 *         <lxb_dom_element_t*>node, <lxb_char_t*>attr.data(), attr.size(), &node_attr_len)
 *     return string_view(<const char*>node_attr_data, node_attr_len)             # <<<<<<<<<<<<<<
 * 
 * cdef string get_node_text(lxb_dom_node_t* node) noexcept nogil
 */
  __pyx_r = std::string_view(((char const *)__pyx_v_node_attr_data), __pyx_v_node_attr_len);
  goto __pyx_L0;

  /* "resiliparse_dom/parse/html.pxd":41
 *     return node
 * 
 * cdef inline string_view get_node_attr_sv(lxb_dom_node_t* node, const string& attr) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """Get node attribute value as string_view."""
 *     cdef size_t node_attr_len
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":109
 * 
 * 
 * cdef string _get_collapsed_string(const string& input_str) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Collapse newlines and consecutive white space in a string to single spaces.
 */

static std::string __pyx_f_15resiliparse_dom_7extract_9html2text__get_collapsed_string(std::string const &__pyx_v_input_str) {
  std::string __pyx_v_element_text;
  size_t __pyx_v_i;
  std::string __pyx_r;
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":114
 *     Takes into account previously extracted text from ``ctx.text``.
 *     """
 *     if input_str.empty():             # <<<<<<<<<<<<<<
 *         return input_str
 * 
 */
  __pyx_t_1 = __pyx_v_input_str.empty();
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":115
 *     """
 *     if input_str.empty():
 *         return input_str             # <<<<<<<<<<<<<<
 * 
 *     cdef string element_text
 */
    __pyx_r = __pyx_v_input_str;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":114
 *     Takes into account previously extracted text from ``ctx.text``.
 *     """
 *     if input_str.empty():             # <<<<<<<<<<<<<<
 *         return input_str
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":118
 * 
 *     cdef string element_text
 *     element_text.reserve(input_str.size())             # <<<<<<<<<<<<<<
 *     for i in range(input_str.size()):
 *         if isspace(input_str[i]):
 */
  try {
    __pyx_v_element_text.reserve(__pyx_v_input_str.size());
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 118, __pyx_L1_error)
  }

  /* "resiliparse_dom/extract/html2text.pyx":119
 *     cdef string element_text
 *     element_text.reserve(input_str.size())
 *     for i in range(input_str.size()):             # <<<<<<<<<<<<<<
 *         if isspace(input_str[i]):
 *             if element_text.empty() or not isspace(element_text.back()):
 */
  __pyx_t_2 = __pyx_v_input_str.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "resiliparse_dom/extract/html2text.pyx":120
 *     element_text.reserve(input_str.size())
 *     for i in range(input_str.size()):
 *         if isspace(input_str[i]):             # <<<<<<<<<<<<<<
 *             if element_text.empty() or not isspace(element_text.back()):
 *                 element_text.push_back(b' ')
 */
    __pyx_t_1 = (std::isspace((__pyx_v_input_str[__pyx_v_i])) != 0);
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":121
 *     for i in range(input_str.size()):
 *         if isspace(input_str[i]):
 *             if element_text.empty() or not isspace(element_text.back()):             # <<<<<<<<<<<<<<
 *                 element_text.push_back(b' ')
 *         else:
 */
      __pyx_t_5 = __pyx_v_element_text.empty();
      if (!__pyx_t_5) {
      } else {
        __pyx_t_1 = __pyx_t_5;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_5 = (!(std::isspace(__pyx_v_element_text.back()) != 0));
      __pyx_t_1 = __pyx_t_5;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_1) {

        /* "resiliparse_dom/extract/html2text.pyx":122
 *         if isspace(input_str[i]):
 *             if element_text.empty() or not isspace(element_text.back()):
 *                 element_text.push_back(b' ')             # <<<<<<<<<<<<<<
 *         else:
 *             element_text.push_back(input_str[i])
 */
        try {
          __pyx_v_element_text.push_back(' ');
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 122, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":121
 *     for i in range(input_str.size()):
 *         if isspace(input_str[i]):
 *             if element_text.empty() or not isspace(element_text.back()):             # <<<<<<<<<<<<<<
 *                 element_text.push_back(b' ')
 *         else:
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":120
 *     element_text.reserve(input_str.size())
 *     for i in range(input_str.size()):
 *         if isspace(input_str[i]):             # <<<<<<<<<<<<<<
 *             if element_text.empty() or not isspace(element_text.back()):
 *                 element_text.push_back(b' ')
 */
      goto __pyx_L6;
    }

    /* "resiliparse_dom/extract/html2text.pyx":124
 *                 element_text.push_back(b' ')
 *         else:
 *             element_text.push_back(input_str[i])             # <<<<<<<<<<<<<<
 * 
 *     return element_text
 */
    /*else*/ {
      try {
        __pyx_v_element_text.push_back((__pyx_v_input_str[__pyx_v_i]));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 124, __pyx_L1_error)
      }
    }
    __pyx_L6:;
  }

  /* "resiliparse_dom/extract/html2text.pyx":126
 *             element_text.push_back(input_str[i])
 * 
 *     return element_text             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_element_text;
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":109
 * 
 * 
 * cdef string _get_collapsed_string(const string& input_str) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Collapse newlines and consecutive white space in a string to single spaces.
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._get_collapsed_string", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":132
 * 
 * 
 * cdef inline void _ensure_text_contents(vector[shared_ptr[ExtractNode]]& extract_nodes) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if not deref(extract_nodes.back()).text_contents:
 *         deref(extract_nodes.back()).text_contents = make_shared[string]()
 */

static CYTHON_INLINE void __pyx_f_15resiliparse_dom_7extract_9html2text__ensure_text_contents(std::vector<std::shared_ptr<struct ExtractNode> >  &__pyx_v_extract_nodes) {
  int __pyx_t_1;
  std::shared_ptr<std::string>  __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":133
 * 
 * cdef inline void _ensure_text_contents(vector[shared_ptr[ExtractNode]]& extract_nodes) noexcept nogil:
 *     if not deref(extract_nodes.back()).text_contents:             # <<<<<<<<<<<<<<
 *         deref(extract_nodes.back()).text_contents = make_shared[string]()
 * 
 */
  __pyx_t_1 = ((!(*__pyx_v_extract_nodes.back()).text_contents) != 0);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":134
 * cdef inline void _ensure_text_contents(vector[shared_ptr[ExtractNode]]& extract_nodes) noexcept nogil:
 *     if not deref(extract_nodes.back()).text_contents:
 *         deref(extract_nodes.back()).text_contents = make_shared[string]()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    try {
      __pyx_t_2 = std::make_shared<std::string>();
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 134, __pyx_L1_error)
    }
    (*__pyx_v_extract_nodes.back()).text_contents = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

    /* "resiliparse_dom/extract/html2text.pyx":133
 * 
 * cdef inline void _ensure_text_contents(vector[shared_ptr[ExtractNode]]& extract_nodes) noexcept nogil:
 *     if not deref(extract_nodes.back()).text_contents:             # <<<<<<<<<<<<<<
 *         deref(extract_nodes.back()).text_contents = make_shared[string]()
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":132
 * 
 * 
 * cdef inline void _ensure_text_contents(vector[shared_ptr[ExtractNode]]& extract_nodes) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if not deref(extract_nodes.back()).text_contents:
 *         deref(extract_nodes.back()).text_contents = make_shared[string]()
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._ensure_text_contents", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
}

/* "resiliparse_dom/extract/html2text.pyx":137
 * 
 * 
 * cdef inline void _ensure_space(string& in_str, char space_char) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if in_str.empty() or not isspace(in_str.back()):
 *         in_str.push_back(space_char)
 */

static CYTHON_INLINE void __pyx_f_15resiliparse_dom_7extract_9html2text__ensure_space(std::string &__pyx_v_in_str, char __pyx_v_space_char) {
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":138
 * 
 * cdef inline void _ensure_space(string& in_str, char space_char) noexcept nogil:
 *     if in_str.empty() or not isspace(in_str.back()):             # <<<<<<<<<<<<<<
 *         in_str.push_back(space_char)
 * 
 */
  __pyx_t_2 = __pyx_v_in_str.empty();
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (!(std::isspace(__pyx_v_in_str.back()) != 0));
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":139
 * cdef inline void _ensure_space(string& in_str, char space_char) noexcept nogil:
 *     if in_str.empty() or not isspace(in_str.back()):
 *         in_str.push_back(space_char)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    try {
      __pyx_v_in_str.push_back(__pyx_v_space_char);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 139, __pyx_L1_error)
    }

    /* "resiliparse_dom/extract/html2text.pyx":138
 * 
 * cdef inline void _ensure_space(string& in_str, char space_char) noexcept nogil:
 *     if in_str.empty() or not isspace(in_str.back()):             # <<<<<<<<<<<<<<
 *         in_str.push_back(space_char)
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":137
 * 
 * 
 * cdef inline void _ensure_space(string& in_str, char space_char) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if in_str.empty() or not isspace(in_str.back()):
 *         in_str.push_back(space_char)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._ensure_space", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
}

/* "resiliparse_dom/extract/html2text.pyx":142
 * 
 * 
 * cdef string _escape_html(const char* data, size_t length) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef char c
 */

static std::string __pyx_f_15resiliparse_dom_7extract_9html2text__escape_html(char const *__pyx_v_data, size_t __pyx_v_length) {
  size_t __pyx_v_i;
  char __pyx_v_c;
  std::string __pyx_v_data_escaped;
  std::string __pyx_r;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":146
 *     cdef char c
 *     cdef string data_escaped
 *     data_escaped.reserve(length)             # <<<<<<<<<<<<<<
 *     for i in range(length):
 *         c = data[i]
 */
  try {
    __pyx_v_data_escaped.reserve(__pyx_v_length);
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 146, __pyx_L1_error)
  }

  /* "resiliparse_dom/extract/html2text.pyx":147
 *     cdef string data_escaped
 *     data_escaped.reserve(length)
 *     for i in range(length):             # <<<<<<<<<<<<<<
 *         c = data[i]
 *         if c == b'&':
 */
  __pyx_t_1 = __pyx_v_length;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "resiliparse_dom/extract/html2text.pyx":148
 *     data_escaped.reserve(length)
 *     for i in range(length):
 *         c = data[i]             # <<<<<<<<<<<<<<
 *         if c == b'&':
 *             data_escaped.append(b'&amp;')
 */
    __pyx_v_c = (__pyx_v_data[__pyx_v_i]);

    /* "resiliparse_dom/extract/html2text.pyx":149
 *     for i in range(length):
 *         c = data[i]
 *         if c == b'&':             # <<<<<<<<<<<<<<
 *             data_escaped.append(b'&amp;')
 *         elif c == b'"':
 */
    switch (__pyx_v_c) {
      case '&':

      /* "resiliparse_dom/extract/html2text.pyx":150
 *         c = data[i]
 *         if c == b'&':
 *             data_escaped.append(b'&amp;')             # <<<<<<<<<<<<<<
 *         elif c == b'"':
 *             data_escaped.append(b'&quot;')
 */
      try {
        __pyx_v_data_escaped.append(((char const *)"&amp;"));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 150, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":149
 *     for i in range(length):
 *         c = data[i]
 *         if c == b'&':             # <<<<<<<<<<<<<<
 *             data_escaped.append(b'&amp;')
 *         elif c == b'"':
 */
      break;
      case '"':

      /* "resiliparse_dom/extract/html2text.pyx":152
 *             data_escaped.append(b'&amp;')
 *         elif c == b'"':
 *             data_escaped.append(b'&quot;')             # <<<<<<<<<<<<<<
 *         elif c == b'<':
 *             data_escaped.append(b'&lt;')
 */
      try {
        __pyx_v_data_escaped.append(((char const *)"&quot;"));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 152, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":151
 *         if c == b'&':
 *             data_escaped.append(b'&amp;')
 *         elif c == b'"':             # <<<<<<<<<<<<<<
 *             data_escaped.append(b'&quot;')
 *         elif c == b'<':
 */
      break;
      case '<':

      /* "resiliparse_dom/extract/html2text.pyx":154
 *             data_escaped.append(b'&quot;')
 *         elif c == b'<':
 *             data_escaped.append(b'&lt;')             # <<<<<<<<<<<<<<
 *         elif c == b'>':
 *             data_escaped.append(b'&gt;')
 */
      try {
        __pyx_v_data_escaped.append(((char const *)"&lt;"));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 154, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":153
 *         elif c == b'"':
 *             data_escaped.append(b'&quot;')
 *         elif c == b'<':             # <<<<<<<<<<<<<<
 *             data_escaped.append(b'&lt;')
 *         elif c == b'>':
 */
      break;
      case '>':

      /* "resiliparse_dom/extract/html2text.pyx":156
 *             data_escaped.append(b'&lt;')
 *         elif c == b'>':
 *             data_escaped.append(b'&gt;')             # <<<<<<<<<<<<<<
 *         else:
 *             data_escaped.push_back(data[i])
 */
      try {
        __pyx_v_data_escaped.append(((char const *)"&gt;"));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 156, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":155
 *         elif c == b'<':
 *             data_escaped.append(b'&lt;')
 *         elif c == b'>':             # <<<<<<<<<<<<<<
 *             data_escaped.append(b'&gt;')
 *         else:
 */
      break;
      default:

      /* "resiliparse_dom/extract/html2text.pyx":158
 *             data_escaped.append(b'&gt;')
 *         else:
 *             data_escaped.push_back(data[i])             # <<<<<<<<<<<<<<
 *     return data_escaped
 * 
 */
      try {
        __pyx_v_data_escaped.push_back((__pyx_v_data[__pyx_v_i]));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 158, __pyx_L1_error)
      }
      break;
    }
  }

  /* "resiliparse_dom/extract/html2text.pyx":159
 *         else:
 *             data_escaped.push_back(data[i])
 *     return data_escaped             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_data_escaped;
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":142
 * 
 * 
 * cdef string _escape_html(const char* data, size_t length) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef char c
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._escape_html", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":162
 * 
 * 
 * cdef void _extract_cb(vector[shared_ptr[ExtractNode]]& extract_nodes, ExtractContext& ctx, bint is_end_tag) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ExtractNode] current_node
 *     cdef shared_ptr[ExtractNode] last_node
 */

static void __pyx_f_15resiliparse_dom_7extract_9html2text__extract_cb(std::vector<std::shared_ptr<struct ExtractNode> >  &__pyx_v_extract_nodes, struct ExtractContext &__pyx_v_ctx, int __pyx_v_is_end_tag) {
  std::shared_ptr<struct ExtractNode>  __pyx_v_current_node;
  std::shared_ptr<struct ExtractNode>  __pyx_v_last_node;
  int __pyx_v_is_block;
  lxb_dom_character_data_t *__pyx_v_node_char_data;
  std::string __pyx_v_element_text;
  std::string_view __pyx_v_element_text_sv;
  int __pyx_t_1;
  int __pyx_t_2;
  std::shared_ptr<struct ExtractNode>  __pyx_t_3;
  lxb_dom_node_t *__pyx_t_4;
  size_t __pyx_t_5;
  uintptr_t __pyx_t_6;
  bool __pyx_t_7;
  struct ExtractNode *__pyx_t_8;
  std::string __pyx_t_9;
  int __pyx_t_10;
  std::string_view __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":166
 *     cdef shared_ptr[ExtractNode] last_node
 * 
 *     if not extract_nodes.empty():             # <<<<<<<<<<<<<<
 *         last_node = extract_nodes.back()
 *         current_node = last_node
 */
  __pyx_t_1 = (!__pyx_v_extract_nodes.empty());
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":167
 * 
 *     if not extract_nodes.empty():
 *         last_node = extract_nodes.back()             # <<<<<<<<<<<<<<
 *         current_node = last_node
 * 
 */
    __pyx_v_last_node = __pyx_v_extract_nodes.back();

    /* "resiliparse_dom/extract/html2text.pyx":168
 *     if not extract_nodes.empty():
 *         last_node = extract_nodes.back()
 *         current_node = last_node             # <<<<<<<<<<<<<<
 * 
 *     cdef bint is_block = ctx.node.type == LXB_DOM_NODE_TYPE_ELEMENT and is_block_element(ctx.node.local_name)
 */
    __pyx_v_current_node = __pyx_v_last_node;

    /* "resiliparse_dom/extract/html2text.pyx":166
 *     cdef shared_ptr[ExtractNode] last_node
 * 
 *     if not extract_nodes.empty():             # <<<<<<<<<<<<<<
 *         last_node = extract_nodes.back()
 *         current_node = last_node
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":170
 *         current_node = last_node
 * 
 *     cdef bint is_block = ctx.node.type == LXB_DOM_NODE_TYPE_ELEMENT and is_block_element(ctx.node.local_name)             # <<<<<<<<<<<<<<
 * 
 *     if not last_node or is_block or ctx.depth < deref(last_node).depth or \
 */
  __pyx_t_2 = (__pyx_v_ctx.node->type == LXB_DOM_NODE_TYPE_ELEMENT);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __pyx_f_15resiliparse_dom_5parse_4html_is_block_element(__pyx_v_ctx.node->local_name);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_v_is_block = __pyx_t_1;

  /* "resiliparse_dom/extract/html2text.pyx":172
 *     cdef bint is_block = ctx.node.type == LXB_DOM_NODE_TYPE_ELEMENT and is_block_element(ctx.node.local_name)
 * 
 *     if not last_node or is_block or ctx.depth < deref(last_node).depth or \             # <<<<<<<<<<<<<<
 *             (ctx.opts.links and ctx.node.local_name == LXB_TAG_A) or ctx.node.local_name == LXB_TAG_TEXTAREA:
 *         current_node = make_shared[ExtractNode]()
 */
  __pyx_t_2 = ((!__pyx_v_last_node) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  if (!__pyx_v_is_block) {
  } else {
    __pyx_t_1 = __pyx_v_is_block;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_ctx.depth < (*__pyx_v_last_node).depth);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "resiliparse_dom/extract/html2text.pyx":173
 * 
 *     if not last_node or is_block or ctx.depth < deref(last_node).depth or \
 *             (ctx.opts.links and ctx.node.local_name == LXB_TAG_A) or ctx.node.local_name == LXB_TAG_TEXTAREA:             # <<<<<<<<<<<<<<
 *         current_node = make_shared[ExtractNode]()
 *         extract_nodes.push_back(current_node)
 */
  if (!__pyx_v_ctx.opts.links) {
    goto __pyx_L11_next_or;
  } else {
  }
  __pyx_t_2 = (__pyx_v_ctx.node->local_name == LXB_TAG_A);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_L11_next_or:;
  __pyx_t_2 = (__pyx_v_ctx.node->local_name == LXB_TAG_TEXTAREA);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "resiliparse_dom/extract/html2text.pyx":172
 *     cdef bint is_block = ctx.node.type == LXB_DOM_NODE_TYPE_ELEMENT and is_block_element(ctx.node.local_name)
 * 
 *     if not last_node or is_block or ctx.depth < deref(last_node).depth or \             # <<<<<<<<<<<<<<
 *             (ctx.opts.links and ctx.node.local_name == LXB_TAG_A) or ctx.node.local_name == LXB_TAG_TEXTAREA:
 *         current_node = make_shared[ExtractNode]()
 */
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":174
 *     if not last_node or is_block or ctx.depth < deref(last_node).depth or \
 *             (ctx.opts.links and ctx.node.local_name == LXB_TAG_A) or ctx.node.local_name == LXB_TAG_TEXTAREA:
 *         current_node = make_shared[ExtractNode]()             # <<<<<<<<<<<<<<
 *         extract_nodes.push_back(current_node)
 *         deref(current_node).reference_node = ctx.node
 */
    try {
      __pyx_t_3 = std::make_shared<struct ExtractNode>();
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 174, __pyx_L1_error)
    }
    __pyx_v_current_node = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

    /* "resiliparse_dom/extract/html2text.pyx":175
 *             (ctx.opts.links and ctx.node.local_name == LXB_TAG_A) or ctx.node.local_name == LXB_TAG_TEXTAREA:
 *         current_node = make_shared[ExtractNode]()
 *         extract_nodes.push_back(current_node)             # <<<<<<<<<<<<<<
 *         deref(current_node).reference_node = ctx.node
 *         deref(current_node).depth = ctx.depth
 */
    try {
      __pyx_v_extract_nodes.push_back(__pyx_v_current_node);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 175, __pyx_L1_error)
    }

    /* "resiliparse_dom/extract/html2text.pyx":176
 *         current_node = make_shared[ExtractNode]()
 *         extract_nodes.push_back(current_node)
 *         deref(current_node).reference_node = ctx.node             # <<<<<<<<<<<<<<
 *         deref(current_node).depth = ctx.depth
 *         deref(current_node).make_block = is_block
 */
    __pyx_t_4 = __pyx_v_ctx.node;
    (*__pyx_v_current_node).reference_node = __pyx_t_4;

    /* "resiliparse_dom/extract/html2text.pyx":177
 *         extract_nodes.push_back(current_node)
 *         deref(current_node).reference_node = ctx.node
 *         deref(current_node).depth = ctx.depth             # <<<<<<<<<<<<<<
 *         deref(current_node).make_block = is_block
 *         deref(current_node).make_big_block = ctx.node.local_name in [LXB_TAG_P, LXB_TAG_H1, LXB_TAG_H2, LXB_TAG_H3, LXB_TAG_H4]
 */
    __pyx_t_5 = __pyx_v_ctx.depth;
    (*__pyx_v_current_node).depth = __pyx_t_5;

    /* "resiliparse_dom/extract/html2text.pyx":178
 *         deref(current_node).reference_node = ctx.node
 *         deref(current_node).depth = ctx.depth
 *         deref(current_node).make_block = is_block             # <<<<<<<<<<<<<<
 *         deref(current_node).make_big_block = ctx.node.local_name in [LXB_TAG_P, LXB_TAG_H1, LXB_TAG_H2, LXB_TAG_H3, LXB_TAG_H4]
 *         deref(current_node).tag_id = ctx.node.local_name
 */
    (*__pyx_v_current_node).make_block = __pyx_v_is_block;

    /* "resiliparse_dom/extract/html2text.pyx":179
 *         deref(current_node).depth = ctx.depth
 *         deref(current_node).make_block = is_block
 *         deref(current_node).make_big_block = ctx.node.local_name in [LXB_TAG_P, LXB_TAG_H1, LXB_TAG_H2, LXB_TAG_H3, LXB_TAG_H4]             # <<<<<<<<<<<<<<
 *         deref(current_node).tag_id = ctx.node.local_name
 *         deref(current_node).pre_depth = deref(last_node).pre_depth if last_node else 0
 */
    switch (__pyx_v_ctx.node->local_name) {
      case LXB_TAG_P:
      case LXB_TAG_H1:
      case LXB_TAG_H2:
      case LXB_TAG_H3:
      case LXB_TAG_H4:
      __pyx_t_1 = 1;
      break;
      default:
      __pyx_t_1 = 0;
      break;
    }
    (*__pyx_v_current_node).make_big_block = __pyx_t_1;

    /* "resiliparse_dom/extract/html2text.pyx":180
 *         deref(current_node).make_block = is_block
 *         deref(current_node).make_big_block = ctx.node.local_name in [LXB_TAG_P, LXB_TAG_H1, LXB_TAG_H2, LXB_TAG_H3, LXB_TAG_H4]
 *         deref(current_node).tag_id = ctx.node.local_name             # <<<<<<<<<<<<<<
 *         deref(current_node).pre_depth = deref(last_node).pre_depth if last_node else 0
 *         if ctx.node.local_name in [LXB_TAG_PRE, LXB_TAG_TEXTAREA]:
 */
    __pyx_t_6 = __pyx_v_ctx.node->local_name;
    (*__pyx_v_current_node).tag_id = __pyx_t_6;

    /* "resiliparse_dom/extract/html2text.pyx":181
 *         deref(current_node).make_big_block = ctx.node.local_name in [LXB_TAG_P, LXB_TAG_H1, LXB_TAG_H2, LXB_TAG_H3, LXB_TAG_H4]
 *         deref(current_node).tag_id = ctx.node.local_name
 *         deref(current_node).pre_depth = deref(last_node).pre_depth if last_node else 0             # <<<<<<<<<<<<<<
 *         if ctx.node.local_name in [LXB_TAG_PRE, LXB_TAG_TEXTAREA]:
 *             current_node.get().pre_depth += 1 if not is_end_tag else -1
 */
    __pyx_t_7 = __pyx_v_last_node.operator bool();
    if (__pyx_t_7) {
      __pyx_t_5 = (*__pyx_v_last_node).pre_depth;
    } else {
      __pyx_t_5 = 0;
    }
    (*__pyx_v_current_node).pre_depth = __pyx_t_5;

    /* "resiliparse_dom/extract/html2text.pyx":182
 *         deref(current_node).tag_id = ctx.node.local_name
 *         deref(current_node).pre_depth = deref(last_node).pre_depth if last_node else 0
 *         if ctx.node.local_name in [LXB_TAG_PRE, LXB_TAG_TEXTAREA]:             # <<<<<<<<<<<<<<
 *             current_node.get().pre_depth += 1 if not is_end_tag else -1
 *         deref(current_node).is_end_tag = is_end_tag
 */
    switch (__pyx_v_ctx.node->local_name) {
      case LXB_TAG_PRE:
      case LXB_TAG_TEXTAREA:

      /* "resiliparse_dom/extract/html2text.pyx":183
 *         deref(current_node).pre_depth = deref(last_node).pre_depth if last_node else 0
 *         if ctx.node.local_name in [LXB_TAG_PRE, LXB_TAG_TEXTAREA]:
 *             current_node.get().pre_depth += 1 if not is_end_tag else -1             # <<<<<<<<<<<<<<
 *         deref(current_node).is_end_tag = is_end_tag
 *         deref(current_node).escape_text_contents = ctx.opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML
 */
      __pyx_t_8 = __pyx_v_current_node.get();
      __pyx_t_1 = (!__pyx_v_is_end_tag);
      if (__pyx_t_1) {
        __pyx_t_5 = 1;
      } else {
        __pyx_t_5 = -1L;
      }
      __pyx_t_8->pre_depth = (__pyx_t_8->pre_depth + __pyx_t_5);

      /* "resiliparse_dom/extract/html2text.pyx":182
 *         deref(current_node).tag_id = ctx.node.local_name
 *         deref(current_node).pre_depth = deref(last_node).pre_depth if last_node else 0
 *         if ctx.node.local_name in [LXB_TAG_PRE, LXB_TAG_TEXTAREA]:             # <<<<<<<<<<<<<<
 *             current_node.get().pre_depth += 1 if not is_end_tag else -1
 *         deref(current_node).is_end_tag = is_end_tag
 */
      break;
      default: break;
    }

    /* "resiliparse_dom/extract/html2text.pyx":184
 *         if ctx.node.local_name in [LXB_TAG_PRE, LXB_TAG_TEXTAREA]:
 *             current_node.get().pre_depth += 1 if not is_end_tag else -1
 *         deref(current_node).is_end_tag = is_end_tag             # <<<<<<<<<<<<<<
 *         deref(current_node).escape_text_contents = ctx.opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML
 * 
 */
    (*__pyx_v_current_node).is_end_tag = __pyx_v_is_end_tag;

    /* "resiliparse_dom/extract/html2text.pyx":185
 *             current_node.get().pre_depth += 1 if not is_end_tag else -1
 *         deref(current_node).is_end_tag = is_end_tag
 *         deref(current_node).escape_text_contents = ctx.opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML             # <<<<<<<<<<<<<<
 * 
 *     cdef lxb_dom_character_data_t* node_char_data = NULL
 */
    (*__pyx_v_current_node).escape_text_contents = (__pyx_v_ctx.opts.preserve_formatting == FORMAT_MINIMAL_HTML);

    /* "resiliparse_dom/extract/html2text.pyx":172
 *     cdef bint is_block = ctx.node.type == LXB_DOM_NODE_TYPE_ELEMENT and is_block_element(ctx.node.local_name)
 * 
 *     if not last_node or is_block or ctx.depth < deref(last_node).depth or \             # <<<<<<<<<<<<<<
 *             (ctx.opts.links and ctx.node.local_name == LXB_TAG_A) or ctx.node.local_name == LXB_TAG_TEXTAREA:
 *         current_node = make_shared[ExtractNode]()
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":187
 *         deref(current_node).escape_text_contents = ctx.opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML
 * 
 *     cdef lxb_dom_character_data_t* node_char_data = NULL             # <<<<<<<<<<<<<<
 *     cdef string node_char_data_escaped
 *     cdef string element_text
 */
  __pyx_v_node_char_data = NULL;

  /* "resiliparse_dom/extract/html2text.pyx":192
 *     cdef string_view element_text_sv
 * 
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *         _ensure_text_contents(extract_nodes)
 *         node_char_data = <lxb_dom_character_data_t*>ctx.node
 */
  __pyx_t_1 = (__pyx_v_ctx.node->type == LXB_DOM_NODE_TYPE_TEXT);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":193
 * 
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_TEXT:
 *         _ensure_text_contents(extract_nodes)             # <<<<<<<<<<<<<<
 *         node_char_data = <lxb_dom_character_data_t*>ctx.node
 *         element_text = string(<const char*>node_char_data.data.data, node_char_data.data.length)
 */
    __pyx_f_15resiliparse_dom_7extract_9html2text__ensure_text_contents(__pyx_v_extract_nodes);

    /* "resiliparse_dom/extract/html2text.pyx":194
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_TEXT:
 *         _ensure_text_contents(extract_nodes)
 *         node_char_data = <lxb_dom_character_data_t*>ctx.node             # <<<<<<<<<<<<<<
 *         element_text = string(<const char*>node_char_data.data.data, node_char_data.data.length)
 * 
 */
    __pyx_v_node_char_data = ((lxb_dom_character_data_t *)__pyx_v_ctx.node);

    /* "resiliparse_dom/extract/html2text.pyx":195
 *         _ensure_text_contents(extract_nodes)
 *         node_char_data = <lxb_dom_character_data_t*>ctx.node
 *         element_text = string(<const char*>node_char_data.data.data, node_char_data.data.length)             # <<<<<<<<<<<<<<
 * 
 *         if deref(current_node).tag_id == LXB_TAG_A and ctx.opts.preserve_formatting >= FormattingOpts.FORMAT_MINIMAL_HTML:
 */
    try {
      __pyx_t_9 = std::string(((char const *)__pyx_v_node_char_data->data.data), __pyx_v_node_char_data->data.length);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 195, __pyx_L1_error)
    }
    __pyx_v_element_text = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_9);

    /* "resiliparse_dom/extract/html2text.pyx":197
 *         element_text = string(<const char*>node_char_data.data.data, node_char_data.data.length)
 * 
 *         if deref(current_node).tag_id == LXB_TAG_A and ctx.opts.preserve_formatting >= FormattingOpts.FORMAT_MINIMAL_HTML:             # <<<<<<<<<<<<<<
 *             # Escape <a> inner text
 *             element_text = _escape_html(element_text.data(), element_text.size())
 */
    __pyx_t_2 = ((*__pyx_v_current_node).tag_id == LXB_TAG_A);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_ctx.opts.preserve_formatting >= FORMAT_MINIMAL_HTML);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L15_bool_binop_done:;
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":199
 *         if deref(current_node).tag_id == LXB_TAG_A and ctx.opts.preserve_formatting >= FormattingOpts.FORMAT_MINIMAL_HTML:
 *             # Escape <a> inner text
 *             element_text = _escape_html(element_text.data(), element_text.size())             # <<<<<<<<<<<<<<
 * 
 *         if not element_text.empty():
 */
      __pyx_v_element_text = __pyx_f_15resiliparse_dom_7extract_9html2text__escape_html(__pyx_v_element_text.data(), __pyx_v_element_text.size());

      /* "resiliparse_dom/extract/html2text.pyx":197
 *         element_text = string(<const char*>node_char_data.data.data, node_char_data.data.length)
 * 
 *         if deref(current_node).tag_id == LXB_TAG_A and ctx.opts.preserve_formatting >= FormattingOpts.FORMAT_MINIMAL_HTML:             # <<<<<<<<<<<<<<
 *             # Escape <a> inner text
 *             element_text = _escape_html(element_text.data(), element_text.size())
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":201
 *             element_text = _escape_html(element_text.data(), element_text.size())
 * 
 *         if not element_text.empty():             # <<<<<<<<<<<<<<
 *             deref(deref(current_node).text_contents).append(element_text)
 * 
 */
    __pyx_t_1 = (!__pyx_v_element_text.empty());
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":202
 * 
 *         if not element_text.empty():
 *             deref(deref(current_node).text_contents).append(element_text)             # <<<<<<<<<<<<<<
 * 
 *     elif ctx.node.type != LXB_DOM_NODE_TYPE_ELEMENT:
 */
      try {
        (*(*__pyx_v_current_node).text_contents).append(__pyx_v_element_text);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 202, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":201
 *             element_text = _escape_html(element_text.data(), element_text.size())
 * 
 *         if not element_text.empty():             # <<<<<<<<<<<<<<
 *             deref(deref(current_node).text_contents).append(element_text)
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":192
 *     cdef string_view element_text_sv
 * 
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *         _ensure_text_contents(extract_nodes)
 *         node_char_data = <lxb_dom_character_data_t*>ctx.node
 */
    goto __pyx_L13;
  }

  /* "resiliparse_dom/extract/html2text.pyx":204
 *             deref(deref(current_node).text_contents).append(element_text)
 * 
 *     elif ctx.node.type != LXB_DOM_NODE_TYPE_ELEMENT:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = (__pyx_v_ctx.node->type != LXB_DOM_NODE_TYPE_ELEMENT);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":205
 * 
 *     elif ctx.node.type != LXB_DOM_NODE_TYPE_ELEMENT:
 *         return             # <<<<<<<<<<<<<<
 * 
 *     elif ctx.node.local_name == LXB_TAG_BR and ctx.opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:
 */
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":204
 *             deref(deref(current_node).text_contents).append(element_text)
 * 
 *     elif ctx.node.type != LXB_DOM_NODE_TYPE_ELEMENT:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":207
 *         return
 * 
 *     elif ctx.node.local_name == LXB_TAG_BR and ctx.opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:             # <<<<<<<<<<<<<<
 *         _ensure_text_contents(extract_nodes)
 *         deref(current_node).collapse_margins = False
 */
  __pyx_t_2 = (__pyx_v_ctx.node->local_name == LXB_TAG_BR);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_ctx.opts.preserve_formatting == FORMAT_BASIC);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L18_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":208
 * 
 *     elif ctx.node.local_name == LXB_TAG_BR and ctx.opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:
 *         _ensure_text_contents(extract_nodes)             # <<<<<<<<<<<<<<
 *         deref(current_node).collapse_margins = False
 * 
 */
    __pyx_f_15resiliparse_dom_7extract_9html2text__ensure_text_contents(__pyx_v_extract_nodes);

    /* "resiliparse_dom/extract/html2text.pyx":209
 *     elif ctx.node.local_name == LXB_TAG_BR and ctx.opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:
 *         _ensure_text_contents(extract_nodes)
 *         deref(current_node).collapse_margins = False             # <<<<<<<<<<<<<<
 * 
 *     elif ctx.opts.links and ctx.node.local_name == LXB_TAG_A:
 */
    (*__pyx_v_current_node).collapse_margins = 0;

    /* "resiliparse_dom/extract/html2text.pyx":207
 *         return
 * 
 *     elif ctx.node.local_name == LXB_TAG_BR and ctx.opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:             # <<<<<<<<<<<<<<
 *         _ensure_text_contents(extract_nodes)
 *         deref(current_node).collapse_margins = False
 */
    goto __pyx_L13;
  }

  /* "resiliparse_dom/extract/html2text.pyx":211
 *         deref(current_node).collapse_margins = False
 * 
 *     elif ctx.opts.links and ctx.node.local_name == LXB_TAG_A:             # <<<<<<<<<<<<<<
 *         element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'href'))
 *         _ensure_text_contents(extract_nodes)
 */
  if (__pyx_v_ctx.opts.links) {
  } else {
    __pyx_t_1 = __pyx_v_ctx.opts.links;
    goto __pyx_L20_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_ctx.node->local_name == LXB_TAG_A);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L20_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":212
 * 
 *     elif ctx.opts.links and ctx.node.local_name == LXB_TAG_A:
 *         element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'href'))             # <<<<<<<<<<<<<<
 *         _ensure_text_contents(extract_nodes)
 *         deref(current_node).make_block = False
 */
    __pyx_v_element_text_sv = __pyx_f_18resiliparse_common_11string_util_strip_sv(__pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_ctx.node, __pyx_k_href));

    /* "resiliparse_dom/extract/html2text.pyx":213
 *     elif ctx.opts.links and ctx.node.local_name == LXB_TAG_A:
 *         element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'href'))
 *         _ensure_text_contents(extract_nodes)             # <<<<<<<<<<<<<<
 *         deref(current_node).make_block = False
 * 
 */
    __pyx_f_15resiliparse_dom_7extract_9html2text__ensure_text_contents(__pyx_v_extract_nodes);

    /* "resiliparse_dom/extract/html2text.pyx":214
 *         element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'href'))
 *         _ensure_text_contents(extract_nodes)
 *         deref(current_node).make_block = False             # <<<<<<<<<<<<<<
 * 
 *         if ctx.opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 */
    (*__pyx_v_current_node).make_block = 0;

    /* "resiliparse_dom/extract/html2text.pyx":216
 *         deref(current_node).make_block = False
 * 
 *         if ctx.opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:             # <<<<<<<<<<<<<<
 *             if not is_end_tag:
 *                 element_text.append(b'<a href="')
 */
    __pyx_t_1 = (__pyx_v_ctx.opts.preserve_formatting == FORMAT_MINIMAL_HTML);
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":217
 * 
 *         if ctx.opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 *             if not is_end_tag:             # <<<<<<<<<<<<<<
 *                 element_text.append(b'<a href="')
 *                 element_text.append(_escape_html(element_text_sv.data(), element_text_sv.size()))
 */
      __pyx_t_1 = (!__pyx_v_is_end_tag);
      if (__pyx_t_1) {

        /* "resiliparse_dom/extract/html2text.pyx":218
 *         if ctx.opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 *             if not is_end_tag:
 *                 element_text.append(b'<a href="')             # <<<<<<<<<<<<<<
 *                 element_text.append(_escape_html(element_text_sv.data(), element_text_sv.size()))
 *                 element_text.append(b'">')
 */
        try {
          __pyx_v_element_text.append(((char const *)"<a href=\""));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 218, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":219
 *             if not is_end_tag:
 *                 element_text.append(b'<a href="')
 *                 element_text.append(_escape_html(element_text_sv.data(), element_text_sv.size()))             # <<<<<<<<<<<<<<
 *                 element_text.append(b'">')
 *             else:
 */
        try {
          __pyx_v_element_text.append(__pyx_f_15resiliparse_dom_7extract_9html2text__escape_html(__pyx_v_element_text_sv.data(), __pyx_v_element_text_sv.size()));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 219, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":220
 *                 element_text.append(b'<a href="')
 *                 element_text.append(_escape_html(element_text_sv.data(), element_text_sv.size()))
 *                 element_text.append(b'">')             # <<<<<<<<<<<<<<
 *             else:
 *                 element_text.append(b'</a>')
 */
        try {
          __pyx_v_element_text.append(((char const *)"\">"));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 220, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":217
 * 
 *         if ctx.opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 *             if not is_end_tag:             # <<<<<<<<<<<<<<
 *                 element_text.append(b'<a href="')
 *                 element_text.append(_escape_html(element_text_sv.data(), element_text_sv.size()))
 */
        goto __pyx_L23;
      }

      /* "resiliparse_dom/extract/html2text.pyx":222
 *                 element_text.append(b'">')
 *             else:
 *                 element_text.append(b'</a>')             # <<<<<<<<<<<<<<
 *             deref(deref(current_node).text_contents).append(element_text)
 *             deref(current_node).escape_text_contents = False
 */
      /*else*/ {
        try {
          __pyx_v_element_text.append(((char const *)"</a>"));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 222, __pyx_L1_error)
        }
      }
      __pyx_L23:;

      /* "resiliparse_dom/extract/html2text.pyx":223
 *             else:
 *                 element_text.append(b'</a>')
 *             deref(deref(current_node).text_contents).append(element_text)             # <<<<<<<<<<<<<<
 *             deref(current_node).escape_text_contents = False
 * 
 */
      try {
        (*(*__pyx_v_current_node).text_contents).append(__pyx_v_element_text);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 223, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":224
 *                 element_text.append(b'</a>')
 *             deref(deref(current_node).text_contents).append(element_text)
 *             deref(current_node).escape_text_contents = False             # <<<<<<<<<<<<<<
 * 
 *         elif is_end_tag:
 */
      (*__pyx_v_current_node).escape_text_contents = 0;

      /* "resiliparse_dom/extract/html2text.pyx":216
 *         deref(current_node).make_block = False
 * 
 *         if ctx.opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:             # <<<<<<<<<<<<<<
 *             if not is_end_tag:
 *                 element_text.append(b'<a href="')
 */
      goto __pyx_L22;
    }

    /* "resiliparse_dom/extract/html2text.pyx":226
 *             deref(current_node).escape_text_contents = False
 * 
 *         elif is_end_tag:             # <<<<<<<<<<<<<<
 *             element_text.append(b' (')
 *             element_text.append(<string>element_text_sv)
 */
    if (__pyx_v_is_end_tag) {

      /* "resiliparse_dom/extract/html2text.pyx":227
 * 
 *         elif is_end_tag:
 *             element_text.append(b' (')             # <<<<<<<<<<<<<<
 *             element_text.append(<string>element_text_sv)
 *             element_text.push_back(b')')
 */
      try {
        __pyx_v_element_text.append(((char const *)" ("));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 227, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":228
 *         elif is_end_tag:
 *             element_text.append(b' (')
 *             element_text.append(<string>element_text_sv)             # <<<<<<<<<<<<<<
 *             element_text.push_back(b')')
 *             deref(deref(current_node).text_contents).append(element_text)
 */
      try {
        __pyx_v_element_text.append(((std::string)__pyx_v_element_text_sv));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 228, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":229
 *             element_text.append(b' (')
 *             element_text.append(<string>element_text_sv)
 *             element_text.push_back(b')')             # <<<<<<<<<<<<<<
 *             deref(deref(current_node).text_contents).append(element_text)
 * 
 */
      try {
        __pyx_v_element_text.push_back(')');
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 229, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":230
 *             element_text.append(<string>element_text_sv)
 *             element_text.push_back(b')')
 *             deref(deref(current_node).text_contents).append(element_text)             # <<<<<<<<<<<<<<
 * 
 *     elif ctx.opts.alt_texts and ctx.node.local_name in [LXB_TAG_IMG, LXB_TAG_AREA]:
 */
      try {
        (*(*__pyx_v_current_node).text_contents).append(__pyx_v_element_text);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 230, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":226
 *             deref(current_node).escape_text_contents = False
 * 
 *         elif is_end_tag:             # <<<<<<<<<<<<<<
 *             element_text.append(b' (')
 *             element_text.append(<string>element_text_sv)
 */
    }
    __pyx_L22:;

    /* "resiliparse_dom/extract/html2text.pyx":211
 *         deref(current_node).collapse_margins = False
 * 
 *     elif ctx.opts.links and ctx.node.local_name == LXB_TAG_A:             # <<<<<<<<<<<<<<
 *         element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'href'))
 *         _ensure_text_contents(extract_nodes)
 */
    goto __pyx_L13;
  }

  /* "resiliparse_dom/extract/html2text.pyx":232
 *             deref(deref(current_node).text_contents).append(element_text)
 * 
 *     elif ctx.opts.alt_texts and ctx.node.local_name in [LXB_TAG_IMG, LXB_TAG_AREA]:             # <<<<<<<<<<<<<<
 *         _ensure_text_contents(extract_nodes)
 *         element_text_sv = get_node_attr_sv(ctx.node, b'alt')
 */
  if (__pyx_v_ctx.opts.alt_texts) {
  } else {
    __pyx_t_1 = __pyx_v_ctx.opts.alt_texts;
    goto __pyx_L24_bool_binop_done;
  }
  switch (__pyx_v_ctx.node->local_name) {
    case LXB_TAG_IMG:
    case LXB_TAG_AREA:
    __pyx_t_2 = 1;
    break;
    default:
    __pyx_t_2 = 0;
    break;
  }
  __pyx_t_10 = __pyx_t_2;
  __pyx_t_1 = __pyx_t_10;
  __pyx_L24_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":233
 * 
 *     elif ctx.opts.alt_texts and ctx.node.local_name in [LXB_TAG_IMG, LXB_TAG_AREA]:
 *         _ensure_text_contents(extract_nodes)             # <<<<<<<<<<<<<<
 *         element_text_sv = get_node_attr_sv(ctx.node, b'alt')
 *         if not element_text_sv.empty():
 */
    __pyx_f_15resiliparse_dom_7extract_9html2text__ensure_text_contents(__pyx_v_extract_nodes);

    /* "resiliparse_dom/extract/html2text.pyx":234
 *     elif ctx.opts.alt_texts and ctx.node.local_name in [LXB_TAG_IMG, LXB_TAG_AREA]:
 *         _ensure_text_contents(extract_nodes)
 *         element_text_sv = get_node_attr_sv(ctx.node, b'alt')             # <<<<<<<<<<<<<<
 *         if not element_text_sv.empty():
 *             deref(deref(current_node).text_contents).append(<string>element_text_sv)
 */
    __pyx_v_element_text_sv = __pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_ctx.node, __pyx_k_alt);

    /* "resiliparse_dom/extract/html2text.pyx":235
 *         _ensure_text_contents(extract_nodes)
 *         element_text_sv = get_node_attr_sv(ctx.node, b'alt')
 *         if not element_text_sv.empty():             # <<<<<<<<<<<<<<
 *             deref(deref(current_node).text_contents).append(<string>element_text_sv)
 * 
 */
    __pyx_t_1 = (!__pyx_v_element_text_sv.empty());
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":236
 *         element_text_sv = get_node_attr_sv(ctx.node, b'alt')
 *         if not element_text_sv.empty():
 *             deref(deref(current_node).text_contents).append(<string>element_text_sv)             # <<<<<<<<<<<<<<
 * 
 *     elif ctx.opts.form_fields and ctx.node.local_name in [LXB_TAG_TEXTAREA, LXB_TAG_BUTTON]:
 */
      try {
        (*(*__pyx_v_current_node).text_contents).append(((std::string)__pyx_v_element_text_sv));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 236, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":235
 *         _ensure_text_contents(extract_nodes)
 *         element_text_sv = get_node_attr_sv(ctx.node, b'alt')
 *         if not element_text_sv.empty():             # <<<<<<<<<<<<<<
 *             deref(deref(current_node).text_contents).append(<string>element_text_sv)
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":232
 *             deref(deref(current_node).text_contents).append(element_text)
 * 
 *     elif ctx.opts.alt_texts and ctx.node.local_name in [LXB_TAG_IMG, LXB_TAG_AREA]:             # <<<<<<<<<<<<<<
 *         _ensure_text_contents(extract_nodes)
 *         element_text_sv = get_node_attr_sv(ctx.node, b'alt')
 */
    goto __pyx_L13;
  }

  /* "resiliparse_dom/extract/html2text.pyx":238
 *             deref(deref(current_node).text_contents).append(<string>element_text_sv)
 * 
 *     elif ctx.opts.form_fields and ctx.node.local_name in [LXB_TAG_TEXTAREA, LXB_TAG_BUTTON]:             # <<<<<<<<<<<<<<
 *         if not is_end_tag:
 *             element_text.append(b'[ ')
 */
  if (__pyx_v_ctx.opts.form_fields) {
  } else {
    __pyx_t_1 = __pyx_v_ctx.opts.form_fields;
    goto __pyx_L27_bool_binop_done;
  }
  switch (__pyx_v_ctx.node->local_name) {
    case LXB_TAG_TEXTAREA:
    case LXB_TAG_BUTTON:
    __pyx_t_10 = 1;
    break;
    default:
    __pyx_t_10 = 0;
    break;
  }
  __pyx_t_2 = __pyx_t_10;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L27_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":239
 * 
 *     elif ctx.opts.form_fields and ctx.node.local_name in [LXB_TAG_TEXTAREA, LXB_TAG_BUTTON]:
 *         if not is_end_tag:             # <<<<<<<<<<<<<<
 *             element_text.append(b'[ ')
 *         else:
 */
    __pyx_t_1 = (!__pyx_v_is_end_tag);
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":240
 *     elif ctx.opts.form_fields and ctx.node.local_name in [LXB_TAG_TEXTAREA, LXB_TAG_BUTTON]:
 *         if not is_end_tag:
 *             element_text.append(b'[ ')             # <<<<<<<<<<<<<<
 *         else:
 *             element_text.append(b' ] ')
 */
      try {
        __pyx_v_element_text.append(((char const *)"[ "));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 240, __pyx_L1_error)
      }

      /* "resiliparse_dom/extract/html2text.pyx":239
 * 
 *     elif ctx.opts.form_fields and ctx.node.local_name in [LXB_TAG_TEXTAREA, LXB_TAG_BUTTON]:
 *         if not is_end_tag:             # <<<<<<<<<<<<<<
 *             element_text.append(b'[ ')
 *         else:
 */
      goto __pyx_L29;
    }

    /* "resiliparse_dom/extract/html2text.pyx":242
 *             element_text.append(b'[ ')
 *         else:
 *             element_text.append(b' ] ')             # <<<<<<<<<<<<<<
 *         _ensure_text_contents(extract_nodes)
 *         deref(deref(current_node).text_contents).append(element_text)
 */
    /*else*/ {
      try {
        __pyx_v_element_text.append(((char const *)" ] "));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 242, __pyx_L1_error)
      }
    }
    __pyx_L29:;

    /* "resiliparse_dom/extract/html2text.pyx":243
 *         else:
 *             element_text.append(b' ] ')
 *         _ensure_text_contents(extract_nodes)             # <<<<<<<<<<<<<<
 *         deref(deref(current_node).text_contents).append(element_text)
 * 
 */
    __pyx_f_15resiliparse_dom_7extract_9html2text__ensure_text_contents(__pyx_v_extract_nodes);

    /* "resiliparse_dom/extract/html2text.pyx":244
 *             element_text.append(b' ] ')
 *         _ensure_text_contents(extract_nodes)
 *         deref(deref(current_node).text_contents).append(element_text)             # <<<<<<<<<<<<<<
 * 
 *     elif ctx.opts.form_fields and ctx.node.local_name == LXB_TAG_INPUT:
 */
    try {
      (*(*__pyx_v_current_node).text_contents).append(__pyx_v_element_text);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 244, __pyx_L1_error)
    }

    /* "resiliparse_dom/extract/html2text.pyx":238
 *             deref(deref(current_node).text_contents).append(<string>element_text_sv)
 * 
 *     elif ctx.opts.form_fields and ctx.node.local_name in [LXB_TAG_TEXTAREA, LXB_TAG_BUTTON]:             # <<<<<<<<<<<<<<
 *         if not is_end_tag:
 *             element_text.append(b'[ ')
 */
    goto __pyx_L13;
  }

  /* "resiliparse_dom/extract/html2text.pyx":246
 *         deref(deref(current_node).text_contents).append(element_text)
 * 
 *     elif ctx.opts.form_fields and ctx.node.local_name == LXB_TAG_INPUT:             # <<<<<<<<<<<<<<
 *         element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'type'))
 *         if element_text_sv.empty() or element_text_sv not in \
 */
  if (__pyx_v_ctx.opts.form_fields) {
  } else {
    __pyx_t_1 = __pyx_v_ctx.opts.form_fields;
    goto __pyx_L30_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_ctx.node->local_name == LXB_TAG_INPUT);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L30_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":247
 * 
 *     elif ctx.opts.form_fields and ctx.node.local_name == LXB_TAG_INPUT:
 *         element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'type'))             # <<<<<<<<<<<<<<
 *         if element_text_sv.empty() or element_text_sv not in \
 *                 [b'checkbox', b'color', b'file', b'hidden', b'radio', b'reset']:
 */
    __pyx_v_element_text_sv = __pyx_f_18resiliparse_common_11string_util_strip_sv(__pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_ctx.node, __pyx_k_type));

    /* "resiliparse_dom/extract/html2text.pyx":248
 *     elif ctx.opts.form_fields and ctx.node.local_name == LXB_TAG_INPUT:
 *         element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'type'))
 *         if element_text_sv.empty() or element_text_sv not in \             # <<<<<<<<<<<<<<
 *                 [b'checkbox', b'color', b'file', b'hidden', b'radio', b'reset']:
 *             element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'value'))
 */
    __pyx_t_2 = __pyx_v_element_text_sv.empty();
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L33_bool_binop_done;
    }
    __pyx_t_11 = __pyx_v_element_text_sv;
    __pyx_t_10 = (__pyx_t_11 != ((char const *)"checkbox"));
    if (__pyx_t_10) {
    } else {
      __pyx_t_2 = __pyx_t_10;
      goto __pyx_L35_bool_binop_done;
    }
    __pyx_t_10 = (__pyx_t_11 != ((char const *)"color"));
    if (__pyx_t_10) {
    } else {
      __pyx_t_2 = __pyx_t_10;
      goto __pyx_L35_bool_binop_done;
    }
    __pyx_t_10 = (__pyx_t_11 != ((char const *)"file"));
    if (__pyx_t_10) {
    } else {
      __pyx_t_2 = __pyx_t_10;
      goto __pyx_L35_bool_binop_done;
    }
    __pyx_t_10 = (__pyx_t_11 != ((char const *)"hidden"));
    if (__pyx_t_10) {
    } else {
      __pyx_t_2 = __pyx_t_10;
      goto __pyx_L35_bool_binop_done;
    }
    __pyx_t_10 = (__pyx_t_11 != ((char const *)"radio"));
    if (__pyx_t_10) {
    } else {
      __pyx_t_2 = __pyx_t_10;
      goto __pyx_L35_bool_binop_done;
    }
    __pyx_t_10 = (__pyx_t_11 != ((char const *)"reset"));
    __pyx_t_2 = __pyx_t_10;
    __pyx_L35_bool_binop_done:;
    __pyx_t_10 = __pyx_t_2;
    __pyx_t_1 = __pyx_t_10;
    __pyx_L33_bool_binop_done:;
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":250
 *         if element_text_sv.empty() or element_text_sv not in \
 *                 [b'checkbox', b'color', b'file', b'hidden', b'radio', b'reset']:
 *             element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'value'))             # <<<<<<<<<<<<<<
 *             if element_text_sv.empty():
 *                 element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'placeholder'))
 */
      __pyx_v_element_text_sv = __pyx_f_18resiliparse_common_11string_util_strip_sv(__pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_ctx.node, __pyx_k_value));

      /* "resiliparse_dom/extract/html2text.pyx":251
 *                 [b'checkbox', b'color', b'file', b'hidden', b'radio', b'reset']:
 *             element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'value'))
 *             if element_text_sv.empty():             # <<<<<<<<<<<<<<
 *                 element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'placeholder'))
 *             if not element_text_sv.empty():
 */
      __pyx_t_1 = __pyx_v_element_text_sv.empty();
      if (__pyx_t_1) {

        /* "resiliparse_dom/extract/html2text.pyx":252
 *             element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'value'))
 *             if element_text_sv.empty():
 *                 element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'placeholder'))             # <<<<<<<<<<<<<<
 *             if not element_text_sv.empty():
 *                 _ensure_text_contents(extract_nodes)
 */
        __pyx_v_element_text_sv = __pyx_f_18resiliparse_common_11string_util_strip_sv(__pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_ctx.node, __pyx_k_placeholder));

        /* "resiliparse_dom/extract/html2text.pyx":251
 *                 [b'checkbox', b'color', b'file', b'hidden', b'radio', b'reset']:
 *             element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'value'))
 *             if element_text_sv.empty():             # <<<<<<<<<<<<<<
 *                 element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'placeholder'))
 *             if not element_text_sv.empty():
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":253
 *             if element_text_sv.empty():
 *                 element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'placeholder'))
 *             if not element_text_sv.empty():             # <<<<<<<<<<<<<<
 *                 _ensure_text_contents(extract_nodes)
 *                 element_text.append(b'[ ')
 */
      __pyx_t_1 = (!__pyx_v_element_text_sv.empty());
      if (__pyx_t_1) {

        /* "resiliparse_dom/extract/html2text.pyx":254
 *                 element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'placeholder'))
 *             if not element_text_sv.empty():
 *                 _ensure_text_contents(extract_nodes)             # <<<<<<<<<<<<<<
 *                 element_text.append(b'[ ')
 *                 element_text.append(<string> element_text_sv)
 */
        __pyx_f_15resiliparse_dom_7extract_9html2text__ensure_text_contents(__pyx_v_extract_nodes);

        /* "resiliparse_dom/extract/html2text.pyx":255
 *             if not element_text_sv.empty():
 *                 _ensure_text_contents(extract_nodes)
 *                 element_text.append(b'[ ')             # <<<<<<<<<<<<<<
 *                 element_text.append(<string> element_text_sv)
 *                 element_text.append(b' ] ')
 */
        try {
          __pyx_v_element_text.append(((char const *)"[ "));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 255, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":256
 *                 _ensure_text_contents(extract_nodes)
 *                 element_text.append(b'[ ')
 *                 element_text.append(<string> element_text_sv)             # <<<<<<<<<<<<<<
 *                 element_text.append(b' ] ')
 *                 _ensure_text_contents(extract_nodes)
 */
        try {
          __pyx_v_element_text.append(((std::string)__pyx_v_element_text_sv));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 256, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":257
 *                 element_text.append(b'[ ')
 *                 element_text.append(<string> element_text_sv)
 *                 element_text.append(b' ] ')             # <<<<<<<<<<<<<<
 *                 _ensure_text_contents(extract_nodes)
 *                 deref(deref(current_node).text_contents).append(element_text)
 */
        try {
          __pyx_v_element_text.append(((char const *)" ] "));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 257, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":258
 *                 element_text.append(<string> element_text_sv)
 *                 element_text.append(b' ] ')
 *                 _ensure_text_contents(extract_nodes)             # <<<<<<<<<<<<<<
 *                 deref(deref(current_node).text_contents).append(element_text)
 * 
 */
        __pyx_f_15resiliparse_dom_7extract_9html2text__ensure_text_contents(__pyx_v_extract_nodes);

        /* "resiliparse_dom/extract/html2text.pyx":259
 *                 element_text.append(b' ] ')
 *                 _ensure_text_contents(extract_nodes)
 *                 deref(deref(current_node).text_contents).append(element_text)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        try {
          (*(*__pyx_v_current_node).text_contents).append(__pyx_v_element_text);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 259, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":253
 *             if element_text_sv.empty():
 *                 element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'placeholder'))
 *             if not element_text_sv.empty():             # <<<<<<<<<<<<<<
 *                 _ensure_text_contents(extract_nodes)
 *                 element_text.append(b'[ ')
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":248
 *     elif ctx.opts.form_fields and ctx.node.local_name == LXB_TAG_INPUT:
 *         element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'type'))
 *         if element_text_sv.empty() or element_text_sv not in \             # <<<<<<<<<<<<<<
 *                 [b'checkbox', b'color', b'file', b'hidden', b'radio', b'reset']:
 *             element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'value'))
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":246
 *         deref(deref(current_node).text_contents).append(element_text)
 * 
 *     elif ctx.opts.form_fields and ctx.node.local_name == LXB_TAG_INPUT:             # <<<<<<<<<<<<<<
 *         element_text_sv = strip_sv(get_node_attr_sv(ctx.node, b'type'))
 *         if element_text_sv.empty() or element_text_sv not in \
 */
  }
  __pyx_L13:;

  /* "resiliparse_dom/extract/html2text.pyx":162
 * 
 * 
 * cdef void _extract_cb(vector[shared_ptr[ExtractNode]]& extract_nodes, ExtractContext& ctx, bint is_end_tag) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ExtractNode] current_node
 *     cdef shared_ptr[ExtractNode] last_node
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._extract_cb", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
}

/* "resiliparse_dom/extract/html2text.pyx":262
 * 
 * 
 * cdef inline void _make_indent(string& output, size_t list_depth, const ExtractNode* current_node, const ExtractOpts& opts) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if not list_depth:
 *         return
 */

static CYTHON_INLINE void __pyx_f_15resiliparse_dom_7extract_9html2text__make_indent(std::string &__pyx_v_output, size_t __pyx_v_list_depth, CYTHON_UNUSED struct ExtractNode const *__pyx_v_current_node, struct ExtractOpts const &__pyx_v_opts) {
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":263
 * 
 * cdef inline void _make_indent(string& output, size_t list_depth, const ExtractNode* current_node, const ExtractOpts& opts) noexcept nogil:
 *     if not list_depth:             # <<<<<<<<<<<<<<
 *         return
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 */
  __pyx_t_1 = (!(__pyx_v_list_depth != 0));
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":264
 * cdef inline void _make_indent(string& output, size_t list_depth, const ExtractNode* current_node, const ExtractOpts& opts) noexcept nogil:
 *     if not list_depth:
 *         return             # <<<<<<<<<<<<<<
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 *         output = rstrip_str(move(output))
 */
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":263
 * 
 * cdef inline void _make_indent(string& output, size_t list_depth, const ExtractNode* current_node, const ExtractOpts& opts) noexcept nogil:
 *     if not list_depth:             # <<<<<<<<<<<<<<
 *         return
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":265
 *     if not list_depth:
 *         return
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF:             # <<<<<<<<<<<<<<
 *         output = rstrip_str(move(output))
 *     output.append(list_depth * 2u, <char>b' ')
 */
  __pyx_t_1 = (__pyx_v_opts.preserve_formatting == FORMAT_OFF);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":266
 *         return
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 *         output = rstrip_str(move(output))             # <<<<<<<<<<<<<<
 *     output.append(list_depth * 2u, <char>b' ')
 * 
 */
    __pyx_v_output = rstrip_str(stdx::move<std::string &>(__pyx_v_output));

    /* "resiliparse_dom/extract/html2text.pyx":265
 *     if not list_depth:
 *         return
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF:             # <<<<<<<<<<<<<<
 *         output = rstrip_str(move(output))
 *     output.append(list_depth * 2u, <char>b' ')
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":267
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 *         output = rstrip_str(move(output))
 *     output.append(list_depth * 2u, <char>b' ')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_output.append((__pyx_v_list_depth * 2U), ((char)' '));
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 267, __pyx_L1_error)
  }

  /* "resiliparse_dom/extract/html2text.pyx":262
 * 
 * 
 * cdef inline void _make_indent(string& output, size_t list_depth, const ExtractNode* current_node, const ExtractOpts& opts) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if not list_depth:
 *         return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._make_indent", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
}

/* "resiliparse_dom/extract/html2text.pyx":270
 * 
 * 
 * cdef inline void _make_margin(string& output, size_t& margin_size, const ExtractNode* current_node, const ExtractOpts& opts) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if not margin_size:
 *         return
 */

static CYTHON_INLINE void __pyx_f_15resiliparse_dom_7extract_9html2text__make_margin(std::string &__pyx_v_output, size_t &__pyx_v_margin_size, struct ExtractNode const *__pyx_v_current_node, struct ExtractOpts const &__pyx_v_opts) {
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":271
 * 
 * cdef inline void _make_margin(string& output, size_t& margin_size, const ExtractNode* current_node, const ExtractOpts& opts) noexcept nogil:
 *     if not margin_size:             # <<<<<<<<<<<<<<
 *         return
 *     if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 */
  __pyx_t_1 = (!(__pyx_v_margin_size != 0));
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":272
 * cdef inline void _make_margin(string& output, size_t& margin_size, const ExtractNode* current_node, const ExtractOpts& opts) noexcept nogil:
 *     if not margin_size:
 *         return             # <<<<<<<<<<<<<<
 *     if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 *         output = rstrip_str(move(output))
 */
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":271
 * 
 * cdef inline void _make_margin(string& output, size_t& margin_size, const ExtractNode* current_node, const ExtractOpts& opts) noexcept nogil:
 *     if not margin_size:             # <<<<<<<<<<<<<<
 *         return
 *     if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":273
 *     if not margin_size:
 *         return
 *     if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:             # <<<<<<<<<<<<<<
 *         output = rstrip_str(move(output))
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF and not output.empty():
 */
  __pyx_t_2 = (!(__pyx_v_current_node->pre_depth != 0));
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_opts.preserve_formatting == FORMAT_OFF);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":274
 *         return
 *     if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 *         output = rstrip_str(move(output))             # <<<<<<<<<<<<<<
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF and not output.empty():
 *         output.push_back(<char>b' ')
 */
    __pyx_v_output = rstrip_str(stdx::move<std::string &>(__pyx_v_output));

    /* "resiliparse_dom/extract/html2text.pyx":273
 *     if not margin_size:
 *         return
 *     if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:             # <<<<<<<<<<<<<<
 *         output = rstrip_str(move(output))
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF and not output.empty():
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":275
 *     if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 *         output = rstrip_str(move(output))
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF and not output.empty():             # <<<<<<<<<<<<<<
 *         output.push_back(<char>b' ')
 *     elif opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and not output.empty():
 */
  __pyx_t_2 = (__pyx_v_opts.preserve_formatting == FORMAT_OFF);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = (!__pyx_v_output.empty());
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":276
 *         output = rstrip_str(move(output))
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF and not output.empty():
 *         output.push_back(<char>b' ')             # <<<<<<<<<<<<<<
 *     elif opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and not output.empty():
 *         output.append(margin_size, <char>b'\n')
 */
    try {
      __pyx_v_output.push_back(((char)' '));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 276, __pyx_L1_error)
    }

    /* "resiliparse_dom/extract/html2text.pyx":275
 *     if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 *         output = rstrip_str(move(output))
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF and not output.empty():             # <<<<<<<<<<<<<<
 *         output.push_back(<char>b' ')
 *     elif opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and not output.empty():
 */
    goto __pyx_L7;
  }

  /* "resiliparse_dom/extract/html2text.pyx":277
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF and not output.empty():
 *         output.push_back(<char>b' ')
 *     elif opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and not output.empty():             # <<<<<<<<<<<<<<
 *         output.append(margin_size, <char>b'\n')
 *     margin_size = 0
 */
  __pyx_t_2 = (__pyx_v_opts.preserve_formatting >= FORMAT_BASIC);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_2 = (!__pyx_v_output.empty());
  __pyx_t_1 = __pyx_t_2;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":278
 *         output.push_back(<char>b' ')
 *     elif opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and not output.empty():
 *         output.append(margin_size, <char>b'\n')             # <<<<<<<<<<<<<<
 *     margin_size = 0
 * 
 */
    try {
      __pyx_v_output.append(__pyx_v_margin_size, ((char)'\n'));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 278, __pyx_L1_error)
    }

    /* "resiliparse_dom/extract/html2text.pyx":277
 *     if opts.preserve_formatting == FormattingOpts.FORMAT_OFF and not output.empty():
 *         output.push_back(<char>b' ')
 *     elif opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and not output.empty():             # <<<<<<<<<<<<<<
 *         output.append(margin_size, <char>b'\n')
 *     margin_size = 0
 */
  }
  __pyx_L7:;

  /* "resiliparse_dom/extract/html2text.pyx":279
 *     elif opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and not output.empty():
 *         output.append(margin_size, <char>b'\n')
 *     margin_size = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_margin_size = 0;

  /* "resiliparse_dom/extract/html2text.pyx":270
 * 
 * 
 * cdef inline void _make_margin(string& output, size_t& margin_size, const ExtractNode* current_node, const ExtractOpts& opts) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if not margin_size:
 *         return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._make_margin", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
}

/* "resiliparse_dom/extract/html2text.pyx":282
 * 
 * 
 * cdef string _serialize_extract_nodes(vector[shared_ptr[ExtractNode]]& extract_nodes,             # <<<<<<<<<<<<<<
 *                                      const ExtractOpts& opts, size_t reserve_size) noexcept nogil:
 *     cdef size_t i
 */

static std::string __pyx_f_15resiliparse_dom_7extract_9html2text__serialize_extract_nodes(std::vector<std::shared_ptr<struct ExtractNode> >  &__pyx_v_extract_nodes, struct ExtractOpts const &__pyx_v_opts, size_t __pyx_v_reserve_size) {
  size_t __pyx_v_i;
  std::string __pyx_v_output;
  std::string __pyx_v_element_text;
  std::string __pyx_v_element_text_prefix;
  struct ExtractNode *__pyx_v_current_node;
  int __pyx_v_bullet_inserted;
  size_t __pyx_v_list_depth;
  size_t __pyx_v_margin_size;
  size_t __pyx_v_uncollapsed_margin_count;
  std::vector<size_t>  __pyx_v_list_numbering;
  CYTHON_UNUSED std::string __pyx_v_list_item_indent;
  char const *__pyx_v_element_name;
  size_t __pyx_v_element_name_len;
  std::string __pyx_r;
  std::vector<std::shared_ptr<struct ExtractNode> > ::size_type __pyx_t_1;
  std::vector<std::shared_ptr<struct ExtractNode> > ::size_type __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  std::string __pyx_t_7;
  std::string __pyx_t_8;
  char const *__pyx_t_9;
  size_t __pyx_t_10;
  size_t __pyx_t_11;
  size_t __pyx_t_12;
  unsigned long __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":288
 *     cdef string element_text
 *     cdef string element_text_prefix
 *     cdef ExtractNode* current_node = NULL             # <<<<<<<<<<<<<<
 *     cdef bint bullet_inserted = False
 *     cdef size_t list_depth = 0
 */
  __pyx_v_current_node = NULL;

  /* "resiliparse_dom/extract/html2text.pyx":289
 *     cdef string element_text_prefix
 *     cdef ExtractNode* current_node = NULL
 *     cdef bint bullet_inserted = False             # <<<<<<<<<<<<<<
 *     cdef size_t list_depth = 0
 *     cdef size_t margin_size = 0
 */
  __pyx_v_bullet_inserted = 0;

  /* "resiliparse_dom/extract/html2text.pyx":290
 *     cdef ExtractNode* current_node = NULL
 *     cdef bint bullet_inserted = False
 *     cdef size_t list_depth = 0             # <<<<<<<<<<<<<<
 *     cdef size_t margin_size = 0
 *     cdef size_t uncollapsed_margin_count = 0
 */
  __pyx_v_list_depth = 0;

  /* "resiliparse_dom/extract/html2text.pyx":291
 *     cdef bint bullet_inserted = False
 *     cdef size_t list_depth = 0
 *     cdef size_t margin_size = 0             # <<<<<<<<<<<<<<
 *     cdef size_t uncollapsed_margin_count = 0
 *     cdef vector[size_t] list_numbering
 */
  __pyx_v_margin_size = 0;

  /* "resiliparse_dom/extract/html2text.pyx":292
 *     cdef size_t list_depth = 0
 *     cdef size_t margin_size = 0
 *     cdef size_t uncollapsed_margin_count = 0             # <<<<<<<<<<<<<<
 *     cdef vector[size_t] list_numbering
 *     cdef string list_item_indent = <const char*>b' '
 */
  __pyx_v_uncollapsed_margin_count = 0;

  /* "resiliparse_dom/extract/html2text.pyx":294
 *     cdef size_t uncollapsed_margin_count = 0
 *     cdef vector[size_t] list_numbering
 *     cdef string list_item_indent = <const char*>b' '             # <<<<<<<<<<<<<<
 *     cdef const char* element_name = NULL
 *     cdef size_t element_name_len = 0
 */
  __pyx_v_list_item_indent = ((char const *)((char const *)" "));

  /* "resiliparse_dom/extract/html2text.pyx":295
 *     cdef vector[size_t] list_numbering
 *     cdef string list_item_indent = <const char*>b' '
 *     cdef const char* element_name = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t element_name_len = 0
 * 
 */
  __pyx_v_element_name = NULL;

  /* "resiliparse_dom/extract/html2text.pyx":296
 *     cdef string list_item_indent = <const char*>b' '
 *     cdef const char* element_name = NULL
 *     cdef size_t element_name_len = 0             # <<<<<<<<<<<<<<
 * 
 *     output.reserve(reserve_size)
 */
  __pyx_v_element_name_len = 0;

  /* "resiliparse_dom/extract/html2text.pyx":298
 *     cdef size_t element_name_len = 0
 * 
 *     output.reserve(reserve_size)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(extract_nodes.size()):
 */
  try {
    __pyx_v_output.reserve(__pyx_v_reserve_size);
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 298, __pyx_L1_error)
  }

  /* "resiliparse_dom/extract/html2text.pyx":300
 *     output.reserve(reserve_size)
 * 
 *     for i in range(extract_nodes.size()):             # <<<<<<<<<<<<<<
 *         current_node = extract_nodes[i].get()
 * 
 */
  __pyx_t_1 = __pyx_v_extract_nodes.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "resiliparse_dom/extract/html2text.pyx":301
 * 
 *     for i in range(extract_nodes.size()):
 *         current_node = extract_nodes[i].get()             # <<<<<<<<<<<<<<
 * 
 *         # Basic and minimal HTML formatting
 */
    __pyx_v_current_node = (__pyx_v_extract_nodes[__pyx_v_i]).get();

    /* "resiliparse_dom/extract/html2text.pyx":304
 * 
 *         # Basic and minimal HTML formatting
 *         if opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC:             # <<<<<<<<<<<<<<
 *             if current_node.make_block and not current_node.collapse_margins:
 *                 uncollapsed_margin_count += 1
 */
    __pyx_t_4 = (__pyx_v_opts.preserve_formatting >= FORMAT_BASIC);
    if (__pyx_t_4) {

      /* "resiliparse_dom/extract/html2text.pyx":305
 *         # Basic and minimal HTML formatting
 *         if opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC:
 *             if current_node.make_block and not current_node.collapse_margins:             # <<<<<<<<<<<<<<
 *                 uncollapsed_margin_count += 1
 * 
 */
      if (__pyx_v_current_node->make_block) {
      } else {
        __pyx_t_4 = __pyx_v_current_node->make_block;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_5 = (!__pyx_v_current_node->collapse_margins);
      __pyx_t_4 = __pyx_t_5;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_4) {

        /* "resiliparse_dom/extract/html2text.pyx":306
 *         if opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC:
 *             if current_node.make_block and not current_node.collapse_margins:
 *                 uncollapsed_margin_count += 1             # <<<<<<<<<<<<<<
 * 
 *             # List tags
 */
        __pyx_v_uncollapsed_margin_count = (__pyx_v_uncollapsed_margin_count + 1);

        /* "resiliparse_dom/extract/html2text.pyx":305
 *         # Basic and minimal HTML formatting
 *         if opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC:
 *             if current_node.make_block and not current_node.collapse_margins:             # <<<<<<<<<<<<<<
 *                 uncollapsed_margin_count += 1
 * 
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":309
 * 
 *             # List tags
 *             if (current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL]             # <<<<<<<<<<<<<<
 *                     or (current_node.tag_id == LXB_TAG_LI and list_depth == 0)):
 *                 if current_node.is_end_tag:
 */
      switch (__pyx_v_current_node->tag_id) {
        case LXB_TAG_UL:
        case LXB_TAG_OL:
        __pyx_t_5 = 1;
        break;
        default:
        __pyx_t_5 = 0;
        break;
      }
      __pyx_t_6 = __pyx_t_5;
      if (!__pyx_t_6) {
      } else {
        __pyx_t_4 = __pyx_t_6;
        goto __pyx_L10_bool_binop_done;
      }

      /* "resiliparse_dom/extract/html2text.pyx":310
 *             # List tags
 *             if (current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL]
 *                     or (current_node.tag_id == LXB_TAG_LI and list_depth == 0)):             # <<<<<<<<<<<<<<
 *                 if current_node.is_end_tag:
 *                     predec(list_depth)
 */
      __pyx_t_6 = (__pyx_v_current_node->tag_id == LXB_TAG_LI);
      if (__pyx_t_6) {
      } else {
        __pyx_t_4 = __pyx_t_6;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_6 = (__pyx_v_list_depth == 0);
      __pyx_t_4 = __pyx_t_6;
      __pyx_L10_bool_binop_done:;

      /* "resiliparse_dom/extract/html2text.pyx":309
 * 
 *             # List tags
 *             if (current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL]             # <<<<<<<<<<<<<<
 *                     or (current_node.tag_id == LXB_TAG_LI and list_depth == 0)):
 *                 if current_node.is_end_tag:
 */
      if (__pyx_t_4) {

        /* "resiliparse_dom/extract/html2text.pyx":311
 *             if (current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL]
 *                     or (current_node.tag_id == LXB_TAG_LI and list_depth == 0)):
 *                 if current_node.is_end_tag:             # <<<<<<<<<<<<<<
 *                     predec(list_depth)
 *                     list_numbering.pop_back()
 */
        if (__pyx_v_current_node->is_end_tag) {

          /* "resiliparse_dom/extract/html2text.pyx":312
 *                     or (current_node.tag_id == LXB_TAG_LI and list_depth == 0)):
 *                 if current_node.is_end_tag:
 *                     predec(list_depth)             # <<<<<<<<<<<<<<
 *                     list_numbering.pop_back()
 *                     bullet_inserted = False
 */
          (void)((--__pyx_v_list_depth));

          /* "resiliparse_dom/extract/html2text.pyx":313
 *                 if current_node.is_end_tag:
 *                     predec(list_depth)
 *                     list_numbering.pop_back()             # <<<<<<<<<<<<<<
 *                     bullet_inserted = False
 *                     element_text_prefix.clear()
 */
          __pyx_v_list_numbering.pop_back();

          /* "resiliparse_dom/extract/html2text.pyx":314
 *                     predec(list_depth)
 *                     list_numbering.pop_back()
 *                     bullet_inserted = False             # <<<<<<<<<<<<<<
 *                     element_text_prefix.clear()
 *                 else:
 */
          __pyx_v_bullet_inserted = 0;

          /* "resiliparse_dom/extract/html2text.pyx":315
 *                     list_numbering.pop_back()
 *                     bullet_inserted = False
 *                     element_text_prefix.clear()             # <<<<<<<<<<<<<<
 *                 else:
 *                     preinc(list_depth)
 */
          __pyx_v_element_text_prefix.clear();

          /* "resiliparse_dom/extract/html2text.pyx":311
 *             if (current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL]
 *                     or (current_node.tag_id == LXB_TAG_LI and list_depth == 0)):
 *                 if current_node.is_end_tag:             # <<<<<<<<<<<<<<
 *                     predec(list_depth)
 *                     list_numbering.pop_back()
 */
          goto __pyx_L13;
        }

        /* "resiliparse_dom/extract/html2text.pyx":317
 *                     element_text_prefix.clear()
 *                 else:
 *                     preinc(list_depth)             # <<<<<<<<<<<<<<
 *                     list_numbering.push_back(<size_t>(current_node.tag_id == LXB_TAG_OL))
 * 
 */
        /*else*/ {
          (void)((++__pyx_v_list_depth));

          /* "resiliparse_dom/extract/html2text.pyx":318
 *                 else:
 *                     preinc(list_depth)
 *                     list_numbering.push_back(<size_t>(current_node.tag_id == LXB_TAG_OL))             # <<<<<<<<<<<<<<
 * 
 *             # List item tags
 */
          try {
            __pyx_v_list_numbering.push_back(((size_t)(__pyx_v_current_node->tag_id == LXB_TAG_OL)));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 318, __pyx_L1_error)
          }
        }
        __pyx_L13:;

        /* "resiliparse_dom/extract/html2text.pyx":309
 * 
 *             # List tags
 *             if (current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL]             # <<<<<<<<<<<<<<
 *                     or (current_node.tag_id == LXB_TAG_LI and list_depth == 0)):
 *                 if current_node.is_end_tag:
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":321
 * 
 *             # List item tags
 *             if opts.list_bullets and current_node.tag_id == LXB_TAG_LI:             # <<<<<<<<<<<<<<
 *                 if opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:
 *                     if list_numbering.back() == 0:
 */
      __pyx_t_6 = (__pyx_v_opts.list_bullets != 0);
      if (__pyx_t_6) {
      } else {
        __pyx_t_4 = __pyx_t_6;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_6 = (__pyx_v_current_node->tag_id == LXB_TAG_LI);
      __pyx_t_4 = __pyx_t_6;
      __pyx_L15_bool_binop_done:;
      if (__pyx_t_4) {

        /* "resiliparse_dom/extract/html2text.pyx":322
 *             # List item tags
 *             if opts.list_bullets and current_node.tag_id == LXB_TAG_LI:
 *                 if opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:             # <<<<<<<<<<<<<<
 *                     if list_numbering.back() == 0:
 *                         element_text_prefix = LIST_BULLET + <const char*>b' '
 */
        __pyx_t_4 = (__pyx_v_opts.preserve_formatting == FORMAT_BASIC);
        if (__pyx_t_4) {

          /* "resiliparse_dom/extract/html2text.pyx":323
 *             if opts.list_bullets and current_node.tag_id == LXB_TAG_LI:
 *                 if opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:
 *                     if list_numbering.back() == 0:             # <<<<<<<<<<<<<<
 *                         element_text_prefix = LIST_BULLET + <const char*>b' '
 *                     else:
 */
          __pyx_t_4 = (__pyx_v_list_numbering.back() == 0);
          if (__pyx_t_4) {

            /* "resiliparse_dom/extract/html2text.pyx":324
 *                 if opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:
 *                     if list_numbering.back() == 0:
 *                         element_text_prefix = LIST_BULLET + <const char*>b' '             # <<<<<<<<<<<<<<
 *                     else:
 *                         element_text_prefix = to_string(list_numbering.back()) + <const char*>b'. '
 */
            try {
              __pyx_t_7 = (__pyx_v_15resiliparse_dom_7extract_9html2text_LIST_BULLET + ((char const *)((char const *)" ")));
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 324, __pyx_L1_error)
            }
            __pyx_v_element_text_prefix = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

            /* "resiliparse_dom/extract/html2text.pyx":323
 *             if opts.list_bullets and current_node.tag_id == LXB_TAG_LI:
 *                 if opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:
 *                     if list_numbering.back() == 0:             # <<<<<<<<<<<<<<
 *                         element_text_prefix = LIST_BULLET + <const char*>b' '
 *                     else:
 */
            goto __pyx_L18;
          }

          /* "resiliparse_dom/extract/html2text.pyx":326
 *                         element_text_prefix = LIST_BULLET + <const char*>b' '
 *                     else:
 *                         element_text_prefix = to_string(list_numbering.back()) + <const char*>b'. '             # <<<<<<<<<<<<<<
 *                         if not current_node.is_end_tag:
 *                             preinc(list_numbering.back())
 */
          /*else*/ {
            try {
              __pyx_t_7 = std::to_string(__pyx_v_list_numbering.back());
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 326, __pyx_L1_error)
            }
            try {
              __pyx_t_8 = (__pyx_t_7 + ((char const *)((char const *)". ")));
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 326, __pyx_L1_error)
            }
            __pyx_v_element_text_prefix = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);

            /* "resiliparse_dom/extract/html2text.pyx":327
 *                     else:
 *                         element_text_prefix = to_string(list_numbering.back()) + <const char*>b'. '
 *                         if not current_node.is_end_tag:             # <<<<<<<<<<<<<<
 *                             preinc(list_numbering.back())
 *                     bullet_inserted = not current_node.is_end_tag
 */
            __pyx_t_4 = (!__pyx_v_current_node->is_end_tag);
            if (__pyx_t_4) {

              /* "resiliparse_dom/extract/html2text.pyx":328
 *                         element_text_prefix = to_string(list_numbering.back()) + <const char*>b'. '
 *                         if not current_node.is_end_tag:
 *                             preinc(list_numbering.back())             # <<<<<<<<<<<<<<
 *                     bullet_inserted = not current_node.is_end_tag
 * 
 */
              (void)((++__pyx_v_list_numbering.back()));

              /* "resiliparse_dom/extract/html2text.pyx":327
 *                     else:
 *                         element_text_prefix = to_string(list_numbering.back()) + <const char*>b'. '
 *                         if not current_node.is_end_tag:             # <<<<<<<<<<<<<<
 *                             preinc(list_numbering.back())
 *                     bullet_inserted = not current_node.is_end_tag
 */
            }
          }
          __pyx_L18:;

          /* "resiliparse_dom/extract/html2text.pyx":329
 *                         if not current_node.is_end_tag:
 *                             preinc(list_numbering.back())
 *                     bullet_inserted = not current_node.is_end_tag             # <<<<<<<<<<<<<<
 * 
 *                 elif opts.list_bullets and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 */
          __pyx_v_bullet_inserted = (!__pyx_v_current_node->is_end_tag);

          /* "resiliparse_dom/extract/html2text.pyx":322
 *             # List item tags
 *             if opts.list_bullets and current_node.tag_id == LXB_TAG_LI:
 *                 if opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:             # <<<<<<<<<<<<<<
 *                     if list_numbering.back() == 0:
 *                         element_text_prefix = LIST_BULLET + <const char*>b' '
 */
          goto __pyx_L17;
        }

        /* "resiliparse_dom/extract/html2text.pyx":331
 *                     bullet_inserted = not current_node.is_end_tag
 * 
 *                 elif opts.list_bullets and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:             # <<<<<<<<<<<<<<
 *                     _make_margin(output, margin_size, current_node, opts)
 *                     if not current_node.is_end_tag:
 */
        __pyx_t_6 = (__pyx_v_opts.list_bullets != 0);
        if (__pyx_t_6) {
        } else {
          __pyx_t_4 = __pyx_t_6;
          goto __pyx_L20_bool_binop_done;
        }
        __pyx_t_6 = (__pyx_v_opts.preserve_formatting == FORMAT_MINIMAL_HTML);
        __pyx_t_4 = __pyx_t_6;
        __pyx_L20_bool_binop_done:;
        if (__pyx_t_4) {

          /* "resiliparse_dom/extract/html2text.pyx":332
 * 
 *                 elif opts.list_bullets and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 *                     _make_margin(output, margin_size, current_node, opts)             # <<<<<<<<<<<<<<
 *                     if not current_node.is_end_tag:
 *                         output.append(2 * list_depth, <char>b' ')
 */
          __pyx_f_15resiliparse_dom_7extract_9html2text__make_margin(__pyx_v_output, __pyx_v_margin_size, __pyx_v_current_node, __pyx_v_opts);

          /* "resiliparse_dom/extract/html2text.pyx":333
 *                 elif opts.list_bullets and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 *                     _make_margin(output, margin_size, current_node, opts)
 *                     if not current_node.is_end_tag:             # <<<<<<<<<<<<<<
 *                         output.append(2 * list_depth, <char>b' ')
 *                         output.append(b'<li>')
 */
          __pyx_t_4 = (!__pyx_v_current_node->is_end_tag);
          if (__pyx_t_4) {

            /* "resiliparse_dom/extract/html2text.pyx":334
 *                     _make_margin(output, margin_size, current_node, opts)
 *                     if not current_node.is_end_tag:
 *                         output.append(2 * list_depth, <char>b' ')             # <<<<<<<<<<<<<<
 *                         output.append(b'<li>')
 *                         margin_size = 0
 */
            try {
              __pyx_v_output.append((2 * __pyx_v_list_depth), ((char)' '));
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 334, __pyx_L1_error)
            }

            /* "resiliparse_dom/extract/html2text.pyx":335
 *                     if not current_node.is_end_tag:
 *                         output.append(2 * list_depth, <char>b' ')
 *                         output.append(b'<li>')             # <<<<<<<<<<<<<<
 *                         margin_size = 0
 *                         current_node.make_block = False
 */
            try {
              __pyx_v_output.append(((char const *)"<li>"));
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 335, __pyx_L1_error)
            }

            /* "resiliparse_dom/extract/html2text.pyx":336
 *                         output.append(2 * list_depth, <char>b' ')
 *                         output.append(b'<li>')
 *                         margin_size = 0             # <<<<<<<<<<<<<<
 *                         current_node.make_block = False
 *                     else:
 */
            __pyx_v_margin_size = 0;

            /* "resiliparse_dom/extract/html2text.pyx":337
 *                         output.append(b'<li>')
 *                         margin_size = 0
 *                         current_node.make_block = False             # <<<<<<<<<<<<<<
 *                     else:
 *                         if not current_node.pre_depth:
 */
            __pyx_v_current_node->make_block = 0;

            /* "resiliparse_dom/extract/html2text.pyx":333
 *                 elif opts.list_bullets and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 *                     _make_margin(output, margin_size, current_node, opts)
 *                     if not current_node.is_end_tag:             # <<<<<<<<<<<<<<
 *                         output.append(2 * list_depth, <char>b' ')
 *                         output.append(b'<li>')
 */
            goto __pyx_L22;
          }

          /* "resiliparse_dom/extract/html2text.pyx":339
 *                         current_node.make_block = False
 *                     else:
 *                         if not current_node.pre_depth:             # <<<<<<<<<<<<<<
 *                             output = rstrip_str(move(output))
 *                         output.append(b'</li>\n')
 */
          /*else*/ {
            __pyx_t_4 = (!(__pyx_v_current_node->pre_depth != 0));
            if (__pyx_t_4) {

              /* "resiliparse_dom/extract/html2text.pyx":340
 *                     else:
 *                         if not current_node.pre_depth:
 *                             output = rstrip_str(move(output))             # <<<<<<<<<<<<<<
 *                         output.append(b'</li>\n')
 * 
 */
              __pyx_v_output = rstrip_str(stdx::move<std::string>(__pyx_v_output));

              /* "resiliparse_dom/extract/html2text.pyx":339
 *                         current_node.make_block = False
 *                     else:
 *                         if not current_node.pre_depth:             # <<<<<<<<<<<<<<
 *                             output = rstrip_str(move(output))
 *                         output.append(b'</li>\n')
 */
            }

            /* "resiliparse_dom/extract/html2text.pyx":341
 *                         if not current_node.pre_depth:
 *                             output = rstrip_str(move(output))
 *                         output.append(b'</li>\n')             # <<<<<<<<<<<<<<
 * 
 *         # Minimal HTML formatting only
 */
            try {
              __pyx_v_output.append(((char const *)"</li>\n"));
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 341, __pyx_L1_error)
            }
          }
          __pyx_L22:;

          /* "resiliparse_dom/extract/html2text.pyx":331
 *                     bullet_inserted = not current_node.is_end_tag
 * 
 *                 elif opts.list_bullets and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:             # <<<<<<<<<<<<<<
 *                     _make_margin(output, margin_size, current_node, opts)
 *                     if not current_node.is_end_tag:
 */
        }
        __pyx_L17:;

        /* "resiliparse_dom/extract/html2text.pyx":321
 * 
 *             # List item tags
 *             if opts.list_bullets and current_node.tag_id == LXB_TAG_LI:             # <<<<<<<<<<<<<<
 *                 if opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:
 *                     if list_numbering.back() == 0:
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":304
 * 
 *         # Basic and minimal HTML formatting
 *         if opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC:             # <<<<<<<<<<<<<<
 *             if current_node.make_block and not current_node.collapse_margins:
 *                 uncollapsed_margin_count += 1
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":344
 * 
 *         # Minimal HTML formatting only
 *         if opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:             # <<<<<<<<<<<<<<
 *             # Add <pre> tags immediately with newlines and skip usual block logic for opening tags
 *             if current_node.tag_id == LXB_TAG_PRE and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 */
    __pyx_t_4 = (__pyx_v_opts.preserve_formatting == FORMAT_MINIMAL_HTML);
    if (__pyx_t_4) {

      /* "resiliparse_dom/extract/html2text.pyx":346
 *         if opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 *             # Add <pre> tags immediately with newlines and skip usual block logic for opening tags
 *             if current_node.tag_id == LXB_TAG_PRE and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:             # <<<<<<<<<<<<<<
 *                 if not current_node.is_end_tag:
 *                     _make_margin(output, margin_size, current_node, opts)
 */
      __pyx_t_6 = (__pyx_v_current_node->tag_id == LXB_TAG_PRE);
      if (__pyx_t_6) {
      } else {
        __pyx_t_4 = __pyx_t_6;
        goto __pyx_L26_bool_binop_done;
      }
      __pyx_t_6 = (__pyx_v_opts.preserve_formatting == FORMAT_MINIMAL_HTML);
      __pyx_t_4 = __pyx_t_6;
      __pyx_L26_bool_binop_done:;
      if (__pyx_t_4) {

        /* "resiliparse_dom/extract/html2text.pyx":347
 *             # Add <pre> tags immediately with newlines and skip usual block logic for opening tags
 *             if current_node.tag_id == LXB_TAG_PRE and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 *                 if not current_node.is_end_tag:             # <<<<<<<<<<<<<<
 *                     _make_margin(output, margin_size, current_node, opts)
 *                 output.append(b'</pre>' if current_node.is_end_tag else b'<pre>')
 */
        __pyx_t_4 = (!__pyx_v_current_node->is_end_tag);
        if (__pyx_t_4) {

          /* "resiliparse_dom/extract/html2text.pyx":348
 *             if current_node.tag_id == LXB_TAG_PRE and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 *                 if not current_node.is_end_tag:
 *                     _make_margin(output, margin_size, current_node, opts)             # <<<<<<<<<<<<<<
 *                 output.append(b'</pre>' if current_node.is_end_tag else b'<pre>')
 *                 margin_size = 0
 */
          __pyx_f_15resiliparse_dom_7extract_9html2text__make_margin(__pyx_v_output, __pyx_v_margin_size, __pyx_v_current_node, __pyx_v_opts);

          /* "resiliparse_dom/extract/html2text.pyx":347
 *             # Add <pre> tags immediately with newlines and skip usual block logic for opening tags
 *             if current_node.tag_id == LXB_TAG_PRE and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 *                 if not current_node.is_end_tag:             # <<<<<<<<<<<<<<
 *                     _make_margin(output, margin_size, current_node, opts)
 *                 output.append(b'</pre>' if current_node.is_end_tag else b'<pre>')
 */
        }

        /* "resiliparse_dom/extract/html2text.pyx":349
 *                 if not current_node.is_end_tag:
 *                     _make_margin(output, margin_size, current_node, opts)
 *                 output.append(b'</pre>' if current_node.is_end_tag else b'<pre>')             # <<<<<<<<<<<<<<
 *                 margin_size = 0
 * 
 */
        if (__pyx_v_current_node->is_end_tag) {
          __pyx_t_9 = ((char const *)"</pre>");
        } else {
          __pyx_t_9 = ((char const *)"<pre>");
        }
        try {
          __pyx_v_output.append(__pyx_t_9);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 349, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":350
 *                     _make_margin(output, margin_size, current_node, opts)
 *                 output.append(b'</pre>' if current_node.is_end_tag else b'<pre>')
 *                 margin_size = 0             # <<<<<<<<<<<<<<
 * 
 *             if current_node.pre_depth:
 */
        __pyx_v_margin_size = 0;

        /* "resiliparse_dom/extract/html2text.pyx":346
 *         if opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 *             # Add <pre> tags immediately with newlines and skip usual block logic for opening tags
 *             if current_node.tag_id == LXB_TAG_PRE and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:             # <<<<<<<<<<<<<<
 *                 if not current_node.is_end_tag:
 *                     _make_margin(output, margin_size, current_node, opts)
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":352
 *                 margin_size = 0
 * 
 *             if current_node.pre_depth:             # <<<<<<<<<<<<<<
 *                 current_node.make_block = False
 * 
 */
      __pyx_t_4 = (__pyx_v_current_node->pre_depth != 0);
      if (__pyx_t_4) {

        /* "resiliparse_dom/extract/html2text.pyx":353
 * 
 *             if current_node.pre_depth:
 *                 current_node.make_block = False             # <<<<<<<<<<<<<<
 * 
 *             # Explicit line breaks
 */
        __pyx_v_current_node->make_block = 0;

        /* "resiliparse_dom/extract/html2text.pyx":352
 *                 margin_size = 0
 * 
 *             if current_node.pre_depth:             # <<<<<<<<<<<<<<
 *                 current_node.make_block = False
 * 
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":356
 * 
 *             # Explicit line breaks
 *             if current_node.tag_id == LXB_TAG_BR:             # <<<<<<<<<<<<<<
 *                 output.append(b'<br>')
 * 
 */
      __pyx_t_4 = (__pyx_v_current_node->tag_id == LXB_TAG_BR);
      if (__pyx_t_4) {

        /* "resiliparse_dom/extract/html2text.pyx":357
 *             # Explicit line breaks
 *             if current_node.tag_id == LXB_TAG_BR:
 *                 output.append(b'<br>')             # <<<<<<<<<<<<<<
 * 
 *             # Add a select number of start/end tags if minimal HTML formatting is on.
 */
        try {
          __pyx_v_output.append(((char const *)"<br>"));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 357, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":356
 * 
 *             # Explicit line breaks
 *             if current_node.tag_id == LXB_TAG_BR:             # <<<<<<<<<<<<<<
 *                 output.append(b'<br>')
 * 
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":360
 * 
 *             # Add a select number of start/end tags if minimal HTML formatting is on.
 *             if opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML and (             # <<<<<<<<<<<<<<
 *                     current_node.tag_id in [LXB_TAG_H1, LXB_TAG_H2, LXB_TAG_H3, LXB_TAG_H4, LXB_TAG_H5, LXB_TAG_H6, LXB_TAG_P]
 *                     or (current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] and opts.list_bullets)):
 */
      __pyx_t_6 = (__pyx_v_opts.preserve_formatting == FORMAT_MINIMAL_HTML);
      if (__pyx_t_6) {
      } else {
        __pyx_t_4 = __pyx_t_6;
        goto __pyx_L32_bool_binop_done;
      }

      /* "resiliparse_dom/extract/html2text.pyx":361
 *             # Add a select number of start/end tags if minimal HTML formatting is on.
 *             if opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML and (
 *                     current_node.tag_id in [LXB_TAG_H1, LXB_TAG_H2, LXB_TAG_H3, LXB_TAG_H4, LXB_TAG_H5, LXB_TAG_H6, LXB_TAG_P]             # <<<<<<<<<<<<<<
 *                     or (current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] and opts.list_bullets)):
 * 
 */
      switch (__pyx_v_current_node->tag_id) {
        case LXB_TAG_H1:
        case LXB_TAG_H2:
        case LXB_TAG_H3:
        case LXB_TAG_H4:
        case LXB_TAG_H5:
        case LXB_TAG_H6:
        case LXB_TAG_P:
        __pyx_t_6 = 1;
        break;
        default:
        __pyx_t_6 = 0;
        break;
      }
      __pyx_t_5 = __pyx_t_6;
      if (!__pyx_t_5) {
      } else {
        __pyx_t_4 = __pyx_t_5;
        goto __pyx_L32_bool_binop_done;
      }

      /* "resiliparse_dom/extract/html2text.pyx":362
 *             if opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML and (
 *                     current_node.tag_id in [LXB_TAG_H1, LXB_TAG_H2, LXB_TAG_H3, LXB_TAG_H4, LXB_TAG_H5, LXB_TAG_H6, LXB_TAG_P]
 *                     or (current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] and opts.list_bullets)):             # <<<<<<<<<<<<<<
 * 
 *                 # Add margin before start tag and skip after
 */
      switch (__pyx_v_current_node->tag_id) {
        case LXB_TAG_UL:
        case LXB_TAG_OL:
        __pyx_t_5 = 1;
        break;
        default:
        __pyx_t_5 = 0;
        break;
      }
      __pyx_t_6 = __pyx_t_5;
      if (__pyx_t_6) {
      } else {
        __pyx_t_4 = __pyx_t_6;
        goto __pyx_L32_bool_binop_done;
      }
      __pyx_t_6 = (__pyx_v_opts.list_bullets != 0);
      __pyx_t_4 = __pyx_t_6;
      __pyx_L32_bool_binop_done:;

      /* "resiliparse_dom/extract/html2text.pyx":360
 * 
 *             # Add a select number of start/end tags if minimal HTML formatting is on.
 *             if opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML and (             # <<<<<<<<<<<<<<
 *                     current_node.tag_id in [LXB_TAG_H1, LXB_TAG_H2, LXB_TAG_H3, LXB_TAG_H4, LXB_TAG_H5, LXB_TAG_H6, LXB_TAG_P]
 *                     or (current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] and opts.list_bullets)):
 */
      if (__pyx_t_4) {

        /* "resiliparse_dom/extract/html2text.pyx":365
 * 
 *                 # Add margin before start tag and skip after
 *                 if (not current_node.is_end_tag and not current_node.pre_depth) or (             # <<<<<<<<<<<<<<
 *                         uncollapsed_margin_count and current_node.collapse_margins):
 *                     if current_node.collapse_margins:
 */
        __pyx_t_6 = (!__pyx_v_current_node->is_end_tag);
        if (!__pyx_t_6) {
          goto __pyx_L38_next_or;
        } else {
        }
        __pyx_t_6 = (!(__pyx_v_current_node->pre_depth != 0));
        if (!__pyx_t_6) {
        } else {
          __pyx_t_4 = __pyx_t_6;
          goto __pyx_L37_bool_binop_done;
        }
        __pyx_L38_next_or:;

        /* "resiliparse_dom/extract/html2text.pyx":366
 *                 # Add margin before start tag and skip after
 *                 if (not current_node.is_end_tag and not current_node.pre_depth) or (
 *                         uncollapsed_margin_count and current_node.collapse_margins):             # <<<<<<<<<<<<<<
 *                     if current_node.collapse_margins:
 *                         margin_size = max(margin_size, <size_t>(current_node.make_block + current_node.make_big_block))
 */
        __pyx_t_6 = (__pyx_v_uncollapsed_margin_count != 0);
        if (__pyx_t_6) {
        } else {
          __pyx_t_4 = __pyx_t_6;
          goto __pyx_L37_bool_binop_done;
        }
        __pyx_t_4 = __pyx_v_current_node->collapse_margins;
        __pyx_L37_bool_binop_done:;

        /* "resiliparse_dom/extract/html2text.pyx":365
 * 
 *                 # Add margin before start tag and skip after
 *                 if (not current_node.is_end_tag and not current_node.pre_depth) or (             # <<<<<<<<<<<<<<
 *                         uncollapsed_margin_count and current_node.collapse_margins):
 *                     if current_node.collapse_margins:
 */
        if (__pyx_t_4) {

          /* "resiliparse_dom/extract/html2text.pyx":367
 *                 if (not current_node.is_end_tag and not current_node.pre_depth) or (
 *                         uncollapsed_margin_count and current_node.collapse_margins):
 *                     if current_node.collapse_margins:             # <<<<<<<<<<<<<<
 *                         margin_size = max(margin_size, <size_t>(current_node.make_block + current_node.make_big_block))
 *                     else:
 */
          if (__pyx_v_current_node->collapse_margins) {

            /* "resiliparse_dom/extract/html2text.pyx":368
 *                         uncollapsed_margin_count and current_node.collapse_margins):
 *                     if current_node.collapse_margins:
 *                         margin_size = max(margin_size, <size_t>(current_node.make_block + current_node.make_big_block))             # <<<<<<<<<<<<<<
 *                     else:
 *                         margin_size += <size_t>(current_node.make_block + current_node.make_big_block)
 */
            __pyx_t_10 = ((size_t)(__pyx_v_current_node->make_block + __pyx_v_current_node->make_big_block));
            __pyx_t_11 = __pyx_v_margin_size;
            __pyx_t_4 = (__pyx_t_10 > __pyx_t_11);
            if (__pyx_t_4) {
              __pyx_t_12 = __pyx_t_10;
            } else {
              __pyx_t_12 = __pyx_t_11;
            }
            __pyx_v_margin_size = __pyx_t_12;

            /* "resiliparse_dom/extract/html2text.pyx":367
 *                 if (not current_node.is_end_tag and not current_node.pre_depth) or (
 *                         uncollapsed_margin_count and current_node.collapse_margins):
 *                     if current_node.collapse_margins:             # <<<<<<<<<<<<<<
 *                         margin_size = max(margin_size, <size_t>(current_node.make_block + current_node.make_big_block))
 *                     else:
 */
            goto __pyx_L41;
          }

          /* "resiliparse_dom/extract/html2text.pyx":370
 *                         margin_size = max(margin_size, <size_t>(current_node.make_block + current_node.make_big_block))
 *                     else:
 *                         margin_size += <size_t>(current_node.make_block + current_node.make_big_block)             # <<<<<<<<<<<<<<
 *                     _make_margin(output, margin_size, current_node, opts)
 *                     current_node.make_block = False
 */
          /*else*/ {
            __pyx_v_margin_size = (__pyx_v_margin_size + ((size_t)(__pyx_v_current_node->make_block + __pyx_v_current_node->make_big_block)));
          }
          __pyx_L41:;

          /* "resiliparse_dom/extract/html2text.pyx":371
 *                     else:
 *                         margin_size += <size_t>(current_node.make_block + current_node.make_big_block)
 *                     _make_margin(output, margin_size, current_node, opts)             # <<<<<<<<<<<<<<
 *                     current_node.make_block = False
 *                     uncollapsed_margin_count = 0
 */
          __pyx_f_15resiliparse_dom_7extract_9html2text__make_margin(__pyx_v_output, __pyx_v_margin_size, __pyx_v_current_node, __pyx_v_opts);

          /* "resiliparse_dom/extract/html2text.pyx":372
 *                         margin_size += <size_t>(current_node.make_block + current_node.make_big_block)
 *                     _make_margin(output, margin_size, current_node, opts)
 *                     current_node.make_block = False             # <<<<<<<<<<<<<<
 *                     uncollapsed_margin_count = 0
 * 
 */
          __pyx_v_current_node->make_block = 0;

          /* "resiliparse_dom/extract/html2text.pyx":373
 *                     _make_margin(output, margin_size, current_node, opts)
 *                     current_node.make_block = False
 *                     uncollapsed_margin_count = 0             # <<<<<<<<<<<<<<
 * 
 *                 # Indent if in list (indent ul and ol start tags on level less)
 */
          __pyx_v_uncollapsed_margin_count = 0;

          /* "resiliparse_dom/extract/html2text.pyx":365
 * 
 *                 # Add margin before start tag and skip after
 *                 if (not current_node.is_end_tag and not current_node.pre_depth) or (             # <<<<<<<<<<<<<<
 *                         uncollapsed_margin_count and current_node.collapse_margins):
 *                     if current_node.collapse_margins:
 */
        }

        /* "resiliparse_dom/extract/html2text.pyx":376
 * 
 *                 # Indent if in list (indent ul and ol start tags on level less)
 *                 if opts.list_bullets:             # <<<<<<<<<<<<<<
 *                     _make_indent(output, list_depth - (<size_t>(current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL])
 *                                                        if list_depth > 0 and not current_node.is_end_tag else 0u),
 */
        __pyx_t_4 = (__pyx_v_opts.list_bullets != 0);
        if (__pyx_t_4) {

          /* "resiliparse_dom/extract/html2text.pyx":378
 *                 if opts.list_bullets:
 *                     _make_indent(output, list_depth - (<size_t>(current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL])
 *                                                        if list_depth > 0 and not current_node.is_end_tag else 0u),             # <<<<<<<<<<<<<<
 *                                  current_node, opts)
 *                 output.push_back(b'<')
 */
          __pyx_t_6 = (__pyx_v_list_depth > 0);
          if (__pyx_t_6) {
          } else {
            __pyx_t_4 = __pyx_t_6;
            goto __pyx_L43_bool_binop_done;
          }
          __pyx_t_6 = (!__pyx_v_current_node->is_end_tag);
          __pyx_t_4 = __pyx_t_6;
          __pyx_L43_bool_binop_done:;
          if (__pyx_t_4) {

            /* "resiliparse_dom/extract/html2text.pyx":377
 *                 # Indent if in list (indent ul and ol start tags on level less)
 *                 if opts.list_bullets:
 *                     _make_indent(output, list_depth - (<size_t>(current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL])             # <<<<<<<<<<<<<<
 *                                                        if list_depth > 0 and not current_node.is_end_tag else 0u),
 *                                  current_node, opts)
 */
            switch (__pyx_v_current_node->tag_id) {
              case LXB_TAG_UL:
              case LXB_TAG_OL:
              __pyx_t_6 = 1;
              break;
              default:
              __pyx_t_6 = 0;
              break;
            }
            __pyx_t_12 = ((size_t)__pyx_t_6);
          } else {
            __pyx_t_12 = 0U;
          }

          /* "resiliparse_dom/extract/html2text.pyx":379
 *                     _make_indent(output, list_depth - (<size_t>(current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL])
 *                                                        if list_depth > 0 and not current_node.is_end_tag else 0u),
 *                                  current_node, opts)             # <<<<<<<<<<<<<<
 *                 output.push_back(b'<')
 *                 if current_node.is_end_tag:
 */
          __pyx_f_15resiliparse_dom_7extract_9html2text__make_indent(__pyx_v_output, (__pyx_v_list_depth - __pyx_t_12), __pyx_v_current_node, __pyx_v_opts);

          /* "resiliparse_dom/extract/html2text.pyx":376
 * 
 *                 # Indent if in list (indent ul and ol start tags on level less)
 *                 if opts.list_bullets:             # <<<<<<<<<<<<<<
 *                     _make_indent(output, list_depth - (<size_t>(current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL])
 *                                                        if list_depth > 0 and not current_node.is_end_tag else 0u),
 */
        }

        /* "resiliparse_dom/extract/html2text.pyx":380
 *                                                        if list_depth > 0 and not current_node.is_end_tag else 0u),
 *                                  current_node, opts)
 *                 output.push_back(b'<')             # <<<<<<<<<<<<<<
 *                 if current_node.is_end_tag:
 *                     output.push_back(b'/')
 */
        try {
          __pyx_v_output.push_back('<');
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 380, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":381
 *                                  current_node, opts)
 *                 output.push_back(b'<')
 *                 if current_node.is_end_tag:             # <<<<<<<<<<<<<<
 *                     output.push_back(b'/')
 *                 element_name = <const char*>lxb_dom_element_qualified_name(<lxb_dom_element_t*>current_node.reference_node, &element_name_len)
 */
        if (__pyx_v_current_node->is_end_tag) {

          /* "resiliparse_dom/extract/html2text.pyx":382
 *                 output.push_back(b'<')
 *                 if current_node.is_end_tag:
 *                     output.push_back(b'/')             # <<<<<<<<<<<<<<
 *                 element_name = <const char*>lxb_dom_element_qualified_name(<lxb_dom_element_t*>current_node.reference_node, &element_name_len)
 *                 output.append(element_name, element_name_len)
 */
          try {
            __pyx_v_output.push_back('/');
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 382, __pyx_L1_error)
          }

          /* "resiliparse_dom/extract/html2text.pyx":381
 *                                  current_node, opts)
 *                 output.push_back(b'<')
 *                 if current_node.is_end_tag:             # <<<<<<<<<<<<<<
 *                     output.push_back(b'/')
 *                 element_name = <const char*>lxb_dom_element_qualified_name(<lxb_dom_element_t*>current_node.reference_node, &element_name_len)
 */
        }

        /* "resiliparse_dom/extract/html2text.pyx":383
 *                 if current_node.is_end_tag:
 *                     output.push_back(b'/')
 *                 element_name = <const char*>lxb_dom_element_qualified_name(<lxb_dom_element_t*>current_node.reference_node, &element_name_len)             # <<<<<<<<<<<<<<
 *                 output.append(element_name, element_name_len)
 *                 output.push_back(b'>')
 */
        __pyx_v_element_name = ((char const *)lxb_dom_element_qualified_name(((lxb_dom_element_t *)__pyx_v_current_node->reference_node), (&__pyx_v_element_name_len)));

        /* "resiliparse_dom/extract/html2text.pyx":384
 *                     output.push_back(b'/')
 *                 element_name = <const char*>lxb_dom_element_qualified_name(<lxb_dom_element_t*>current_node.reference_node, &element_name_len)
 *                 output.append(element_name, element_name_len)             # <<<<<<<<<<<<<<
 *                 output.push_back(b'>')
 * 
 */
        try {
          __pyx_v_output.append(__pyx_v_element_name, __pyx_v_element_name_len);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 384, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":385
 *                 element_name = <const char*>lxb_dom_element_qualified_name(<lxb_dom_element_t*>current_node.reference_node, &element_name_len)
 *                 output.append(element_name, element_name_len)
 *                 output.push_back(b'>')             # <<<<<<<<<<<<<<
 * 
 *                 # Add extra newline after opening <ul> / <ol>
 */
        try {
          __pyx_v_output.push_back('>');
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 385, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":388
 * 
 *                 # Add extra newline after opening <ul> / <ol>
 *                 if not output.empty() and current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] \             # <<<<<<<<<<<<<<
 *                         and not current_node.is_end_tag and not current_node.pre_depth:
 *                     output.push_back(b'\n')
 */
        __pyx_t_6 = (!__pyx_v_output.empty());
        if (__pyx_t_6) {
        } else {
          __pyx_t_4 = __pyx_t_6;
          goto __pyx_L47_bool_binop_done;
        }

        /* "resiliparse_dom/extract/html2text.pyx":389
 *                 # Add extra newline after opening <ul> / <ol>
 *                 if not output.empty() and current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] \
 *                         and not current_node.is_end_tag and not current_node.pre_depth:             # <<<<<<<<<<<<<<
 *                     output.push_back(b'\n')
 * 
 */
        switch (__pyx_v_current_node->tag_id) {
          case LXB_TAG_UL:

          /* "resiliparse_dom/extract/html2text.pyx":388
 * 
 *                 # Add extra newline after opening <ul> / <ol>
 *                 if not output.empty() and current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] \             # <<<<<<<<<<<<<<
 *                         and not current_node.is_end_tag and not current_node.pre_depth:
 *                     output.push_back(b'\n')
 */
          case LXB_TAG_OL:
          __pyx_t_6 = 1;
          break;
          default:
          __pyx_t_6 = 0;
          break;
        }
        __pyx_t_5 = __pyx_t_6;
        if (__pyx_t_5) {
        } else {
          __pyx_t_4 = __pyx_t_5;
          goto __pyx_L47_bool_binop_done;
        }

        /* "resiliparse_dom/extract/html2text.pyx":389
 *                 # Add extra newline after opening <ul> / <ol>
 *                 if not output.empty() and current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] \
 *                         and not current_node.is_end_tag and not current_node.pre_depth:             # <<<<<<<<<<<<<<
 *                     output.push_back(b'\n')
 * 
 */
        __pyx_t_5 = (!__pyx_v_current_node->is_end_tag);
        if (__pyx_t_5) {
        } else {
          __pyx_t_4 = __pyx_t_5;
          goto __pyx_L47_bool_binop_done;
        }
        __pyx_t_5 = (!(__pyx_v_current_node->pre_depth != 0));
        __pyx_t_4 = __pyx_t_5;
        __pyx_L47_bool_binop_done:;

        /* "resiliparse_dom/extract/html2text.pyx":388
 * 
 *                 # Add extra newline after opening <ul> / <ol>
 *                 if not output.empty() and current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] \             # <<<<<<<<<<<<<<
 *                         and not current_node.is_end_tag and not current_node.pre_depth:
 *                     output.push_back(b'\n')
 */
        if (__pyx_t_4) {

          /* "resiliparse_dom/extract/html2text.pyx":390
 *                 if not output.empty() and current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] \
 *                         and not current_node.is_end_tag and not current_node.pre_depth:
 *                     output.push_back(b'\n')             # <<<<<<<<<<<<<<
 * 
 * 
 */
          try {
            __pyx_v_output.push_back('\n');
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 390, __pyx_L1_error)
          }

          /* "resiliparse_dom/extract/html2text.pyx":388
 * 
 *                 # Add extra newline after opening <ul> / <ol>
 *                 if not output.empty() and current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] \             # <<<<<<<<<<<<<<
 *                         and not current_node.is_end_tag and not current_node.pre_depth:
 *                     output.push_back(b'\n')
 */
        }

        /* "resiliparse_dom/extract/html2text.pyx":360
 * 
 *             # Add a select number of start/end tags if minimal HTML formatting is on.
 *             if opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML and (             # <<<<<<<<<<<<<<
 *                     current_node.tag_id in [LXB_TAG_H1, LXB_TAG_H2, LXB_TAG_H3, LXB_TAG_H4, LXB_TAG_H5, LXB_TAG_H6, LXB_TAG_P]
 *                     or (current_node.tag_id in [LXB_TAG_UL, LXB_TAG_OL] and opts.list_bullets)):
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":344
 * 
 *         # Minimal HTML formatting only
 *         if opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:             # <<<<<<<<<<<<<<
 *             # Add <pre> tags immediately with newlines and skip usual block logic for opening tags
 *             if current_node.tag_id == LXB_TAG_PRE and opts.preserve_formatting == FormattingOpts.FORMAT_MINIMAL_HTML:
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":394
 * 
 *         # Record size follow-up margins
 *         if current_node.make_block:             # <<<<<<<<<<<<<<
 *             if current_node.collapse_margins:
 *                 margin_size = max(margin_size, 2u if current_node.make_big_block and not current_node.pre_depth else 1u)
 */
    if (__pyx_v_current_node->make_block) {

      /* "resiliparse_dom/extract/html2text.pyx":395
 *         # Record size follow-up margins
 *         if current_node.make_block:
 *             if current_node.collapse_margins:             # <<<<<<<<<<<<<<
 *                 margin_size = max(margin_size, 2u if current_node.make_big_block and not current_node.pre_depth else 1u)
 *             else:
 */
      if (__pyx_v_current_node->collapse_margins) {

        /* "resiliparse_dom/extract/html2text.pyx":396
 *         if current_node.make_block:
 *             if current_node.collapse_margins:
 *                 margin_size = max(margin_size, 2u if current_node.make_big_block and not current_node.pre_depth else 1u)             # <<<<<<<<<<<<<<
 *             else:
 *                 margin_size += 2u if current_node.make_big_block else 1u
 */
        if (__pyx_v_current_node->make_big_block) {
        } else {
          __pyx_t_4 = __pyx_v_current_node->make_big_block;
          goto __pyx_L53_bool_binop_done;
        }
        __pyx_t_5 = (!(__pyx_v_current_node->pre_depth != 0));
        __pyx_t_4 = __pyx_t_5;
        __pyx_L53_bool_binop_done:;
        if (__pyx_t_4) {
          __pyx_t_13 = 2U;
        } else {
          __pyx_t_13 = 1U;
        }
        __pyx_t_12 = __pyx_v_margin_size;
        __pyx_t_4 = (__pyx_t_13 > __pyx_t_12);
        if (__pyx_t_4) {
          __pyx_t_10 = __pyx_t_13;
        } else {
          __pyx_t_10 = __pyx_t_12;
        }
        __pyx_v_margin_size = __pyx_t_10;

        /* "resiliparse_dom/extract/html2text.pyx":395
 *         # Record size follow-up margins
 *         if current_node.make_block:
 *             if current_node.collapse_margins:             # <<<<<<<<<<<<<<
 *                 margin_size = max(margin_size, 2u if current_node.make_big_block and not current_node.pre_depth else 1u)
 *             else:
 */
        goto __pyx_L52;
      }

      /* "resiliparse_dom/extract/html2text.pyx":398
 *                 margin_size = max(margin_size, 2u if current_node.make_big_block and not current_node.pre_depth else 1u)
 *             else:
 *                 margin_size += 2u if current_node.make_big_block else 1u             # <<<<<<<<<<<<<<
 * 
 *         # From here on process only text nodes
 */
      /*else*/ {
        if (__pyx_v_current_node->make_big_block) {
          __pyx_t_10 = 2U;
        } else {
          __pyx_t_10 = 1U;
        }
        __pyx_v_margin_size = (__pyx_v_margin_size + __pyx_t_10);
      }
      __pyx_L52:;

      /* "resiliparse_dom/extract/html2text.pyx":394
 * 
 *         # Record size follow-up margins
 *         if current_node.make_block:             # <<<<<<<<<<<<<<
 *             if current_node.collapse_margins:
 *                 margin_size = max(margin_size, 2u if current_node.make_big_block and not current_node.pre_depth else 1u)
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":401
 * 
 *         # From here on process only text nodes
 *         if current_node.text_contents.get() == NULL:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    __pyx_t_4 = (__pyx_v_current_node->text_contents.get() == NULL);
    if (__pyx_t_4) {

      /* "resiliparse_dom/extract/html2text.pyx":402
 *         # From here on process only text nodes
 *         if current_node.text_contents.get() == NULL:
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         element_text = deref(current_node.text_contents)
 */
      goto __pyx_L3_continue;

      /* "resiliparse_dom/extract/html2text.pyx":401
 * 
 *         # From here on process only text nodes
 *         if current_node.text_contents.get() == NULL:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":404
 *             continue
 * 
 *         element_text = deref(current_node.text_contents)             # <<<<<<<<<<<<<<
 *         if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 *             element_text = _get_collapsed_string(element_text)
 */
    __pyx_v_element_text = (*__pyx_v_current_node->text_contents);

    /* "resiliparse_dom/extract/html2text.pyx":405
 * 
 *         element_text = deref(current_node.text_contents)
 *         if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:             # <<<<<<<<<<<<<<
 *             element_text = _get_collapsed_string(element_text)
 *             if current_node.make_block or (not output.empty() and isspace(output.back())):
 */
    __pyx_t_5 = (!(__pyx_v_current_node->pre_depth != 0));
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L57_bool_binop_done;
    }
    __pyx_t_5 = (__pyx_v_opts.preserve_formatting == FORMAT_OFF);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L57_bool_binop_done:;
    if (__pyx_t_4) {

      /* "resiliparse_dom/extract/html2text.pyx":406
 *         element_text = deref(current_node.text_contents)
 *         if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 *             element_text = _get_collapsed_string(element_text)             # <<<<<<<<<<<<<<
 *             if current_node.make_block or (not output.empty() and isspace(output.back())):
 *                 # Strip inline elements only if previous text ended with space
 */
      __pyx_v_element_text = __pyx_f_15resiliparse_dom_7extract_9html2text__get_collapsed_string(__pyx_v_element_text);

      /* "resiliparse_dom/extract/html2text.pyx":407
 *         if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 *             element_text = _get_collapsed_string(element_text)
 *             if current_node.make_block or (not output.empty() and isspace(output.back())):             # <<<<<<<<<<<<<<
 *                 # Strip inline elements only if previous text ended with space
 *                 element_text = lstrip_str(move(element_text))
 */
      if (!__pyx_v_current_node->make_block) {
      } else {
        __pyx_t_4 = __pyx_v_current_node->make_block;
        goto __pyx_L60_bool_binop_done;
      }
      __pyx_t_5 = (!__pyx_v_output.empty());
      if (__pyx_t_5) {
      } else {
        __pyx_t_4 = __pyx_t_5;
        goto __pyx_L60_bool_binop_done;
      }
      __pyx_t_5 = (std::isspace(__pyx_v_output.back()) != 0);
      __pyx_t_4 = __pyx_t_5;
      __pyx_L60_bool_binop_done:;
      if (__pyx_t_4) {

        /* "resiliparse_dom/extract/html2text.pyx":409
 *             if current_node.make_block or (not output.empty() and isspace(output.back())):
 *                 # Strip inline elements only if previous text ended with space
 *                 element_text = lstrip_str(move(element_text))             # <<<<<<<<<<<<<<
 * 
 *         if element_text.empty():
 */
        __pyx_v_element_text = lstrip_str(stdx::move<std::string>(__pyx_v_element_text));

        /* "resiliparse_dom/extract/html2text.pyx":407
 *         if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:
 *             element_text = _get_collapsed_string(element_text)
 *             if current_node.make_block or (not output.empty() and isspace(output.back())):             # <<<<<<<<<<<<<<
 *                 # Strip inline elements only if previous text ended with space
 *                 element_text = lstrip_str(move(element_text))
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":405
 * 
 *         element_text = deref(current_node.text_contents)
 *         if not current_node.pre_depth or opts.preserve_formatting == FormattingOpts.FORMAT_OFF:             # <<<<<<<<<<<<<<
 *             element_text = _get_collapsed_string(element_text)
 *             if current_node.make_block or (not output.empty() and isspace(output.back())):
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":411
 *                 element_text = lstrip_str(move(element_text))
 * 
 *         if element_text.empty():             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    __pyx_t_4 = __pyx_v_element_text.empty();
    if (__pyx_t_4) {

      /* "resiliparse_dom/extract/html2text.pyx":412
 * 
 *         if element_text.empty():
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         if current_node.escape_text_contents:
 */
      goto __pyx_L3_continue;

      /* "resiliparse_dom/extract/html2text.pyx":411
 *                 element_text = lstrip_str(move(element_text))
 * 
 *         if element_text.empty():             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":414
 *             continue
 * 
 *         if current_node.escape_text_contents:             # <<<<<<<<<<<<<<
 *             element_text = _escape_html(element_text.data(), element_text.size())
 * 
 */
    if (__pyx_v_current_node->escape_text_contents) {

      /* "resiliparse_dom/extract/html2text.pyx":415
 * 
 *         if current_node.escape_text_contents:
 *             element_text = _escape_html(element_text.data(), element_text.size())             # <<<<<<<<<<<<<<
 * 
 *         # Make margins and indents
 */
      __pyx_v_element_text = __pyx_f_15resiliparse_dom_7extract_9html2text__escape_html(__pyx_v_element_text.data(), __pyx_v_element_text.size());

      /* "resiliparse_dom/extract/html2text.pyx":414
 *             continue
 * 
 *         if current_node.escape_text_contents:             # <<<<<<<<<<<<<<
 *             element_text = _escape_html(element_text.data(), element_text.size())
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":418
 * 
 *         # Make margins and indents
 *         _make_margin(output, margin_size, current_node, opts)             # <<<<<<<<<<<<<<
 *         uncollapsed_margin_count = 0
 * 
 */
    __pyx_f_15resiliparse_dom_7extract_9html2text__make_margin(__pyx_v_output, __pyx_v_margin_size, __pyx_v_current_node, __pyx_v_opts);

    /* "resiliparse_dom/extract/html2text.pyx":419
 *         # Make margins and indents
 *         _make_margin(output, margin_size, current_node, opts)
 *         uncollapsed_margin_count = 0             # <<<<<<<<<<<<<<
 * 
 *         # Indent list items if basic formatting is used (follow-up lines without bullets are indented more)
 */
    __pyx_v_uncollapsed_margin_count = 0;

    /* "resiliparse_dom/extract/html2text.pyx":422
 * 
 *         # Indent list items if basic formatting is used (follow-up lines without bullets are indented more)
 *         if list_depth and opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:             # <<<<<<<<<<<<<<
 *             _make_indent(output, list_depth + <size_t>(opts.list_bullets and not bullet_inserted),
 *                          current_node, opts)
 */
    __pyx_t_5 = (__pyx_v_list_depth != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L66_bool_binop_done;
    }
    __pyx_t_5 = (__pyx_v_opts.preserve_formatting == FORMAT_BASIC);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L66_bool_binop_done:;
    if (__pyx_t_4) {

      /* "resiliparse_dom/extract/html2text.pyx":423
 *         # Indent list items if basic formatting is used (follow-up lines without bullets are indented more)
 *         if list_depth and opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:
 *             _make_indent(output, list_depth + <size_t>(opts.list_bullets and not bullet_inserted),             # <<<<<<<<<<<<<<
 *                          current_node, opts)
 *             bullet_inserted = False
 */
      if (__pyx_v_opts.list_bullets) {
      } else {
        __pyx_t_4 = __pyx_v_opts.list_bullets;
        goto __pyx_L68_bool_binop_done;
      }
      __pyx_t_5 = (!__pyx_v_bullet_inserted);
      __pyx_t_4 = __pyx_t_5;
      __pyx_L68_bool_binop_done:;

      /* "resiliparse_dom/extract/html2text.pyx":424
 *         if list_depth and opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:
 *             _make_indent(output, list_depth + <size_t>(opts.list_bullets and not bullet_inserted),
 *                          current_node, opts)             # <<<<<<<<<<<<<<
 *             bullet_inserted = False
 * 
 */
      __pyx_f_15resiliparse_dom_7extract_9html2text__make_indent(__pyx_v_output, (__pyx_v_list_depth + ((size_t)__pyx_t_4)), __pyx_v_current_node, __pyx_v_opts);

      /* "resiliparse_dom/extract/html2text.pyx":425
 *             _make_indent(output, list_depth + <size_t>(opts.list_bullets and not bullet_inserted),
 *                          current_node, opts)
 *             bullet_inserted = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_bullet_inserted = 0;

      /* "resiliparse_dom/extract/html2text.pyx":422
 * 
 *         # Indent list items if basic formatting is used (follow-up lines without bullets are indented more)
 *         if list_depth and opts.preserve_formatting == FormattingOpts.FORMAT_BASIC:             # <<<<<<<<<<<<<<
 *             _make_indent(output, list_depth + <size_t>(opts.list_bullets and not bullet_inserted),
 *                          current_node, opts)
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":428
 * 
 * 
 *         if opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and current_node.tag_id in [LXB_TAG_TD, LXB_TAG_TH]:             # <<<<<<<<<<<<<<
 *             if not output.empty() and output.back() != b'\n':
 *                 output.append(b'\t\t')
 */
    __pyx_t_5 = (__pyx_v_opts.preserve_formatting >= FORMAT_BASIC);
    if (__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L71_bool_binop_done;
    }
    switch (__pyx_v_current_node->tag_id) {
      case LXB_TAG_TD:
      case LXB_TAG_TH:
      __pyx_t_5 = 1;
      break;
      default:
      __pyx_t_5 = 0;
      break;
    }
    __pyx_t_6 = __pyx_t_5;
    __pyx_t_4 = __pyx_t_6;
    __pyx_L71_bool_binop_done:;
    if (__pyx_t_4) {

      /* "resiliparse_dom/extract/html2text.pyx":429
 * 
 *         if opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and current_node.tag_id in [LXB_TAG_TD, LXB_TAG_TH]:
 *             if not output.empty() and output.back() != b'\n':             # <<<<<<<<<<<<<<
 *                 output.append(b'\t\t')
 * 
 */
      __pyx_t_6 = (!__pyx_v_output.empty());
      if (__pyx_t_6) {
      } else {
        __pyx_t_4 = __pyx_t_6;
        goto __pyx_L74_bool_binop_done;
      }
      __pyx_t_6 = (__pyx_v_output.back() != '\n');
      __pyx_t_4 = __pyx_t_6;
      __pyx_L74_bool_binop_done:;
      if (__pyx_t_4) {

        /* "resiliparse_dom/extract/html2text.pyx":430
 *         if opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and current_node.tag_id in [LXB_TAG_TD, LXB_TAG_TH]:
 *             if not output.empty() and output.back() != b'\n':
 *                 output.append(b'\t\t')             # <<<<<<<<<<<<<<
 * 
 *         output.append(element_text_prefix)
 */
        try {
          __pyx_v_output.append(((char const *)"\t\t"));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 430, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":429
 * 
 *         if opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and current_node.tag_id in [LXB_TAG_TD, LXB_TAG_TH]:
 *             if not output.empty() and output.back() != b'\n':             # <<<<<<<<<<<<<<
 *                 output.append(b'\t\t')
 * 
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":428
 * 
 * 
 *         if opts.preserve_formatting >= FormattingOpts.FORMAT_BASIC and current_node.tag_id in [LXB_TAG_TD, LXB_TAG_TH]:             # <<<<<<<<<<<<<<
 *             if not output.empty() and output.back() != b'\n':
 *                 output.append(b'\t\t')
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":432
 *                 output.append(b'\t\t')
 * 
 *         output.append(element_text_prefix)             # <<<<<<<<<<<<<<
 *         element_text_prefix.clear()
 *         output.append(element_text)
 */
    try {
      __pyx_v_output.append(__pyx_v_element_text_prefix);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 432, __pyx_L1_error)
    }

    /* "resiliparse_dom/extract/html2text.pyx":433
 * 
 *         output.append(element_text_prefix)
 *         element_text_prefix.clear()             # <<<<<<<<<<<<<<
 *         output.append(element_text)
 * 
 */
    __pyx_v_element_text_prefix.clear();

    /* "resiliparse_dom/extract/html2text.pyx":434
 *         output.append(element_text_prefix)
 *         element_text_prefix.clear()
 *         output.append(element_text)             # <<<<<<<<<<<<<<
 * 
 *     return output
 */
    try {
      __pyx_v_output.append(__pyx_v_element_text);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 434, __pyx_L1_error)
    }
    __pyx_L3_continue:;
  }

  /* "resiliparse_dom/extract/html2text.pyx":436
 *         output.append(element_text)
 * 
 *     return output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":282
 * 
 * 
 * cdef string _serialize_extract_nodes(vector[shared_ptr[ExtractNode]]& extract_nodes,             # <<<<<<<<<<<<<<
 *                                      const ExtractOpts& opts, size_t reserve_size) noexcept nogil:
 *     cdef size_t i
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._serialize_extract_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":439
 * 
 * 
 * cdef inline bint _is_unprintable_pua(lxb_dom_node_t* node) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """Whether text node contains only a single unprintable code point from the private use area."""
 *     if node.first_child and (node.first_child.next or node.first_child.type != LXB_DOM_NODE_TYPE_TEXT):
 */

static CYTHON_INLINE int __pyx_f_15resiliparse_dom_7extract_9html2text__is_unprintable_pua(lxb_dom_node_t *__pyx_v_node) {
  std::string __pyx_v_element_text;
  uint32_t __pyx_v_cp;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "resiliparse_dom/extract/html2text.pyx":441
 * cdef inline bint _is_unprintable_pua(lxb_dom_node_t* node) noexcept nogil:
 *     """Whether text node contains only a single unprintable code point from the private use area."""
 *     if node.first_child and (node.first_child.next or node.first_child.type != LXB_DOM_NODE_TYPE_TEXT):             # <<<<<<<<<<<<<<
 *         # Node has more than one child
 *         return False
 */
  __pyx_t_2 = (__pyx_v_node->first_child != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_node->first_child->next != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_node->first_child->type != LXB_DOM_NODE_TYPE_TEXT);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":443
 *     if node.first_child and (node.first_child.next or node.first_child.type != LXB_DOM_NODE_TYPE_TEXT):
 *         # Node has more than one child
 *         return False             # <<<<<<<<<<<<<<
 *     if not node.first_child and node.type != LXB_DOM_NODE_TYPE_TEXT:
 *         return False
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":441
 * cdef inline bint _is_unprintable_pua(lxb_dom_node_t* node) noexcept nogil:
 *     """Whether text node contains only a single unprintable code point from the private use area."""
 *     if node.first_child and (node.first_child.next or node.first_child.type != LXB_DOM_NODE_TYPE_TEXT):             # <<<<<<<<<<<<<<
 *         # Node has more than one child
 *         return False
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":444
 *         # Node has more than one child
 *         return False
 *     if not node.first_child and node.type != LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_2 = (!(__pyx_v_node->first_child != 0));
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_node->type != LXB_DOM_NODE_TYPE_TEXT);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":445
 *         return False
 *     if not node.first_child and node.type != LXB_DOM_NODE_TYPE_TEXT:
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cdef string element_text = strip_str(get_node_text(node))
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":444
 *         # Node has more than one child
 *         return False
 *     if not node.first_child and node.type != LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":447
 *         return False
 * 
 *     cdef string element_text = strip_str(get_node_text(node))             # <<<<<<<<<<<<<<
 *     if element_text.size() > 3:
 *         return False
 */
  __pyx_v_element_text = strip_str(__pyx_f_15resiliparse_dom_5parse_4html_get_node_text(__pyx_v_node));

  /* "resiliparse_dom/extract/html2text.pyx":448
 * 
 *     cdef string element_text = strip_str(get_node_text(node))
 *     if element_text.size() > 3:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = (__pyx_v_element_text.size() > 3);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":449
 *     cdef string element_text = strip_str(get_node_text(node))
 *     if element_text.size() > 3:
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Pilcrow character (probably an anchor link)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":448
 * 
 *     cdef string element_text = strip_str(get_node_text(node))
 *     if element_text.size() > 3:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":452
 * 
 *     # Pilcrow character (probably an anchor link)
 *     if element_text == b'\xc2\xb6':             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_t_1 = (__pyx_v_element_text == ((char const *)"\302\266"));
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":453
 *     # Pilcrow character (probably an anchor link)
 *     if element_text == b'\xc2\xb6':
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     # BMP private use area (probably an icon font)
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":452
 * 
 *     # Pilcrow character (probably an anchor link)
 *     if element_text == b'\xc2\xb6':             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":456
 * 
 *     # BMP private use area (probably an icon font)
 *     cdef uint32_t cp = 0             # <<<<<<<<<<<<<<
 *     if element_text.size() == 3:
 *         memcpy(&cp, element_text.data(), 3 * sizeof(char))
 */
  __pyx_v_cp = 0;

  /* "resiliparse_dom/extract/html2text.pyx":457
 *     # BMP private use area (probably an icon font)
 *     cdef uint32_t cp = 0
 *     if element_text.size() == 3:             # <<<<<<<<<<<<<<
 *         memcpy(&cp, element_text.data(), 3 * sizeof(char))
 *         if 0x8080ee <= cp <= 0xbfa3ef:
 */
  __pyx_t_1 = (__pyx_v_element_text.size() == 3);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":458
 *     cdef uint32_t cp = 0
 *     if element_text.size() == 3:
 *         memcpy(&cp, element_text.data(), 3 * sizeof(char))             # <<<<<<<<<<<<<<
 *         if 0x8080ee <= cp <= 0xbfa3ef:
 *             return True
 */
    (void)(memcpy((&__pyx_v_cp), __pyx_v_element_text.data(), (3 * (sizeof(char)))));

    /* "resiliparse_dom/extract/html2text.pyx":459
 *     if element_text.size() == 3:
 *         memcpy(&cp, element_text.data(), 3 * sizeof(char))
 *         if 0x8080ee <= cp <= 0xbfa3ef:             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
    __pyx_t_1 = (0x8080ee <= __pyx_v_cp);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_cp <= 0xbfa3ef);
    }
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":460
 *         memcpy(&cp, element_text.data(), 3 * sizeof(char))
 *         if 0x8080ee <= cp <= 0xbfa3ef:
 *             return True             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "resiliparse_dom/extract/html2text.pyx":459
 *     if element_text.size() == 3:
 *         memcpy(&cp, element_text.data(), 3 * sizeof(char))
 *         if 0x8080ee <= cp <= 0xbfa3ef:             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":457
 *     # BMP private use area (probably an icon font)
 *     cdef uint32_t cp = 0
 *     if element_text.size() == 3:             # <<<<<<<<<<<<<<
 *         memcpy(&cp, element_text.data(), 3 * sizeof(char))
 *         if 0x8080ee <= cp <= 0xbfa3ef:
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":462
 *             return True
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":439
 * 
 * 
 * cdef inline bint _is_unprintable_pua(lxb_dom_node_t* node) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """Whether text node contains only a single unprintable code point from the private use area."""
 *     if node.first_child and (node.first_child.next or node.first_child.type != LXB_DOM_NODE_TYPE_TEXT):
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":490
 * 
 * 
 * cdef inline bint regex_search_not_empty(const string_view s, const RE2& r) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if s.empty():
 *         return False
 */

static CYTHON_INLINE int __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(std::string_view const __pyx_v_s, RE2Stack const &__pyx_v_r) {
  int __pyx_r;
  int __pyx_t_1;

  /* "resiliparse_dom/extract/html2text.pyx":491
 * 
 * cdef inline bint regex_search_not_empty(const string_view s, const RE2& r) noexcept nogil:
 *     if s.empty():             # <<<<<<<<<<<<<<
 *         return False
 *     return PartialMatch(s, r())
 */
  __pyx_t_1 = __pyx_v_s.empty();
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":492
 * cdef inline bint regex_search_not_empty(const string_view s, const RE2& r) noexcept nogil:
 *     if s.empty():
 *         return False             # <<<<<<<<<<<<<<
 *     return PartialMatch(s, r())
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":491
 * 
 * cdef inline bint regex_search_not_empty(const string_view s, const RE2& r) noexcept nogil:
 *     if s.empty():             # <<<<<<<<<<<<<<
 *         return False
 *     return PartialMatch(s, r())
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":493
 *     if s.empty():
 *         return False
 *     return PartialMatch(s, r())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = re2::RE2::PartialMatch(__pyx_v_s, __pyx_v_r());
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":490
 * 
 * 
 * cdef inline bint regex_search_not_empty(const string_view s, const RE2& r) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if s.empty():
 *         return False
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":496
 * 
 * 
 * cdef inline bint _is_link_cluster(lxb_dom_node_t* node, double max_link_ratio, size_t max_length) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Check if element contains an excessive number of links compared to the whole content length.
 */

static CYTHON_INLINE int __pyx_f_15resiliparse_dom_7extract_9html2text__is_link_cluster(lxb_dom_node_t *__pyx_v_node, double __pyx_v_max_link_ratio, size_t __pyx_v_max_length) {
  std::string __pyx_v_element_text;
  lxb_dom_collection_t *__pyx_v_dom_coll;
  size_t __pyx_v_i;
  std::string __pyx_v_link_texts;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":505
 *     :return: true if element is a link cluster
 *     """
 *     cdef string element_text = _get_collapsed_string(get_node_text(node))             # <<<<<<<<<<<<<<
 *     if max_length and element_text.size() > max_length:
 *         return False
 */
  __pyx_v_element_text = __pyx_f_15resiliparse_dom_7extract_9html2text__get_collapsed_string(__pyx_f_15resiliparse_dom_5parse_4html_get_node_text(__pyx_v_node));

  /* "resiliparse_dom/extract/html2text.pyx":506
 *     """
 *     cdef string element_text = _get_collapsed_string(get_node_text(node))
 *     if max_length and element_text.size() > max_length:             # <<<<<<<<<<<<<<
 *         return False
 *     dom_coll = lxb_dom_collection_make(node.owner_document, 20)
 */
  __pyx_t_2 = (__pyx_v_max_length != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_element_text.size() > __pyx_v_max_length);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":507
 *     cdef string element_text = _get_collapsed_string(get_node_text(node))
 *     if max_length and element_text.size() > max_length:
 *         return False             # <<<<<<<<<<<<<<
 *     dom_coll = lxb_dom_collection_make(node.owner_document, 20)
 *     lxb_dom_elements_by_tag_name(<lxb_dom_element_t *> node, dom_coll, <const lxb_char_t *> b'a', 1)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":506
 *     """
 *     cdef string element_text = _get_collapsed_string(get_node_text(node))
 *     if max_length and element_text.size() > max_length:             # <<<<<<<<<<<<<<
 *         return False
 *     dom_coll = lxb_dom_collection_make(node.owner_document, 20)
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":508
 *     if max_length and element_text.size() > max_length:
 *         return False
 *     dom_coll = lxb_dom_collection_make(node.owner_document, 20)             # <<<<<<<<<<<<<<
 *     lxb_dom_elements_by_tag_name(<lxb_dom_element_t *> node, dom_coll, <const lxb_char_t *> b'a', 1)
 *     cdef size_t i
 */
  __pyx_v_dom_coll = lxb_dom_collection_make(__pyx_v_node->owner_document, 20);

  /* "resiliparse_dom/extract/html2text.pyx":509
 *         return False
 *     dom_coll = lxb_dom_collection_make(node.owner_document, 20)
 *     lxb_dom_elements_by_tag_name(<lxb_dom_element_t *> node, dom_coll, <const lxb_char_t *> b'a', 1)             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef string link_texts
 */
  (void)(lxb_dom_elements_by_tag_name(((lxb_dom_element_t *)__pyx_v_node), __pyx_v_dom_coll, ((lxb_char_t const *)((lxb_char_t const *)((char const *)"a"))), 1));

  /* "resiliparse_dom/extract/html2text.pyx":512
 *     cdef size_t i
 *     cdef string link_texts
 *     link_texts.reserve(element_text.size())             # <<<<<<<<<<<<<<
 *     for i in range(lxb_dom_collection_length(dom_coll)):
 *         link_texts.append(_get_collapsed_string(get_node_text(lxb_dom_collection_node(dom_coll, i))))
 */
  try {
    __pyx_v_link_texts.reserve(__pyx_v_element_text.size());
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 512, __pyx_L1_error)
  }

  /* "resiliparse_dom/extract/html2text.pyx":513
 *     cdef string link_texts
 *     link_texts.reserve(element_text.size())
 *     for i in range(lxb_dom_collection_length(dom_coll)):             # <<<<<<<<<<<<<<
 *         link_texts.append(_get_collapsed_string(get_node_text(lxb_dom_collection_node(dom_coll, i))))
 *     lxb_dom_collection_destroy(dom_coll, True)
 */
  __pyx_t_3 = lxb_dom_collection_length(__pyx_v_dom_coll);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "resiliparse_dom/extract/html2text.pyx":514
 *     link_texts.reserve(element_text.size())
 *     for i in range(lxb_dom_collection_length(dom_coll)):
 *         link_texts.append(_get_collapsed_string(get_node_text(lxb_dom_collection_node(dom_coll, i))))             # <<<<<<<<<<<<<<
 *     lxb_dom_collection_destroy(dom_coll, True)
 *     if not link_texts.empty() and link_texts.size() / <double> element_text.size() > max_link_ratio:
 */
    try {
      __pyx_v_link_texts.append(__pyx_f_15resiliparse_dom_7extract_9html2text__get_collapsed_string(__pyx_f_15resiliparse_dom_5parse_4html_get_node_text(lxb_dom_collection_node(__pyx_v_dom_coll, __pyx_v_i))));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 514, __pyx_L1_error)
    }
  }

  /* "resiliparse_dom/extract/html2text.pyx":515
 *     for i in range(lxb_dom_collection_length(dom_coll)):
 *         link_texts.append(_get_collapsed_string(get_node_text(lxb_dom_collection_node(dom_coll, i))))
 *     lxb_dom_collection_destroy(dom_coll, True)             # <<<<<<<<<<<<<<
 *     if not link_texts.empty() and link_texts.size() / <double> element_text.size() > max_link_ratio:
 *         return True
 */
  (void)(lxb_dom_collection_destroy(__pyx_v_dom_coll, 1));

  /* "resiliparse_dom/extract/html2text.pyx":516
 *         link_texts.append(_get_collapsed_string(get_node_text(lxb_dom_collection_node(dom_coll, i))))
 *     lxb_dom_collection_destroy(dom_coll, True)
 *     if not link_texts.empty() and link_texts.size() / <double> element_text.size() > max_link_ratio:             # <<<<<<<<<<<<<<
 *         return True
 *     return False
 */
  __pyx_t_2 = (!__pyx_v_link_texts.empty());
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = ((((double)__pyx_v_link_texts.size()) / ((double)__pyx_v_element_text.size())) > __pyx_v_max_link_ratio);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":517
 *     lxb_dom_collection_destroy(dom_coll, True)
 *     if not link_texts.empty() and link_texts.size() / <double> element_text.size() > max_link_ratio:
 *         return True             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":516
 *         link_texts.append(_get_collapsed_string(get_node_text(lxb_dom_collection_node(dom_coll, i))))
 *     lxb_dom_collection_destroy(dom_coll, True)
 *     if not link_texts.empty() and link_texts.size() / <double> element_text.size() > max_link_ratio:             # <<<<<<<<<<<<<<
 *         return True
 *     return False
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":518
 *     if not link_texts.empty() and link_texts.size() / <double> element_text.size() > max_link_ratio:
 *         return True
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":496
 * 
 * 
 * cdef inline bint _is_link_cluster(lxb_dom_node_t* node, double max_link_ratio, size_t max_length) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Check if element contains an excessive number of links compared to the whole content length.
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._is_link_cluster", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":528
 * 
 * # noinspection DuplicatedCode
 * cdef inline bint _is_main_content_node(lxb_dom_node_t* node, size_t body_depth, bint allow_comments) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Perform a rule-based check whether the given element is a "main-content" element.
 */

static CYTHON_INLINE int __pyx_f_15resiliparse_dom_7extract_9html2text__is_main_content_node(lxb_dom_node_t *__pyx_v_node, size_t __pyx_v_body_depth, int __pyx_v_allow_comments) {
  lxb_dom_node_t *__pyx_v_pnode;
  std::string_view __pyx_v_rel_attr;
  std::string_view __pyx_v_itemprop_attr;
  std::string_view __pyx_v_cls_attr;
  std::string_view __pyx_v_id_attr;
  std::string __pyx_v_cls_and_id_attr_str;
  std::string_view __pyx_v_cls_and_id_attr;
  std::string_view __pyx_v_role_attr;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  lxb_dom_node_t *__pyx_t_3;
  std::string_view __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":538
 *     """
 * 
 *     if node.type == LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *         return not _is_unprintable_pua(node)
 *     elif node.type != LXB_DOM_NODE_TYPE_ELEMENT:
 */
  __pyx_t_1 = (__pyx_v_node->type == LXB_DOM_NODE_TYPE_TEXT);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":539
 * 
 *     if node.type == LXB_DOM_NODE_TYPE_TEXT:
 *         return not _is_unprintable_pua(node)             # <<<<<<<<<<<<<<
 *     elif node.type != LXB_DOM_NODE_TYPE_ELEMENT:
 *         return True
 */
    __pyx_r = (!__pyx_f_15resiliparse_dom_7extract_9html2text__is_unprintable_pua(__pyx_v_node));
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":538
 *     """
 * 
 *     if node.type == LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *         return not _is_unprintable_pua(node)
 *     elif node.type != LXB_DOM_NODE_TYPE_ELEMENT:
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":540
 *     if node.type == LXB_DOM_NODE_TYPE_TEXT:
 *         return not _is_unprintable_pua(node)
 *     elif node.type != LXB_DOM_NODE_TYPE_ELEMENT:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_t_1 = (__pyx_v_node->type != LXB_DOM_NODE_TYPE_ELEMENT);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":541
 *         return not _is_unprintable_pua(node)
 *     elif node.type != LXB_DOM_NODE_TYPE_ELEMENT:
 *         return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":540
 *     if node.type == LXB_DOM_NODE_TYPE_TEXT:
 *         return not _is_unprintable_pua(node)
 *     elif node.type != LXB_DOM_NODE_TYPE_ELEMENT:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":547
 * 
 *     # Main elements and headings
 *     if node.local_name in [LXB_TAG_BODY, LXB_TAG_MAIN, LXB_TAG_H1]:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  switch (__pyx_v_node->local_name) {
    case LXB_TAG_BODY:
    case LXB_TAG_MAIN:
    case LXB_TAG_H1:

    /* "resiliparse_dom/extract/html2text.pyx":548
 *     # Main elements and headings
 *     if node.local_name in [LXB_TAG_BODY, LXB_TAG_MAIN, LXB_TAG_H1]:
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     # Global footer
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":547
 * 
 *     # Main elements and headings
 *     if node.local_name in [LXB_TAG_BODY, LXB_TAG_MAIN, LXB_TAG_H1]:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    break;
    case LXB_TAG_FOOTER:

    /* "resiliparse_dom/extract/html2text.pyx":552
 *     # Global footer
 *     elif node.local_name == LXB_TAG_FOOTER:
 *         if body_depth < 3 or _is_link_cluster(node, 0.2, 0):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __pyx_t_2 = (__pyx_v_body_depth < 3);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = __pyx_f_15resiliparse_dom_7extract_9html2text__is_link_cluster(__pyx_v_node, 0.2, 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":553
 *     elif node.local_name == LXB_TAG_FOOTER:
 *         if body_depth < 3 or _is_link_cluster(node, 0.2, 0):
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         # Check if footer is recursive last element node of a direct body child
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "resiliparse_dom/extract/html2text.pyx":552
 *     # Global footer
 *     elif node.local_name == LXB_TAG_FOOTER:
 *         if body_depth < 3 or _is_link_cluster(node, 0.2, 0):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":556
 * 
 *         # Check if footer is recursive last element node of a direct body child
 *         pnode = node             # <<<<<<<<<<<<<<
 *         while pnode and pnode.parent and pnode.parent.local_name != LXB_TAG_BODY:
 *             if pnode.next and pnode.next.type == LXB_DOM_NODE_TYPE_TEXT:
 */
    __pyx_v_pnode = __pyx_v_node;

    /* "resiliparse_dom/extract/html2text.pyx":557
 *         # Check if footer is recursive last element node of a direct body child
 *         pnode = node
 *         while pnode and pnode.parent and pnode.parent.local_name != LXB_TAG_BODY:             # <<<<<<<<<<<<<<
 *             if pnode.next and pnode.next.type == LXB_DOM_NODE_TYPE_TEXT:
 *                 pnode = pnode.next
 */
    while (1) {
      __pyx_t_2 = (__pyx_v_pnode != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_pnode->parent != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_pnode->parent->local_name != LXB_TAG_BODY);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L9_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "resiliparse_dom/extract/html2text.pyx":558
 *         pnode = node
 *         while pnode and pnode.parent and pnode.parent.local_name != LXB_TAG_BODY:
 *             if pnode.next and pnode.next.type == LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *                 pnode = pnode.next
 *             if pnode.next:
 */
      __pyx_t_2 = (__pyx_v_pnode->next != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L13_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_pnode->next->type == LXB_DOM_NODE_TYPE_TEXT);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L13_bool_binop_done:;
      if (__pyx_t_1) {

        /* "resiliparse_dom/extract/html2text.pyx":559
 *         while pnode and pnode.parent and pnode.parent.local_name != LXB_TAG_BODY:
 *             if pnode.next and pnode.next.type == LXB_DOM_NODE_TYPE_TEXT:
 *                 pnode = pnode.next             # <<<<<<<<<<<<<<
 *             if pnode.next:
 *                 # There is at least one more element node
 */
        __pyx_t_3 = __pyx_v_pnode->next;
        __pyx_v_pnode = __pyx_t_3;

        /* "resiliparse_dom/extract/html2text.pyx":558
 *         pnode = node
 *         while pnode and pnode.parent and pnode.parent.local_name != LXB_TAG_BODY:
 *             if pnode.next and pnode.next.type == LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *                 pnode = pnode.next
 *             if pnode.next:
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":560
 *             if pnode.next and pnode.next.type == LXB_DOM_NODE_TYPE_TEXT:
 *                 pnode = pnode.next
 *             if pnode.next:             # <<<<<<<<<<<<<<
 *                 # There is at least one more element node
 *                 return True
 */
      __pyx_t_1 = (__pyx_v_pnode->next != 0);
      if (__pyx_t_1) {

        /* "resiliparse_dom/extract/html2text.pyx":562
 *             if pnode.next:
 *                 # There is at least one more element node
 *                 return True             # <<<<<<<<<<<<<<
 *             pnode = pnode.parent
 *         return False
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "resiliparse_dom/extract/html2text.pyx":560
 *             if pnode.next and pnode.next.type == LXB_DOM_NODE_TYPE_TEXT:
 *                 pnode = pnode.next
 *             if pnode.next:             # <<<<<<<<<<<<<<
 *                 # There is at least one more element node
 *                 return True
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":563
 *                 # There is at least one more element node
 *                 return True
 *             pnode = pnode.parent             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
      __pyx_t_3 = __pyx_v_pnode->parent;
      __pyx_v_pnode = __pyx_t_3;
    }

    /* "resiliparse_dom/extract/html2text.pyx":564
 *                 return True
 *             pnode = pnode.parent
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     elif node.local_name == LXB_TAG_UL:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":551
 * 
 *     # Global footer
 *     elif node.local_name == LXB_TAG_FOOTER:             # <<<<<<<<<<<<<<
 *         if body_depth < 3 or _is_link_cluster(node, 0.2, 0):
 *             return False
 */
    break;
    case LXB_TAG_UL:

    /* "resiliparse_dom/extract/html2text.pyx":567
 * 
 *     elif node.local_name == LXB_TAG_UL:
 *         if body_depth < 4 or _is_link_cluster(node, 0.2, 0):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __pyx_t_2 = (__pyx_v_body_depth < 4);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_2 = __pyx_f_15resiliparse_dom_7extract_9html2text__is_link_cluster(__pyx_v_node, 0.2, 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L17_bool_binop_done:;
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":568
 *     elif node.local_name == LXB_TAG_UL:
 *         if body_depth < 4 or _is_link_cluster(node, 0.2, 0):
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     # Teaser articles
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "resiliparse_dom/extract/html2text.pyx":567
 * 
 *     elif node.local_name == LXB_TAG_UL:
 *         if body_depth < 4 or _is_link_cluster(node, 0.2, 0):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":566
 *         return False
 * 
 *     elif node.local_name == LXB_TAG_UL:             # <<<<<<<<<<<<<<
 *         if body_depth < 4 or _is_link_cluster(node, 0.2, 0):
 *             return False
 */
    break;
    case LXB_TAG_ARTICLE:

    /* "resiliparse_dom/extract/html2text.pyx":572
 *     # Teaser articles
 *     elif node.local_name == LXB_TAG_ARTICLE:
 *         if body_depth > 2 and _is_link_cluster(node, 0.2, 500):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __pyx_t_2 = (__pyx_v_body_depth > 2);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L20_bool_binop_done;
    }
    __pyx_t_2 = __pyx_f_15resiliparse_dom_7extract_9html2text__is_link_cluster(__pyx_v_node, 0.2, 0x1F4);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L20_bool_binop_done:;
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":573
 *     elif node.local_name == LXB_TAG_ARTICLE:
 *         if body_depth > 2 and _is_link_cluster(node, 0.2, 500):
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     # Navigation, sidebar, other hard-blacklisted elements
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "resiliparse_dom/extract/html2text.pyx":572
 *     # Teaser articles
 *     elif node.local_name == LXB_TAG_ARTICLE:
 *         if body_depth > 2 and _is_link_cluster(node, 0.2, 500):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":571
 * 
 *     # Teaser articles
 *     elif node.local_name == LXB_TAG_ARTICLE:             # <<<<<<<<<<<<<<
 *         if body_depth > 2 and _is_link_cluster(node, 0.2, 500):
 *             return False
 */
    break;
    case LXB_TAG_NAV:

    /* "resiliparse_dom/extract/html2text.pyx":576
 * 
 *     # Navigation, sidebar, other hard-blacklisted elements
 *     elif node.local_name in [LXB_TAG_NAV, LXB_TAG_ASIDE, LXB_TAG_AUDIO, LXB_TAG_VIDEO, LXB_TAG_TIME]:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    case LXB_TAG_ASIDE:
    case LXB_TAG_AUDIO:
    case LXB_TAG_VIDEO:
    case LXB_TAG_TIME:

    /* "resiliparse_dom/extract/html2text.pyx":577
 *     # Navigation, sidebar, other hard-blacklisted elements
 *     elif node.local_name in [LXB_TAG_NAV, LXB_TAG_ASIDE, LXB_TAG_AUDIO, LXB_TAG_VIDEO, LXB_TAG_TIME]:
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":576
 * 
 *     # Navigation, sidebar, other hard-blacklisted elements
 *     elif node.local_name in [LXB_TAG_NAV, LXB_TAG_ASIDE, LXB_TAG_AUDIO, LXB_TAG_VIDEO, LXB_TAG_TIME]:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    break;
    default: break;
  }

  /* "resiliparse_dom/extract/html2text.pyx":583
 * 
 *     # Hidden elements
 *     if lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'hidden', 6):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = lxb_dom_element_has_attribute(((lxb_dom_element_t *)__pyx_v_node), ((lxb_char_t const *)((lxb_char_t const *)((char const *)"hidden"))), 6);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":584
 *     # Hidden elements
 *     if lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'hidden', 6):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # rel attributes
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":583
 * 
 *     # Hidden elements
 *     if lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'hidden', 6):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":587
 * 
 *     # rel attributes
 *     cdef string_view rel_attr = strip_sv(get_node_attr_sv(node, b'rel'))             # <<<<<<<<<<<<<<
 *     if not rel_attr.empty() and rel_attr in [b'author', b'icon', b'search', b'prev', b'next', b'tag']:
 *         return False
 */
  __pyx_v_rel_attr = __pyx_f_18resiliparse_common_11string_util_strip_sv(__pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_node, __pyx_k_rel));

  /* "resiliparse_dom/extract/html2text.pyx":588
 *     # rel attributes
 *     cdef string_view rel_attr = strip_sv(get_node_attr_sv(node, b'rel'))
 *     if not rel_attr.empty() and rel_attr in [b'author', b'icon', b'search', b'prev', b'next', b'tag']:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_2 = (!__pyx_v_rel_attr.empty());
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L24_bool_binop_done;
  }
  __pyx_t_4 = __pyx_v_rel_attr;
  __pyx_t_5 = (__pyx_t_4 == ((char const *)"author"));
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_t_4 == ((char const *)"icon"));
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_t_4 == ((char const *)"search"));
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_t_4 == ((char const *)"prev"));
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_t_4 == ((char const *)"next"));
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_t_4 == ((char const *)"tag"));
  __pyx_t_2 = __pyx_t_5;
  __pyx_L26_bool_binop_done:;
  __pyx_t_5 = __pyx_t_2;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L24_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":589
 *     cdef string_view rel_attr = strip_sv(get_node_attr_sv(node, b'rel'))
 *     if not rel_attr.empty() and rel_attr in [b'author', b'icon', b'search', b'prev', b'next', b'tag']:
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # itemprop attributes
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":588
 *     # rel attributes
 *     cdef string_view rel_attr = strip_sv(get_node_attr_sv(node, b'rel'))
 *     if not rel_attr.empty() and rel_attr in [b'author', b'icon', b'search', b'prev', b'next', b'tag']:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":592
 * 
 *     # itemprop attributes
 *     cdef string_view itemprop_attr = strip_sv(get_node_attr_sv(node, b'itemprop'))             # <<<<<<<<<<<<<<
 *     if not itemprop_attr.empty() and itemprop_attr in [b'datePublished', b'author', b'url']:
 *         return False
 */
  __pyx_v_itemprop_attr = __pyx_f_18resiliparse_common_11string_util_strip_sv(__pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_node, __pyx_k_itemprop));

  /* "resiliparse_dom/extract/html2text.pyx":593
 *     # itemprop attributes
 *     cdef string_view itemprop_attr = strip_sv(get_node_attr_sv(node, b'itemprop'))
 *     if not itemprop_attr.empty() and itemprop_attr in [b'datePublished', b'author', b'url']:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_5 = (!__pyx_v_itemprop_attr.empty());
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L33_bool_binop_done;
  }
  __pyx_t_4 = __pyx_v_itemprop_attr;
  __pyx_t_2 = (__pyx_t_4 == ((char const *)"datePublished"));
  if (!__pyx_t_2) {
  } else {
    __pyx_t_5 = __pyx_t_2;
    goto __pyx_L35_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_t_4 == ((char const *)"author"));
  if (!__pyx_t_2) {
  } else {
    __pyx_t_5 = __pyx_t_2;
    goto __pyx_L35_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_t_4 == ((char const *)"url"));
  __pyx_t_5 = __pyx_t_2;
  __pyx_L35_bool_binop_done:;
  __pyx_t_2 = __pyx_t_5;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L33_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":594
 *     cdef string_view itemprop_attr = strip_sv(get_node_attr_sv(node, b'itemprop'))
 *     if not itemprop_attr.empty() and itemprop_attr in [b'datePublished', b'author', b'url']:
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # ARIA hidden
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":593
 *     # itemprop attributes
 *     cdef string_view itemprop_attr = strip_sv(get_node_attr_sv(node, b'itemprop'))
 *     if not itemprop_attr.empty() and itemprop_attr in [b'datePublished', b'author', b'url']:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":597
 * 
 *     # ARIA hidden
 *     if strip_sv(get_node_attr_sv(node, b'aria-hidden')) == b'true':             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = (__pyx_f_18resiliparse_common_11string_util_strip_sv(__pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_node, __pyx_k_aria_hidden)) == ((char const *)"true"));
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":598
 *     # ARIA hidden
 *     if strip_sv(get_node_attr_sv(node, b'aria-hidden')) == b'true':
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # ARIA expanded
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":597
 * 
 *     # ARIA hidden
 *     if strip_sv(get_node_attr_sv(node, b'aria-hidden')) == b'true':             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":601
 * 
 *     # ARIA expanded
 *     if strip_sv(get_node_attr_sv(node, b'aria-expanded')) == b'false':             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = (__pyx_f_18resiliparse_common_11string_util_strip_sv(__pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_node, __pyx_k_aria_expanded)) == ((char const *)"false"));
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":602
 *     # ARIA expanded
 *     if strip_sv(get_node_attr_sv(node, b'aria-expanded')) == b'false':
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":601
 * 
 *     # ARIA expanded
 *     if strip_sv(get_node_attr_sv(node, b'aria-expanded')) == b'false':             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":607
 *     # ------ Section 3: General class and ID matching ------
 * 
 *     cdef string_view cls_attr = get_node_attr_sv(node, b'class')             # <<<<<<<<<<<<<<
 *     cdef string_view id_attr = get_node_attr_sv(node, b'id')
 *     # Only elements with class or id attributes from here on
 */
  __pyx_v_cls_attr = __pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_node, __pyx_k_class);

  /* "resiliparse_dom/extract/html2text.pyx":608
 * 
 *     cdef string_view cls_attr = get_node_attr_sv(node, b'class')
 *     cdef string_view id_attr = get_node_attr_sv(node, b'id')             # <<<<<<<<<<<<<<
 *     # Only elements with class or id attributes from here on
 *     if cls_attr.empty() and id_attr.empty():
 */
  __pyx_v_id_attr = __pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_node, __pyx_k_id);

  /* "resiliparse_dom/extract/html2text.pyx":610
 *     cdef string_view id_attr = get_node_attr_sv(node, b'id')
 *     # Only elements with class or id attributes from here on
 *     if cls_attr.empty() and id_attr.empty():             # <<<<<<<<<<<<<<
 *         if node.local_name == LXB_TAG_DIV:
 *             return body_depth <= 5 or not _is_link_cluster(node, 0.6, 800)
 */
  __pyx_t_2 = __pyx_v_cls_attr.empty();
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L41_bool_binop_done;
  }
  __pyx_t_2 = __pyx_v_id_attr.empty();
  __pyx_t_1 = __pyx_t_2;
  __pyx_L41_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":611
 *     # Only elements with class or id attributes from here on
 *     if cls_attr.empty() and id_attr.empty():
 *         if node.local_name == LXB_TAG_DIV:             # <<<<<<<<<<<<<<
 *             return body_depth <= 5 or not _is_link_cluster(node, 0.6, 800)
 *         return True
 */
    __pyx_t_1 = (__pyx_v_node->local_name == LXB_TAG_DIV);
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":612
 *     if cls_attr.empty() and id_attr.empty():
 *         if node.local_name == LXB_TAG_DIV:
 *             return body_depth <= 5 or not _is_link_cluster(node, 0.6, 800)             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
      __pyx_t_2 = (__pyx_v_body_depth <= 5);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L44_bool_binop_done;
      }
      __pyx_t_2 = (!__pyx_f_15resiliparse_dom_7extract_9html2text__is_link_cluster(__pyx_v_node, 0.6, 0x320));
      __pyx_t_1 = __pyx_t_2;
      __pyx_L44_bool_binop_done:;
      __pyx_r = __pyx_t_1;
      goto __pyx_L0;

      /* "resiliparse_dom/extract/html2text.pyx":611
 *     # Only elements with class or id attributes from here on
 *     if cls_attr.empty() and id_attr.empty():
 *         if node.local_name == LXB_TAG_DIV:             # <<<<<<<<<<<<<<
 *             return body_depth <= 5 or not _is_link_cluster(node, 0.6, 800)
 *         return True
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":613
 *         if node.local_name == LXB_TAG_DIV:
 *             return body_depth <= 5 or not _is_link_cluster(node, 0.6, 800)
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef string cls_and_id_attr_str = <string>cls_attr
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":610
 *     cdef string_view id_attr = get_node_attr_sv(node, b'id')
 *     # Only elements with class or id attributes from here on
 *     if cls_attr.empty() and id_attr.empty():             # <<<<<<<<<<<<<<
 *         if node.local_name == LXB_TAG_DIV:
 *             return body_depth <= 5 or not _is_link_cluster(node, 0.6, 800)
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":615
 *         return True
 * 
 *     cdef string cls_and_id_attr_str = <string>cls_attr             # <<<<<<<<<<<<<<
 *     if not cls_and_id_attr_str.empty():
 *         cls_and_id_attr_str.push_back(b' ')
 */
  __pyx_v_cls_and_id_attr_str = ((std::string)__pyx_v_cls_attr);

  /* "resiliparse_dom/extract/html2text.pyx":616
 * 
 *     cdef string cls_and_id_attr_str = <string>cls_attr
 *     if not cls_and_id_attr_str.empty():             # <<<<<<<<<<<<<<
 *         cls_and_id_attr_str.push_back(b' ')
 *     cls_and_id_attr_str.append(<string>id_attr)
 */
  __pyx_t_1 = (!__pyx_v_cls_and_id_attr_str.empty());
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":617
 *     cdef string cls_and_id_attr_str = <string>cls_attr
 *     if not cls_and_id_attr_str.empty():
 *         cls_and_id_attr_str.push_back(b' ')             # <<<<<<<<<<<<<<
 *     cls_and_id_attr_str.append(<string>id_attr)
 *     cdef string_view cls_and_id_attr = <string_view>cls_and_id_attr_str
 */
    try {
      __pyx_v_cls_and_id_attr_str.push_back(' ');
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 617, __pyx_L1_error)
    }

    /* "resiliparse_dom/extract/html2text.pyx":616
 * 
 *     cdef string cls_and_id_attr_str = <string>cls_attr
 *     if not cls_and_id_attr_str.empty():             # <<<<<<<<<<<<<<
 *         cls_and_id_attr_str.push_back(b' ')
 *     cls_and_id_attr_str.append(<string>id_attr)
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":618
 *     if not cls_and_id_attr_str.empty():
 *         cls_and_id_attr_str.push_back(b' ')
 *     cls_and_id_attr_str.append(<string>id_attr)             # <<<<<<<<<<<<<<
 *     cdef string_view cls_and_id_attr = <string_view>cls_and_id_attr_str
 * 
 */
  try {
    __pyx_v_cls_and_id_attr_str.append(((std::string)__pyx_v_id_attr));
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 618, __pyx_L1_error)
  }

  /* "resiliparse_dom/extract/html2text.pyx":619
 *         cls_and_id_attr_str.push_back(b' ')
 *     cls_and_id_attr_str.append(<string>id_attr)
 *     cdef string_view cls_and_id_attr = <string_view>cls_and_id_attr_str             # <<<<<<<<<<<<<<
 * 
 *     # Hidden elements
 */
  __pyx_v_cls_and_id_attr = ((std::string_view)__pyx_v_cls_and_id_attr_str);

  /* "resiliparse_dom/extract/html2text.pyx":622
 * 
 *     # Hidden elements
 *     if regex_search_not_empty(cls_attr, display_cls_regex) \             # <<<<<<<<<<<<<<
 *             or regex_search_not_empty(get_node_attr_sv(node, b'style'), display_css_regex):
 *         return False
 */
  __pyx_t_2 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_display_cls_regex);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L48_bool_binop_done;
  }

  /* "resiliparse_dom/extract/html2text.pyx":623
 *     # Hidden elements
 *     if regex_search_not_empty(cls_attr, display_cls_regex) \
 *             or regex_search_not_empty(get_node_attr_sv(node, b'style'), display_css_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_2 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_node, __pyx_k_style), __pyx_v_15resiliparse_dom_7extract_9html2text_display_css_regex);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L48_bool_binop_done:;

  /* "resiliparse_dom/extract/html2text.pyx":622
 * 
 *     # Hidden elements
 *     if regex_search_not_empty(cls_attr, display_cls_regex) \             # <<<<<<<<<<<<<<
 *             or regex_search_not_empty(get_node_attr_sv(node, b'style'), display_css_regex):
 *         return False
 */
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":624
 *     if regex_search_not_empty(cls_attr, display_cls_regex) \
 *             or regex_search_not_empty(get_node_attr_sv(node, b'style'), display_css_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Skip links
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":622
 * 
 *     # Hidden elements
 *     if regex_search_not_empty(cls_attr, display_cls_regex) \             # <<<<<<<<<<<<<<
 *             or regex_search_not_empty(get_node_attr_sv(node, b'style'), display_css_regex):
 *         return False
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":627
 * 
 *     # Skip links
 *     if node.local_name in [LXB_TAG_A, LXB_TAG_DIV, LXB_TAG_LI] and \             # <<<<<<<<<<<<<<
 *             regex_search_not_empty(cls_and_id_attr, skip_link_cls_regex):
 *         return False
 */
  switch (__pyx_v_node->local_name) {
    case LXB_TAG_A:
    case LXB_TAG_DIV:
    case LXB_TAG_LI:
    __pyx_t_2 = 1;
    break;
    default:
    __pyx_t_2 = 0;
    break;
  }
  __pyx_t_5 = __pyx_t_2;
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L51_bool_binop_done;
  }

  /* "resiliparse_dom/extract/html2text.pyx":628
 *     # Skip links
 *     if node.local_name in [LXB_TAG_A, LXB_TAG_DIV, LXB_TAG_LI] and \
 *             regex_search_not_empty(cls_and_id_attr, skip_link_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_5 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_skip_link_cls_regex);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L51_bool_binop_done:;

  /* "resiliparse_dom/extract/html2text.pyx":627
 * 
 *     # Skip links
 *     if node.local_name in [LXB_TAG_A, LXB_TAG_DIV, LXB_TAG_LI] and \             # <<<<<<<<<<<<<<
 *             regex_search_not_empty(cls_and_id_attr, skip_link_cls_regex):
 *         return False
 */
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":629
 *     if node.local_name in [LXB_TAG_A, LXB_TAG_DIV, LXB_TAG_LI] and \
 *             regex_search_not_empty(cls_and_id_attr, skip_link_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     if body_depth > 2:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":627
 * 
 *     # Skip links
 *     if node.local_name in [LXB_TAG_A, LXB_TAG_DIV, LXB_TAG_LI] and \             # <<<<<<<<<<<<<<
 *             regex_search_not_empty(cls_and_id_attr, skip_link_cls_regex):
 *         return False
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":631
 *         return False
 * 
 *     if body_depth > 2:             # <<<<<<<<<<<<<<
 *         # Sign-in links
 *         if regex_search_not_empty(cls_attr, signin_cls_regex):
 */
  __pyx_t_1 = (__pyx_v_body_depth > 2);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":633
 *     if body_depth > 2:
 *         # Sign-in links
 *         if regex_search_not_empty(cls_attr, signin_cls_regex):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_signin_cls_regex);
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":634
 *         # Sign-in links
 *         if regex_search_not_empty(cls_attr, signin_cls_regex):
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         # Post meta
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "resiliparse_dom/extract/html2text.pyx":633
 *     if body_depth > 2:
 *         # Sign-in links
 *         if regex_search_not_empty(cls_attr, signin_cls_regex):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":637
 * 
 *         # Post meta
 *         if regex_search_not_empty(cls_attr, post_meta_cls_regex):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_post_meta_cls_regex);
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":638
 *         # Post meta
 *         if regex_search_not_empty(cls_attr, post_meta_cls_regex):
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         # Social media and feedback forms
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "resiliparse_dom/extract/html2text.pyx":637
 * 
 *         # Post meta
 *         if regex_search_not_empty(cls_attr, post_meta_cls_regex):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":641
 * 
 *         # Social media and feedback forms
 *         if regex_search_not_empty(cls_attr, social_cls_regex):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_social_cls_regex);
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":642
 *         # Social media and feedback forms
 *         if regex_search_not_empty(cls_attr, social_cls_regex):
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     # Logos
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "resiliparse_dom/extract/html2text.pyx":641
 * 
 *         # Social media and feedback forms
 *         if regex_search_not_empty(cls_attr, social_cls_regex):             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":631
 *         return False
 * 
 *     if body_depth > 2:             # <<<<<<<<<<<<<<
 *         # Sign-in links
 *         if regex_search_not_empty(cls_attr, signin_cls_regex):
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":645
 * 
 *     # Logos
 *     if regex_search_not_empty(cls_and_id_attr, logo_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_logo_cls_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":646
 *     # Logos
 *     if regex_search_not_empty(cls_and_id_attr, logo_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Ads
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":645
 * 
 *     # Logos
 *     if regex_search_not_empty(cls_and_id_attr, logo_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":649
 * 
 *     # Ads
 *     if regex_search_not_empty(cls_and_id_attr, ads_cls_regex) \             # <<<<<<<<<<<<<<
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-ad', 7) \
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-advertisement', 18) \
 */
  __pyx_t_5 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_ads_cls_regex);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L59_bool_binop_done;
  }

  /* "resiliparse_dom/extract/html2text.pyx":650
 *     # Ads
 *     if regex_search_not_empty(cls_and_id_attr, ads_cls_regex) \
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-ad', 7) \             # <<<<<<<<<<<<<<
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-advertisement', 18) \
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-text-ad', 12):
 */
  __pyx_t_5 = lxb_dom_element_has_attribute(((lxb_dom_element_t *)__pyx_v_node), ((lxb_char_t const *)((lxb_char_t const *)((char const *)"data-ad"))), 7);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L59_bool_binop_done;
  }

  /* "resiliparse_dom/extract/html2text.pyx":651
 *     if regex_search_not_empty(cls_and_id_attr, ads_cls_regex) \
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-ad', 7) \
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-advertisement', 18) \             # <<<<<<<<<<<<<<
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-text-ad', 12):
 *         return False
 */
  __pyx_t_5 = lxb_dom_element_has_attribute(((lxb_dom_element_t *)__pyx_v_node), ((lxb_char_t const *)((lxb_char_t const *)((char const *)"data-advertisement"))), 18);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L59_bool_binop_done;
  }

  /* "resiliparse_dom/extract/html2text.pyx":652
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-ad', 7) \
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-advertisement', 18) \
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-text-ad', 12):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_5 = lxb_dom_element_has_attribute(((lxb_dom_element_t *)__pyx_v_node), ((lxb_char_t const *)((lxb_char_t const *)((char const *)"data-text-ad"))), 12);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L59_bool_binop_done:;

  /* "resiliparse_dom/extract/html2text.pyx":649
 * 
 *     # Ads
 *     if regex_search_not_empty(cls_and_id_attr, ads_cls_regex) \             # <<<<<<<<<<<<<<
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-ad', 7) \
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-advertisement', 18) \
 */
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":653
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-advertisement', 18) \
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-text-ad', 12):
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":649
 * 
 *     # Ads
 *     if regex_search_not_empty(cls_and_id_attr, ads_cls_regex) \             # <<<<<<<<<<<<<<
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-ad', 7) \
 *             or lxb_dom_element_has_attribute(<lxb_dom_element_t*>node, <const lxb_char_t*>b'data-advertisement', 18) \
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":658
 *     # ------ Section 4: Class and ID matching of block elements only ------
 * 
 *     if not is_block_element(node.local_name) and node.local_name != LXB_TAG_TD:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_t_5 = (!__pyx_f_15resiliparse_dom_5parse_4html_is_block_element(__pyx_v_node->local_name));
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L64_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_v_node->local_name != LXB_TAG_TD);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L64_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":659
 * 
 *     if not is_block_element(node.local_name) and node.local_name != LXB_TAG_TD:
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     # ARIA roles
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":658
 *     # ------ Section 4: Class and ID matching of block elements only ------
 * 
 *     if not is_block_element(node.local_name) and node.local_name != LXB_TAG_TD:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":662
 * 
 *     # ARIA roles
 *     cdef string_view role_attr = strip_sv(get_node_attr_sv(node, b'role'))             # <<<<<<<<<<<<<<
 *     if rel_attr == b'main':
 *         return True
 */
  __pyx_v_role_attr = __pyx_f_18resiliparse_common_11string_util_strip_sv(__pyx_f_15resiliparse_dom_5parse_4html_get_node_attr_sv(__pyx_v_node, __pyx_k_role));

  /* "resiliparse_dom/extract/html2text.pyx":663
 *     # ARIA roles
 *     cdef string_view role_attr = strip_sv(get_node_attr_sv(node, b'role'))
 *     if rel_attr == b'main':             # <<<<<<<<<<<<<<
 *         return True
 *     if not role_attr.empty() and blacklist_aria_roles.find(<string>role_attr) != blacklist_aria_roles.end():
 */
  __pyx_t_1 = (__pyx_v_rel_attr == ((char const *)"main"));
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":664
 *     cdef string_view role_attr = strip_sv(get_node_attr_sv(node, b'role'))
 *     if rel_attr == b'main':
 *         return True             # <<<<<<<<<<<<<<
 *     if not role_attr.empty() and blacklist_aria_roles.find(<string>role_attr) != blacklist_aria_roles.end():
 *         return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":663
 *     # ARIA roles
 *     cdef string_view role_attr = strip_sv(get_node_attr_sv(node, b'role'))
 *     if rel_attr == b'main':             # <<<<<<<<<<<<<<
 *         return True
 *     if not role_attr.empty() and blacklist_aria_roles.find(<string>role_attr) != blacklist_aria_roles.end():
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":665
 *     if rel_attr == b'main':
 *         return True
 *     if not role_attr.empty() and blacklist_aria_roles.find(<string>role_attr) != blacklist_aria_roles.end():             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_5 = (!__pyx_v_role_attr.empty());
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L68_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_v_15resiliparse_dom_7extract_9html2text_blacklist_aria_roles.find(((std::string)__pyx_v_role_attr)) != __pyx_v_15resiliparse_dom_7extract_9html2text_blacklist_aria_roles.end());
  __pyx_t_1 = __pyx_t_5;
  __pyx_L68_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":666
 *         return True
 *     if not role_attr.empty() and blacklist_aria_roles.find(<string>role_attr) != blacklist_aria_roles.end():
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Whitelist article elements
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":665
 *     if rel_attr == b'main':
 *         return True
 *     if not role_attr.empty() and blacklist_aria_roles.find(<string>role_attr) != blacklist_aria_roles.end():             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":669
 * 
 *     # Whitelist article elements
 *     if regex_search_not_empty(cls_and_id_attr, article_cls_regex):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_article_cls_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":670
 *     # Whitelist article elements
 *     if regex_search_not_empty(cls_and_id_attr, article_cls_regex):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     # Global landmarks by ID
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":669
 * 
 *     # Whitelist article elements
 *     if regex_search_not_empty(cls_and_id_attr, article_cls_regex):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":673
 * 
 *     # Global landmarks by ID
 *     if regex_search_not_empty(id_attr, landmark_id_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_landmark_id_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":674
 *     # Global landmarks by ID
 *     if regex_search_not_empty(id_attr, landmark_id_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Global header
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":673
 * 
 *     # Global landmarks by ID
 *     if regex_search_not_empty(id_attr, landmark_id_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":677
 * 
 *     # Global header
 *     if regex_search_not_empty(cls_and_id_attr, header_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_header_cls_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":678
 *     # Global header
 *     if regex_search_not_empty(cls_and_id_attr, header_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Global footer
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":677
 * 
 *     # Global header
 *     if regex_search_not_empty(cls_and_id_attr, header_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":681
 * 
 *     # Global footer
 *     if regex_search_not_empty(cls_and_id_attr, footer_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_footer_cls_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":682
 *     # Global footer
 *     if regex_search_not_empty(cls_and_id_attr, footer_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Global navigation
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":681
 * 
 *     # Global footer
 *     if regex_search_not_empty(cls_and_id_attr, footer_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":685
 * 
 *     # Global navigation
 *     if regex_search_not_empty(cls_and_id_attr, nav_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_nav_cls_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":686
 *     # Global navigation
 *     if regex_search_not_empty(cls_and_id_attr, nav_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Recommended articles
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":685
 * 
 *     # Global navigation
 *     if regex_search_not_empty(cls_and_id_attr, nav_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":689
 * 
 *     # Recommended articles
 *     if regex_search_not_empty(cls_and_id_attr, recommended_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_recommended_cls_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":690
 *     # Recommended articles
 *     if regex_search_not_empty(cls_and_id_attr, recommended_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Comments section
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":689
 * 
 *     # Recommended articles
 *     if regex_search_not_empty(cls_and_id_attr, recommended_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":693
 * 
 *     # Comments section
 *     if not allow_comments and node.local_name and regex_search_not_empty(cls_and_id_attr, comments_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_5 = (!__pyx_v_allow_comments);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L77_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_v_node->local_name != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L77_bool_binop_done;
  }
  __pyx_t_5 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_comments_cls_regex);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L77_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":694
 *     # Comments section
 *     if not allow_comments and node.local_name and regex_search_not_empty(cls_and_id_attr, comments_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Global search bar
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":693
 * 
 *     # Comments section
 *     if not allow_comments and node.local_name and regex_search_not_empty(cls_and_id_attr, comments_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":697
 * 
 *     # Global search bar
 *     if regex_search_not_empty(cls_and_id_attr, search_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_search_cls_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":698
 *     # Global search bar
 *     if regex_search_not_empty(cls_and_id_attr, search_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Global sidebar
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":697
 * 
 *     # Global search bar
 *     if regex_search_not_empty(cls_and_id_attr, search_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":701
 * 
 *     # Global sidebar
 *     if regex_search_not_empty(cls_and_id_attr, sidebar_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_sidebar_cls_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":702
 *     # Global sidebar
 *     if regex_search_not_empty(cls_and_id_attr, sidebar_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Modals
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":701
 * 
 *     # Global sidebar
 *     if regex_search_not_empty(cls_and_id_attr, sidebar_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":705
 * 
 *     # Modals
 *     if regex_search_not_empty(cls_and_id_attr, modal_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_modal_cls_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":706
 *     # Modals
 *     if regex_search_not_empty(cls_and_id_attr, modal_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Image galleries and carousels
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":705
 * 
 *     # Modals
 *     if regex_search_not_empty(cls_and_id_attr, modal_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":709
 * 
 *     # Image galleries and carousels
 *     if regex_search_not_empty(cls_and_id_attr, gallery_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_gallery_cls_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":710
 *     # Image galleries and carousels
 *     if regex_search_not_empty(cls_and_id_attr, gallery_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     # Print content
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":709
 * 
 *     # Image galleries and carousels
 *     if regex_search_not_empty(cls_and_id_attr, gallery_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":713
 * 
 *     # Print content
 *     if regex_search_not_empty(cls_and_id_attr, print_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = __pyx_f_15resiliparse_dom_7extract_9html2text_regex_search_not_empty(__pyx_v_cls_and_id_attr, __pyx_v_15resiliparse_dom_7extract_9html2text_print_cls_regex);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":714
 *     # Print content
 *     if regex_search_not_empty(cls_and_id_attr, print_cls_regex):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     if body_depth > 2 and node.local_name == LXB_TAG_DIV and _is_link_cluster(node, 0.6, 1500):
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":713
 * 
 *     # Print content
 *     if regex_search_not_empty(cls_and_id_attr, print_cls_regex):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":716
 *         return False
 * 
 *     if body_depth > 2 and node.local_name == LXB_TAG_DIV and _is_link_cluster(node, 0.6, 1500):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_5 = (__pyx_v_body_depth > 2);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L86_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_v_node->local_name == LXB_TAG_DIV);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L86_bool_binop_done;
  }
  __pyx_t_5 = __pyx_f_15resiliparse_dom_7extract_9html2text__is_link_cluster(__pyx_v_node, 0.6, 0x5DC);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L86_bool_binop_done:;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":717
 * 
 *     if body_depth > 2 and node.local_name == LXB_TAG_DIV and _is_link_cluster(node, 0.6, 1500):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":716
 *         return False
 * 
 *     if body_depth > 2 and node.local_name == LXB_TAG_DIV and _is_link_cluster(node, 0.6, 1500):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":719
 *         return False
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":528
 * 
 * # noinspection DuplicatedCode
 * cdef inline bint _is_main_content_node(lxb_dom_node_t* node, size_t body_depth, bint allow_comments) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Perform a rule-based check whether the given element is a "main-content" element.
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._is_main_content_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":722
 * 
 * 
 * cdef inline lxb_status_t _exists_cb(lxb_dom_node_t *node, lxb_css_selector_specificity_t *spec, void *ctx) noexcept nogil:             # <<<<<<<<<<<<<<
 *     (<bint*>ctx)[0] = True
 *     return LXB_STATUS_STOP
 */

static CYTHON_INLINE lxb_status_t __pyx_f_15resiliparse_dom_7extract_9html2text__exists_cb(CYTHON_UNUSED lxb_dom_node_t *__pyx_v_node, CYTHON_UNUSED lxb_css_selector_specificity_t *__pyx_v_spec, void *__pyx_v_ctx) {
  lxb_status_t __pyx_r;

  /* "resiliparse_dom/extract/html2text.pyx":723
 * 
 * cdef inline lxb_status_t _exists_cb(lxb_dom_node_t *node, lxb_css_selector_specificity_t *spec, void *ctx) noexcept nogil:
 *     (<bint*>ctx)[0] = True             # <<<<<<<<<<<<<<
 *     return LXB_STATUS_STOP
 * 
 */
  (((int *)__pyx_v_ctx)[0]) = 1;

  /* "resiliparse_dom/extract/html2text.pyx":724
 * cdef inline lxb_status_t _exists_cb(lxb_dom_node_t *node, lxb_css_selector_specificity_t *spec, void *ctx) noexcept nogil:
 *     (<bint*>ctx)[0] = True
 *     return LXB_STATUS_STOP             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = LXB_STATUS_STOP;
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":722
 * 
 * 
 * cdef inline lxb_status_t _exists_cb(lxb_dom_node_t *node, lxb_css_selector_specificity_t *spec, void *ctx) noexcept nogil:             # <<<<<<<<<<<<<<
 *     (<bint*>ctx)[0] = True
 *     return LXB_STATUS_STOP
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":727
 * 
 * 
 * cdef string serialize_node(lxb_dom_node_t* node) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Serialize a DOM node to a C++ std::string without requiring the GIL.
 */

static std::string __pyx_f_15resiliparse_dom_7extract_9html2text_serialize_node(lxb_dom_node_t *__pyx_v_node) {
  lexbor_str_t *__pyx_v_serialized_str;
  lxb_status_t __pyx_v_status;
  std::string __pyx_v_html_str;
  std::string __pyx_r;
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":732
 *     Returns an empty string if serialization fails.
 *     """
 *     if node is NULL:             # <<<<<<<<<<<<<<
 *         return string()
 * 
 */
  __pyx_t_1 = (__pyx_v_node == NULL);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":733
 *     """
 *     if node is NULL:
 *         return string()             # <<<<<<<<<<<<<<
 * 
 *     # Create a new Lexbor string
 */
    try {
      __pyx_t_2 = std::string();
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 733, __pyx_L1_error)
    }
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":732
 *     Returns an empty string if serialization fails.
 *     """
 *     if node is NULL:             # <<<<<<<<<<<<<<
 *         return string()
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":736
 * 
 *     # Create a new Lexbor string
 *     cdef lexbor_str_t* serialized_str = lexbor_str_create()             # <<<<<<<<<<<<<<
 *     if not serialized_str:
 *         return string()  # Return an empty C++ string
 */
  __pyx_v_serialized_str = lexbor_str_create();

  /* "resiliparse_dom/extract/html2text.pyx":737
 *     # Create a new Lexbor string
 *     cdef lexbor_str_t* serialized_str = lexbor_str_create()
 *     if not serialized_str:             # <<<<<<<<<<<<<<
 *         return string()  # Return an empty C++ string
 * 
 */
  __pyx_t_1 = (!(__pyx_v_serialized_str != 0));
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":738
 *     cdef lexbor_str_t* serialized_str = lexbor_str_create()
 *     if not serialized_str:
 *         return string()  # Return an empty C++ string             # <<<<<<<<<<<<<<
 * 
 *     # Serialize the DOM node into the Lexbor string
 */
    try {
      __pyx_t_2 = std::string();
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 738, __pyx_L1_error)
    }
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":737
 *     # Create a new Lexbor string
 *     cdef lexbor_str_t* serialized_str = lexbor_str_create()
 *     if not serialized_str:             # <<<<<<<<<<<<<<
 *         return string()  # Return an empty C++ string
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":741
 * 
 *     # Serialize the DOM node into the Lexbor string
 *     cdef lxb_status_t status = lxb_html_serialize_tree_str(node, serialized_str)             # <<<<<<<<<<<<<<
 * 
 *     if status != LXB_STATUS_OK:
 */
  __pyx_v_status = lxb_html_serialize_tree_str(__pyx_v_node, __pyx_v_serialized_str);

  /* "resiliparse_dom/extract/html2text.pyx":743
 *     cdef lxb_status_t status = lxb_html_serialize_tree_str(node, serialized_str)
 * 
 *     if status != LXB_STATUS_OK:             # <<<<<<<<<<<<<<
 *         lexbor_str_destroy(serialized_str, NULL, True)
 *         return string()
 */
  __pyx_t_1 = (__pyx_v_status != LXB_STATUS_OK);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":744
 * 
 *     if status != LXB_STATUS_OK:
 *         lexbor_str_destroy(serialized_str, NULL, True)             # <<<<<<<<<<<<<<
 *         return string()
 * 
 */
    (void)(lexbor_str_destroy(__pyx_v_serialized_str, NULL, 1));

    /* "resiliparse_dom/extract/html2text.pyx":745
 *     if status != LXB_STATUS_OK:
 *         lexbor_str_destroy(serialized_str, NULL, True)
 *         return string()             # <<<<<<<<<<<<<<
 * 
 *     # Convert the serialized data to a C++ std::string
 */
    try {
      __pyx_t_2 = std::string();
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 745, __pyx_L1_error)
    }
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":743
 *     cdef lxb_status_t status = lxb_html_serialize_tree_str(node, serialized_str)
 * 
 *     if status != LXB_STATUS_OK:             # <<<<<<<<<<<<<<
 *         lexbor_str_destroy(serialized_str, NULL, True)
 *         return string()
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":748
 * 
 *     # Convert the serialized data to a C++ std::string
 *     cdef string html_str = string(<const char*>serialized_str.data, serialized_str.length+1)             # <<<<<<<<<<<<<<
 * 
 *     # Clean up the Lexbor string
 */
  try {
    __pyx_t_2 = std::string(((char const *)__pyx_v_serialized_str->data), (__pyx_v_serialized_str->length + 1));
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 748, __pyx_L1_error)
  }
  __pyx_v_html_str = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "resiliparse_dom/extract/html2text.pyx":753
 *     # lexbor_str_destroy(serialized_str, NULL, True)
 * 
 *     return html_str             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_html_str;
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":727
 * 
 * 
 * cdef string serialize_node(lxb_dom_node_t* node) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Serialize a DOM node to a C++ std::string without requiring the GIL.
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("resiliparse_dom.extract.html2text.serialize_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":756
 * 
 * 
 * def extract_simplified_dom(html,             # <<<<<<<<<<<<<<
 *                           bint preserve_formatting=True,
 *                           bint main_content=False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_15resiliparse_dom_7extract_9html2text_1extract_simplified_dom(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_15resiliparse_dom_7extract_9html2text_extract_simplified_dom, "\n    extract_simplified_dom(html, preserve_formatting=True, main_content=False, list_bullets=True, alt_texts=False,                        links=True, form_fields=False, noscript=False, comments=None, skip_elements=None)\n\n    Perform a simplified DOM extraction from the given DOM node and follow same rules as extract_plain_text.\n    ");
static PyMethodDef __pyx_mdef_15resiliparse_dom_7extract_9html2text_1extract_simplified_dom = {"extract_simplified_dom", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_15resiliparse_dom_7extract_9html2text_1extract_simplified_dom, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_15resiliparse_dom_7extract_9html2text_extract_simplified_dom};
static PyObject *__pyx_pw_15resiliparse_dom_7extract_9html2text_1extract_simplified_dom(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_html = 0;
  CYTHON_UNUSED int __pyx_v_preserve_formatting;
  int __pyx_v_main_content;
  int __pyx_v_list_bullets;
  int __pyx_v_alt_texts;
  int __pyx_v_links;
  int __pyx_v_form_fields;
  int __pyx_v_noscript;
  int __pyx_v_comments;
  PyObject *__pyx_v_skip_elements = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extract_simplified_dom (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_html,&__pyx_n_s_preserve_formatting,&__pyx_n_s_main_content,&__pyx_n_s_list_bullets,&__pyx_n_s_alt_texts,&__pyx_n_s_links,&__pyx_n_s_form_fields,&__pyx_n_s_noscript,&__pyx_n_s_comments,&__pyx_n_s_skip_elements,0};

    /* "resiliparse_dom/extract/html2text.pyx":765
 *                           bint noscript=False,
 *                           bint comments=True,
 *                           skip_elements=None):             # <<<<<<<<<<<<<<
 *     """
 *     extract_simplified_dom(html, preserve_formatting=True, main_content=False, list_bullets=True, alt_texts=False, \
 */
    values[9] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_html)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_preserve_formatting);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_main_content);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_list_bullets);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_alt_texts);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_links);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_form_fields);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_noscript);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_comments);
          if (value) { values[8] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_skip_elements);
          if (value) { values[9] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "extract_simplified_dom") < 0)) __PYX_ERR(0, 756, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_html = values[0];
    if (values[1]) {
      __pyx_v_preserve_formatting = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_preserve_formatting == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 757, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":757
 * 
 * def extract_simplified_dom(html,
 *                           bint preserve_formatting=True,             # <<<<<<<<<<<<<<
 *                           bint main_content=False,
 *                           bint list_bullets=True,
 */
      __pyx_v_preserve_formatting = ((int)((int)1));
    }
    if (values[2]) {
      __pyx_v_main_content = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_main_content == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 758, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":758
 * def extract_simplified_dom(html,
 *                           bint preserve_formatting=True,
 *                           bint main_content=False,             # <<<<<<<<<<<<<<
 *                           bint list_bullets=True,
 *                           bint alt_texts=True,
 */
      __pyx_v_main_content = ((int)((int)0));
    }
    if (values[3]) {
      __pyx_v_list_bullets = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_list_bullets == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 759, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":759
 *                           bint preserve_formatting=True,
 *                           bint main_content=False,
 *                           bint list_bullets=True,             # <<<<<<<<<<<<<<
 *                           bint alt_texts=True,
 *                           bint links=False,
 */
      __pyx_v_list_bullets = ((int)((int)1));
    }
    if (values[4]) {
      __pyx_v_alt_texts = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_alt_texts == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":760
 *                           bint main_content=False,
 *                           bint list_bullets=True,
 *                           bint alt_texts=True,             # <<<<<<<<<<<<<<
 *                           bint links=False,
 *                           bint form_fields=False,
 */
      __pyx_v_alt_texts = ((int)((int)1));
    }
    if (values[5]) {
      __pyx_v_links = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_links == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":761
 *                           bint list_bullets=True,
 *                           bint alt_texts=True,
 *                           bint links=False,             # <<<<<<<<<<<<<<
 *                           bint form_fields=False,
 *                           bint noscript=False,
 */
      __pyx_v_links = ((int)((int)0));
    }
    if (values[6]) {
      __pyx_v_form_fields = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_form_fields == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":762
 *                           bint alt_texts=True,
 *                           bint links=False,
 *                           bint form_fields=False,             # <<<<<<<<<<<<<<
 *                           bint noscript=False,
 *                           bint comments=True,
 */
      __pyx_v_form_fields = ((int)((int)0));
    }
    if (values[7]) {
      __pyx_v_noscript = __Pyx_PyObject_IsTrue(values[7]); if (unlikely((__pyx_v_noscript == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":763
 *                           bint links=False,
 *                           bint form_fields=False,
 *                           bint noscript=False,             # <<<<<<<<<<<<<<
 *                           bint comments=True,
 *                           skip_elements=None):
 */
      __pyx_v_noscript = ((int)((int)0));
    }
    if (values[8]) {
      __pyx_v_comments = __Pyx_PyObject_IsTrue(values[8]); if (unlikely((__pyx_v_comments == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 764, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":764
 *                           bint form_fields=False,
 *                           bint noscript=False,
 *                           bint comments=True,             # <<<<<<<<<<<<<<
 *                           skip_elements=None):
 *     """
 */
      __pyx_v_comments = ((int)((int)1));
    }
    __pyx_v_skip_elements = values[9];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extract_simplified_dom", 0, 1, 10, __pyx_nargs); __PYX_ERR(0, 756, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("resiliparse_dom.extract.html2text.extract_simplified_dom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15resiliparse_dom_7extract_9html2text_extract_simplified_dom(__pyx_self, __pyx_v_html, __pyx_v_preserve_formatting, __pyx_v_main_content, __pyx_v_list_bullets, __pyx_v_alt_texts, __pyx_v_links, __pyx_v_form_fields, __pyx_v_noscript, __pyx_v_comments, __pyx_v_skip_elements);

  /* "resiliparse_dom/extract/html2text.pyx":756
 * 
 * 
 * def extract_simplified_dom(html,             # <<<<<<<<<<<<<<
 *                           bint preserve_formatting=True,
 *                           bint main_content=False,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15resiliparse_dom_7extract_9html2text_extract_simplified_dom(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_html, CYTHON_UNUSED int __pyx_v_preserve_formatting, int __pyx_v_main_content, int __pyx_v_list_bullets, int __pyx_v_alt_texts, int __pyx_v_links, int __pyx_v_form_fields, int __pyx_v_noscript, int __pyx_v_comments, PyObject *__pyx_v_skip_elements) {
  struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *__pyx_v_tree = 0;
  PyObject *__pyx_v_skip_selectors = NULL;
  std::string __pyx_v_skip_selector;
  std::string __pyx_v_extracted;
  PyObject *__pyx_7genexpr__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  std::string __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_simplified_dom", 1);

  /* "resiliparse_dom/extract/html2text.pyx":773
 *     """
 *     cdef HTMLTree tree
 *     if isinstance(html, str):             # <<<<<<<<<<<<<<
 *         tree = HTMLTree.parse(html)
 *     elif isinstance(html, HTMLTree):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_html); 
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":774
 *     cdef HTMLTree tree
 *     if isinstance(html, str):
 *         tree = HTMLTree.parse(html)             # <<<<<<<<<<<<<<
 *     elif isinstance(html, HTMLTree):
 *         tree = <HTMLTree>html
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree), __pyx_n_s_parse); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_html};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree))))) __PYX_ERR(0, 774, __pyx_L1_error)
    __pyx_v_tree = ((struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "resiliparse_dom/extract/html2text.pyx":773
 *     """
 *     cdef HTMLTree tree
 *     if isinstance(html, str):             # <<<<<<<<<<<<<<
 *         tree = HTMLTree.parse(html)
 *     elif isinstance(html, HTMLTree):
 */
    goto __pyx_L3;
  }

  /* "resiliparse_dom/extract/html2text.pyx":775
 *     if isinstance(html, str):
 *         tree = HTMLTree.parse(html)
 *     elif isinstance(html, HTMLTree):             # <<<<<<<<<<<<<<
 *         tree = <HTMLTree>html
 *     else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_html, __pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree); 
  if (likely(__pyx_t_1)) {

    /* "resiliparse_dom/extract/html2text.pyx":776
 *         tree = HTMLTree.parse(html)
 *     elif isinstance(html, HTMLTree):
 *         tree = <HTMLTree>html             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError('Parameter "html" is neither string nor HTMLTree.')
 */
    __pyx_t_2 = __pyx_v_html;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_tree = ((struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "resiliparse_dom/extract/html2text.pyx":775
 *     if isinstance(html, str):
 *         tree = HTMLTree.parse(html)
 *     elif isinstance(html, HTMLTree):             # <<<<<<<<<<<<<<
 *         tree = <HTMLTree>html
 *     else:
 */
    goto __pyx_L3;
  }

  /* "resiliparse_dom/extract/html2text.pyx":778
 *         tree = <HTMLTree>html
 *     else:
 *         raise TypeError('Parameter "html" is neither string nor HTMLTree.')             # <<<<<<<<<<<<<<
 * 
 *     if not check_node(tree.body):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 778, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "resiliparse_dom/extract/html2text.pyx":780
 *         raise TypeError('Parameter "html" is neither string nor HTMLTree.')
 * 
 *     if not check_node(tree.body):             # <<<<<<<<<<<<<<
 *         return ''
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tree), __pyx_n_s_body); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_15resiliparse_dom_5parse_4html_DOMNode))))) __PYX_ERR(0, 780, __pyx_L1_error)
  __pyx_t_1 = (!__pyx_f_15resiliparse_dom_5parse_4html_check_node(((struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *)__pyx_t_2)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":781
 * 
 *     if not check_node(tree.body):
 *         return ''             # <<<<<<<<<<<<<<
 * 
 *     skip_selectors = {e.encode() for e in skip_elements or []}
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_u__2);
    __pyx_r = __pyx_kp_u__2;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":780
 *         raise TypeError('Parameter "html" is neither string nor HTMLTree.')
 * 
 *     if not check_node(tree.body):             # <<<<<<<<<<<<<<
 *         return ''
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":783
 *         return ''
 * 
 *     skip_selectors = {e.encode() for e in skip_elements or []}             # <<<<<<<<<<<<<<
 *     skip_selectors.update({b'script', b'style', b'iframe', b'frame', b'template'})
 * 
 */
  { /* enter inner scope */
    __pyx_t_2 = PySet_New(NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_skip_elements); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 783, __pyx_L7_error)
    if (!__pyx_t_1) {
    } else {
      __Pyx_INCREF(__pyx_v_skip_elements);
      __pyx_t_3 = __pyx_v_skip_elements;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 783, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_L10_bool_binop_done:;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 783, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 783, __pyx_L7_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 783, __pyx_L7_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 783, __pyx_L7_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 783, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 783, __pyx_L7_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 783, __pyx_L7_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 783, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 783, __pyx_L7_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_e, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_e, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 783, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 783, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      if (unlikely(PySet_Add(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 783, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_e); __pyx_7genexpr__pyx_v_e = 0;
    goto __pyx_L13_exit_scope;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_e); __pyx_7genexpr__pyx_v_e = 0;
    goto __pyx_L1_error;
    __pyx_L13_exit_scope:;
  } /* exit inner scope */
  __pyx_v_skip_selectors = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "resiliparse_dom/extract/html2text.pyx":784
 * 
 *     skip_selectors = {e.encode() for e in skip_elements or []}
 *     skip_selectors.update({b'script', b'style', b'iframe', b'frame', b'template'})             # <<<<<<<<<<<<<<
 * 
 *     if not alt_texts:
 */
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PySet_Add(__pyx_t_2, __pyx_n_b_script) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_n_b_style) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_n_b_iframe) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_n_b_frame) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_n_b_template) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_v_skip_selectors, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "resiliparse_dom/extract/html2text.pyx":786
 *     skip_selectors.update({b'script', b'style', b'iframe', b'frame', b'template'})
 * 
 *     if not alt_texts:             # <<<<<<<<<<<<<<
 *         skip_selectors.update({b'object', b'video', b'audio', b'embed', b'img', b'area',
 *                                b'svg', b'figcaption', b'figure'})
 */
  __pyx_t_1 = (!__pyx_v_alt_texts);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":787
 * 
 *     if not alt_texts:
 *         skip_selectors.update({b'object', b'video', b'audio', b'embed', b'img', b'area',             # <<<<<<<<<<<<<<
 *                                b'svg', b'figcaption', b'figure'})
 *     if not noscript:
 */
    __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PySet_Add(__pyx_t_4, __pyx_n_b_object) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_video) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_audio) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_embed) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_img) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_area) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_svg) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_figcaption) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_figure) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
    __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_v_skip_selectors, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "resiliparse_dom/extract/html2text.pyx":786
 *     skip_selectors.update({b'script', b'style', b'iframe', b'frame', b'template'})
 * 
 *     if not alt_texts:             # <<<<<<<<<<<<<<
 *         skip_selectors.update({b'object', b'video', b'audio', b'embed', b'img', b'area',
 *                                b'svg', b'figcaption', b'figure'})
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":789
 *         skip_selectors.update({b'object', b'video', b'audio', b'embed', b'img', b'area',
 *                                b'svg', b'figcaption', b'figure'})
 *     if not noscript:             # <<<<<<<<<<<<<<
 *         skip_selectors.add(b'noscript')
 *     if not form_fields:
 */
  __pyx_t_1 = (!__pyx_v_noscript);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":790
 *                                b'svg', b'figcaption', b'figure'})
 *     if not noscript:
 *         skip_selectors.add(b'noscript')             # <<<<<<<<<<<<<<
 *     if not form_fields:
 *         skip_selectors.update({b'textarea', b'input', b'button', b'select', b'option', b'label', })
 */
    __pyx_t_10 = PySet_Add(__pyx_v_skip_selectors, __pyx_n_b_noscript); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 790, __pyx_L1_error)

    /* "resiliparse_dom/extract/html2text.pyx":789
 *         skip_selectors.update({b'object', b'video', b'audio', b'embed', b'img', b'area',
 *                                b'svg', b'figcaption', b'figure'})
 *     if not noscript:             # <<<<<<<<<<<<<<
 *         skip_selectors.add(b'noscript')
 *     if not form_fields:
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":791
 *     if not noscript:
 *         skip_selectors.add(b'noscript')
 *     if not form_fields:             # <<<<<<<<<<<<<<
 *         skip_selectors.update({b'textarea', b'input', b'button', b'select', b'option', b'label', })
 * 
 */
  __pyx_t_1 = (!__pyx_v_form_fields);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":792
 *         skip_selectors.add(b'noscript')
 *     if not form_fields:
 *         skip_selectors.update({b'textarea', b'input', b'button', b'select', b'option', b'label', })             # <<<<<<<<<<<<<<
 * 
 *     cdef string skip_selector = <string>b','.join(skip_selectors)
 */
    __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PySet_Add(__pyx_t_2, __pyx_n_b_textarea) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
    if (PySet_Add(__pyx_t_2, __pyx_n_b_input) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
    if (PySet_Add(__pyx_t_2, __pyx_n_b_button) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
    if (PySet_Add(__pyx_t_2, __pyx_n_b_select) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
    if (PySet_Add(__pyx_t_2, __pyx_n_b_option) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
    if (PySet_Add(__pyx_t_2, __pyx_n_b_label) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
    __pyx_t_4 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_v_skip_selectors, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "resiliparse_dom/extract/html2text.pyx":791
 *     if not noscript:
 *         skip_selectors.add(b'noscript')
 *     if not form_fields:             # <<<<<<<<<<<<<<
 *         skip_selectors.update({b'textarea', b'input', b'button', b'select', b'option', b'label', })
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":794
 *         skip_selectors.update({b'textarea', b'input', b'button', b'select', b'option', b'label', })
 * 
 *     cdef string skip_selector = <string>b','.join(skip_selectors)             # <<<<<<<<<<<<<<
 * 
 *     cdef string extracted
 */
  __pyx_t_4 = __Pyx_PyBytes_Join(__pyx_kp_b__3, __pyx_v_skip_selectors); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_skip_selector = ((std::string)__pyx_t_11);

  /* "resiliparse_dom/extract/html2text.pyx":797
 * 
 *     cdef string extracted
 *     with nogil:             # <<<<<<<<<<<<<<
 *         extracted = _extract_simplified_dom_impl(
 *             tree,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "resiliparse_dom/extract/html2text.pyx":798
 *     cdef string extracted
 *     with nogil:
 *         extracted = _extract_simplified_dom_impl(             # <<<<<<<<<<<<<<
 *             tree,
 *             FormattingOpts.FORMAT_OFF,
 */
        __pyx_v_extracted = __pyx_f_15resiliparse_dom_7extract_9html2text__extract_simplified_dom_impl(__pyx_v_tree, FORMAT_OFF, __pyx_v_main_content, __pyx_v_list_bullets, __pyx_v_alt_texts, __pyx_v_links, __pyx_v_form_fields, __pyx_v_noscript, __pyx_v_comments, __pyx_v_skip_selector);
      }

      /* "resiliparse_dom/extract/html2text.pyx":797
 * 
 *     cdef string extracted
 *     with nogil:             # <<<<<<<<<<<<<<
 *         extracted = _extract_simplified_dom_impl(
 *             tree,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L19;
        }
        __pyx_L19:;
      }
  }

  /* "resiliparse_dom/extract/html2text.pyx":809
 *             comments,
 *             skip_selector)
 *     return extracted.decode(errors='ignore').replace('\x00', '')             # <<<<<<<<<<<<<<
 * 
 * cdef string _extract_simplified_dom_impl(HTMLTree tree,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(__pyx_v_extracted); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_errors, __pyx_n_u_ignore) < 0) __PYX_ERR(0, 809, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_replace); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":756
 * 
 * 
 * def extract_simplified_dom(html,             # <<<<<<<<<<<<<<
 *                           bint preserve_formatting=True,
 *                           bint main_content=False,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("resiliparse_dom.extract.html2text.extract_simplified_dom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tree);
  __Pyx_XDECREF(__pyx_v_skip_selectors);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":811
 *     return extracted.decode(errors='ignore').replace('\x00', '')
 * 
 * cdef string _extract_simplified_dom_impl(HTMLTree tree,             # <<<<<<<<<<<<<<
 *                                        FormattingOpts preserve_formatting,
 *                                        bint main_content,
 */

static std::string __pyx_f_15resiliparse_dom_7extract_9html2text__extract_simplified_dom_impl(struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *__pyx_v_tree, FormattingOpts __pyx_v_preserve_formatting, int __pyx_v_main_content, int __pyx_v_list_bullets, int __pyx_v_alt_texts, int __pyx_v_links, int __pyx_v_form_fields, int __pyx_v_noscript, CYTHON_UNUSED int __pyx_v_comments, std::string __pyx_v_skip_selector) {
  struct ExtractContext __pyx_v_ctx;
  size_t __pyx_v_base_depth;
  lxb_dom_node_t *__pyx_v_pnode;
  lxb_dom_collection_t *__pyx_v_blacklist_coll;
  std::set<lxb_dom_node_t *>  __pyx_v_blacklisted_nodes;
  lxb_dom_node_t *__pyx_v_node;
  lxb_dom_node_t *__pyx_v_descendant;
  size_t __pyx_v_i;
  CYTHON_UNUSED int __pyx_v_is_end_tag;
  lxb_dom_node_t *__pyx_v_current;
  lxb_dom_node_t *__pyx_v_next_node;
  lxb_dom_node_t *__pyx_v_parent;
  lxb_dom_node_t *__pyx_v_child;
  lxb_dom_node_t *__pyx_v_next_child;
  size_t __pyx_v_depth;
  std::string __pyx_r;
  lxb_dom_node_t *__pyx_t_1;
  struct ExtractOpts __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  lxb_dom_collection_t *__pyx_t_5;
  struct __pyx_opt_args_15resiliparse_dom_5parse_4html_query_selector_all_impl __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  std::string __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":825
 *     # Initialize context similar to plain text extraction
 *     cdef ExtractContext ctx
 *     ctx.root_node = <lxb_dom_node_t*>tree.dom_document.body             # <<<<<<<<<<<<<<
 *     ctx.node = ctx.root_node
 *     ctx.opts = [
 */
  __pyx_v_ctx.root_node = ((lxb_dom_node_t *)__pyx_v_tree->dom_document->body);

  /* "resiliparse_dom/extract/html2text.pyx":826
 *     cdef ExtractContext ctx
 *     ctx.root_node = <lxb_dom_node_t*>tree.dom_document.body
 *     ctx.node = ctx.root_node             # <<<<<<<<<<<<<<
 *     ctx.opts = [
 *         preserve_formatting,
 */
  __pyx_t_1 = __pyx_v_ctx.root_node;
  __pyx_v_ctx.node = __pyx_t_1;

  /* "resiliparse_dom/extract/html2text.pyx":827
 *     ctx.root_node = <lxb_dom_node_t*>tree.dom_document.body
 *     ctx.node = ctx.root_node
 *     ctx.opts = [             # <<<<<<<<<<<<<<
 *         preserve_formatting,
 *         list_bullets,
 */
  __pyx_t_2.preserve_formatting = __pyx_v_preserve_formatting;
  __pyx_t_2.list_bullets = __pyx_v_list_bullets;
  __pyx_t_2.links = __pyx_v_links;
  __pyx_t_2.alt_texts = __pyx_v_alt_texts;
  __pyx_t_2.form_fields = __pyx_v_form_fields;
  __pyx_t_2.noscript = __pyx_v_noscript;
  __pyx_v_ctx.opts = __pyx_t_2;

  /* "resiliparse_dom/extract/html2text.pyx":835
 *         noscript]
 * 
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_DOCUMENT:             # <<<<<<<<<<<<<<
 *         ctx.root_node = next_element_node(ctx.node, ctx.node.first_child)
 *         ctx.node = ctx.root_node
 */
  __pyx_t_3 = (__pyx_v_ctx.node->type == LXB_DOM_NODE_TYPE_DOCUMENT);
  if (__pyx_t_3) {

    /* "resiliparse_dom/extract/html2text.pyx":836
 * 
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_DOCUMENT:
 *         ctx.root_node = next_element_node(ctx.node, ctx.node.first_child)             # <<<<<<<<<<<<<<
 *         ctx.node = ctx.root_node
 * 
 */
    __pyx_v_ctx.root_node = __pyx_f_15resiliparse_dom_5parse_4html_next_element_node(__pyx_v_ctx.node, __pyx_v_ctx.node->first_child, NULL);

    /* "resiliparse_dom/extract/html2text.pyx":837
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_DOCUMENT:
 *         ctx.root_node = next_element_node(ctx.node, ctx.node.first_child)
 *         ctx.node = ctx.root_node             # <<<<<<<<<<<<<<
 * 
 *     # Calculate base depth
 */
    __pyx_t_1 = __pyx_v_ctx.root_node;
    __pyx_v_ctx.node = __pyx_t_1;

    /* "resiliparse_dom/extract/html2text.pyx":835
 *         noscript]
 * 
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_DOCUMENT:             # <<<<<<<<<<<<<<
 *         ctx.root_node = next_element_node(ctx.node, ctx.node.first_child)
 *         ctx.node = ctx.root_node
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":840
 * 
 *     # Calculate base depth
 *     cdef size_t base_depth = 0             # <<<<<<<<<<<<<<
 *     cdef lxb_dom_node_t* pnode = ctx.node
 *     while pnode.local_name != LXB_TAG_BODY and pnode.parent:
 */
  __pyx_v_base_depth = 0;

  /* "resiliparse_dom/extract/html2text.pyx":841
 *     # Calculate base depth
 *     cdef size_t base_depth = 0
 *     cdef lxb_dom_node_t* pnode = ctx.node             # <<<<<<<<<<<<<<
 *     while pnode.local_name != LXB_TAG_BODY and pnode.parent:
 *         preinc(base_depth)
 */
  __pyx_t_1 = __pyx_v_ctx.node;
  __pyx_v_pnode = __pyx_t_1;

  /* "resiliparse_dom/extract/html2text.pyx":842
 *     cdef size_t base_depth = 0
 *     cdef lxb_dom_node_t* pnode = ctx.node
 *     while pnode.local_name != LXB_TAG_BODY and pnode.parent:             # <<<<<<<<<<<<<<
 *         preinc(base_depth)
 *         pnode = pnode.parent
 */
  while (1) {
    __pyx_t_4 = (__pyx_v_pnode->local_name != LXB_TAG_BODY);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_pnode->parent != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L6_bool_binop_done:;
    if (!__pyx_t_3) break;

    /* "resiliparse_dom/extract/html2text.pyx":843
 *     cdef lxb_dom_node_t* pnode = ctx.node
 *     while pnode.local_name != LXB_TAG_BODY and pnode.parent:
 *         preinc(base_depth)             # <<<<<<<<<<<<<<
 *         pnode = pnode.parent
 * 
 */
    (void)((++__pyx_v_base_depth));

    /* "resiliparse_dom/extract/html2text.pyx":844
 *     while pnode.local_name != LXB_TAG_BODY and pnode.parent:
 *         preinc(base_depth)
 *         pnode = pnode.parent             # <<<<<<<<<<<<<<
 * 
 *     # Get blacklisted nodes using the skip selector
 */
    __pyx_t_1 = __pyx_v_pnode->parent;
    __pyx_v_pnode = __pyx_t_1;
  }

  /* "resiliparse_dom/extract/html2text.pyx":847
 * 
 *     # Get blacklisted nodes using the skip selector
 *     cdef lxb_dom_collection_t* blacklist_coll = NULL             # <<<<<<<<<<<<<<
 *     cdef stl_set[lxb_dom_node_t*] blacklisted_nodes
 *     cdef lxb_dom_node_t* node
 */
  __pyx_v_blacklist_coll = NULL;

  /* "resiliparse_dom/extract/html2text.pyx":852
 *     cdef lxb_dom_node_t* descendant
 * 
 *     if skip_selector.size() > 0:             # <<<<<<<<<<<<<<
 *         blacklist_coll = query_selector_all_impl(ctx.root_node, tree,
 *                                                skip_selector.data(), skip_selector.size(), 30)
 */
  __pyx_t_3 = (__pyx_v_skip_selector.size() > 0);
  if (__pyx_t_3) {

    /* "resiliparse_dom/extract/html2text.pyx":853
 * 
 *     if skip_selector.size() > 0:
 *         blacklist_coll = query_selector_all_impl(ctx.root_node, tree,             # <<<<<<<<<<<<<<
 *                                                skip_selector.data(), skip_selector.size(), 30)
 *         if blacklist_coll != NULL:
 */
    __pyx_t_6.__pyx_n = 1;
    __pyx_t_6.init_size = 30;
    __pyx_t_5 = __pyx_f_15resiliparse_dom_5parse_4html_query_selector_all_impl(__pyx_v_ctx.root_node, __pyx_v_tree, __pyx_v_skip_selector.data(), __pyx_v_skip_selector.size(), &__pyx_t_6); if (unlikely(__pyx_t_5 == ((lxb_dom_collection_t *)((lxb_dom_collection_t *)-1L)))) __PYX_ERR(0, 853, __pyx_L1_error)
    __pyx_v_blacklist_coll = __pyx_t_5;

    /* "resiliparse_dom/extract/html2text.pyx":855
 *         blacklist_coll = query_selector_all_impl(ctx.root_node, tree,
 *                                                skip_selector.data(), skip_selector.size(), 30)
 *         if blacklist_coll != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(lxb_dom_collection_length(blacklist_coll)):
 *                 node = lxb_dom_collection_node(blacklist_coll, i)
 */
    __pyx_t_3 = (__pyx_v_blacklist_coll != NULL);
    if (__pyx_t_3) {

      /* "resiliparse_dom/extract/html2text.pyx":856
 *                                                skip_selector.data(), skip_selector.size(), 30)
 *         if blacklist_coll != NULL:
 *             for i in range(lxb_dom_collection_length(blacklist_coll)):             # <<<<<<<<<<<<<<
 *                 node = lxb_dom_collection_node(blacklist_coll, i)
 *                 blacklisted_nodes.insert(node)
 */
      __pyx_t_7 = lxb_dom_collection_length(__pyx_v_blacklist_coll);
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_i = __pyx_t_9;

        /* "resiliparse_dom/extract/html2text.pyx":857
 *         if blacklist_coll != NULL:
 *             for i in range(lxb_dom_collection_length(blacklist_coll)):
 *                 node = lxb_dom_collection_node(blacklist_coll, i)             # <<<<<<<<<<<<<<
 *                 blacklisted_nodes.insert(node)
 *                 # Also blacklist all descendants
 */
        __pyx_v_node = lxb_dom_collection_node(__pyx_v_blacklist_coll, __pyx_v_i);

        /* "resiliparse_dom/extract/html2text.pyx":858
 *             for i in range(lxb_dom_collection_length(blacklist_coll)):
 *                 node = lxb_dom_collection_node(blacklist_coll, i)
 *                 blacklisted_nodes.insert(node)             # <<<<<<<<<<<<<<
 *                 # Also blacklist all descendants
 *                 descendant = node.first_child
 */
        try {
          __pyx_v_blacklisted_nodes.insert(__pyx_v_node);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 858, __pyx_L1_error)
        }

        /* "resiliparse_dom/extract/html2text.pyx":860
 *                 blacklisted_nodes.insert(node)
 *                 # Also blacklist all descendants
 *                 descendant = node.first_child             # <<<<<<<<<<<<<<
 *                 while descendant:
 *                     blacklisted_nodes.insert(descendant)
 */
        __pyx_t_1 = __pyx_v_node->first_child;
        __pyx_v_descendant = __pyx_t_1;

        /* "resiliparse_dom/extract/html2text.pyx":861
 *                 # Also blacklist all descendants
 *                 descendant = node.first_child
 *                 while descendant:             # <<<<<<<<<<<<<<
 *                     blacklisted_nodes.insert(descendant)
 *                     descendant = next_element_node(node, descendant)
 */
        while (1) {
          __pyx_t_3 = (__pyx_v_descendant != 0);
          if (!__pyx_t_3) break;

          /* "resiliparse_dom/extract/html2text.pyx":862
 *                 descendant = node.first_child
 *                 while descendant:
 *                     blacklisted_nodes.insert(descendant)             # <<<<<<<<<<<<<<
 *                     descendant = next_element_node(node, descendant)
 *             lxb_dom_collection_destroy(blacklist_coll, True)
 */
          try {
            __pyx_v_blacklisted_nodes.insert(__pyx_v_descendant);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 862, __pyx_L1_error)
          }

          /* "resiliparse_dom/extract/html2text.pyx":863
 *                 while descendant:
 *                     blacklisted_nodes.insert(descendant)
 *                     descendant = next_element_node(node, descendant)             # <<<<<<<<<<<<<<
 *             lxb_dom_collection_destroy(blacklist_coll, True)
 * 
 */
          __pyx_v_descendant = __pyx_f_15resiliparse_dom_5parse_4html_next_element_node(__pyx_v_node, __pyx_v_descendant, NULL);
        }
      }

      /* "resiliparse_dom/extract/html2text.pyx":864
 *                     blacklisted_nodes.insert(descendant)
 *                     descendant = next_element_node(node, descendant)
 *             lxb_dom_collection_destroy(blacklist_coll, True)             # <<<<<<<<<<<<<<
 * 
 *     # Modified traversal logic
 */
      (void)(lxb_dom_collection_destroy(__pyx_v_blacklist_coll, 1));

      /* "resiliparse_dom/extract/html2text.pyx":855
 *         blacklist_coll = query_selector_all_impl(ctx.root_node, tree,
 *                                                skip_selector.data(), skip_selector.size(), 30)
 *         if blacklist_coll != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(lxb_dom_collection_length(blacklist_coll)):
 *                 node = lxb_dom_collection_node(blacklist_coll, i)
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":852
 *     cdef lxb_dom_node_t* descendant
 * 
 *     if skip_selector.size() > 0:             # <<<<<<<<<<<<<<
 *         blacklist_coll = query_selector_all_impl(ctx.root_node, tree,
 *                                                skip_selector.data(), skip_selector.size(), 30)
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":867
 * 
 *     # Modified traversal logic
 *     cdef bint is_end_tag = False             # <<<<<<<<<<<<<<
 *     cdef lxb_dom_node_t* current = ctx.root_node
 *     cdef lxb_dom_node_t* next_node = NULL
 */
  __pyx_v_is_end_tag = 0;

  /* "resiliparse_dom/extract/html2text.pyx":868
 *     # Modified traversal logic
 *     cdef bint is_end_tag = False
 *     cdef lxb_dom_node_t* current = ctx.root_node             # <<<<<<<<<<<<<<
 *     cdef lxb_dom_node_t* next_node = NULL
 *     cdef lxb_dom_node_t* parent = NULL
 */
  __pyx_t_1 = __pyx_v_ctx.root_node;
  __pyx_v_current = __pyx_t_1;

  /* "resiliparse_dom/extract/html2text.pyx":869
 *     cdef bint is_end_tag = False
 *     cdef lxb_dom_node_t* current = ctx.root_node
 *     cdef lxb_dom_node_t* next_node = NULL             # <<<<<<<<<<<<<<
 *     cdef lxb_dom_node_t* parent = NULL
 *     cdef const lxb_char_t* tag_name
 */
  __pyx_v_next_node = NULL;

  /* "resiliparse_dom/extract/html2text.pyx":870
 *     cdef lxb_dom_node_t* current = ctx.root_node
 *     cdef lxb_dom_node_t* next_node = NULL
 *     cdef lxb_dom_node_t* parent = NULL             # <<<<<<<<<<<<<<
 *     cdef const lxb_char_t* tag_name
 *     cdef size_t tag_name_len
 */
  __pyx_v_parent = NULL;

  /* "resiliparse_dom/extract/html2text.pyx":873
 *     cdef const lxb_char_t* tag_name
 *     cdef size_t tag_name_len
 *     cdef lxb_dom_node_t* child = NULL             # <<<<<<<<<<<<<<
 *     cdef lxb_dom_node_t* next_child = NULL
 *     cdef size_t depth = 0
 */
  __pyx_v_child = NULL;

  /* "resiliparse_dom/extract/html2text.pyx":874
 *     cdef size_t tag_name_len
 *     cdef lxb_dom_node_t* child = NULL
 *     cdef lxb_dom_node_t* next_child = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t depth = 0
 * 
 */
  __pyx_v_next_child = NULL;

  /* "resiliparse_dom/extract/html2text.pyx":875
 *     cdef lxb_dom_node_t* child = NULL
 *     cdef lxb_dom_node_t* next_child = NULL
 *     cdef size_t depth = 0             # <<<<<<<<<<<<<<
 * 
 *     while current:
 */
  __pyx_v_depth = 0;

  /* "resiliparse_dom/extract/html2text.pyx":877
 *     cdef size_t depth = 0
 * 
 *     while current:             # <<<<<<<<<<<<<<
 *         # Store the next node before potentially removing current
 *         parent = current.parent
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_current != 0);
    if (!__pyx_t_3) break;

    /* "resiliparse_dom/extract/html2text.pyx":879
 *     while current:
 *         # Store the next node before potentially removing current
 *         parent = current.parent             # <<<<<<<<<<<<<<
 * 
 *         # Determine next node in traversal order
 */
    __pyx_t_1 = __pyx_v_current->parent;
    __pyx_v_parent = __pyx_t_1;

    /* "resiliparse_dom/extract/html2text.pyx":882
 * 
 *         # Determine next node in traversal order
 *         if current.first_child:             # <<<<<<<<<<<<<<
 *             next_node = current.first_child
 *         elif current.next:
 */
    __pyx_t_3 = (__pyx_v_current->first_child != 0);
    if (__pyx_t_3) {

      /* "resiliparse_dom/extract/html2text.pyx":883
 *         # Determine next node in traversal order
 *         if current.first_child:
 *             next_node = current.first_child             # <<<<<<<<<<<<<<
 *         elif current.next:
 *             next_node = current.next
 */
      __pyx_t_1 = __pyx_v_current->first_child;
      __pyx_v_next_node = __pyx_t_1;

      /* "resiliparse_dom/extract/html2text.pyx":882
 * 
 *         # Determine next node in traversal order
 *         if current.first_child:             # <<<<<<<<<<<<<<
 *             next_node = current.first_child
 *         elif current.next:
 */
      goto __pyx_L16;
    }

    /* "resiliparse_dom/extract/html2text.pyx":884
 *         if current.first_child:
 *             next_node = current.first_child
 *         elif current.next:             # <<<<<<<<<<<<<<
 *             next_node = current.next
 *         else:
 */
    __pyx_t_3 = (__pyx_v_current->next != 0);
    if (__pyx_t_3) {

      /* "resiliparse_dom/extract/html2text.pyx":885
 *             next_node = current.first_child
 *         elif current.next:
 *             next_node = current.next             # <<<<<<<<<<<<<<
 *         else:
 *             next_node = parent
 */
      __pyx_t_1 = __pyx_v_current->next;
      __pyx_v_next_node = __pyx_t_1;

      /* "resiliparse_dom/extract/html2text.pyx":884
 *         if current.first_child:
 *             next_node = current.first_child
 *         elif current.next:             # <<<<<<<<<<<<<<
 *             next_node = current.next
 *         else:
 */
      goto __pyx_L16;
    }

    /* "resiliparse_dom/extract/html2text.pyx":887
 *             next_node = current.next
 *         else:
 *             next_node = parent             # <<<<<<<<<<<<<<
 *             while next_node and not next_node.next:
 *                 next_node = next_node.parent
 */
    /*else*/ {
      __pyx_v_next_node = __pyx_v_parent;

      /* "resiliparse_dom/extract/html2text.pyx":888
 *         else:
 *             next_node = parent
 *             while next_node and not next_node.next:             # <<<<<<<<<<<<<<
 *                 next_node = next_node.parent
 *             if next_node:
 */
      while (1) {
        __pyx_t_4 = (__pyx_v_next_node != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_3 = __pyx_t_4;
          goto __pyx_L19_bool_binop_done;
        }
        __pyx_t_4 = (!(__pyx_v_next_node->next != 0));
        __pyx_t_3 = __pyx_t_4;
        __pyx_L19_bool_binop_done:;
        if (!__pyx_t_3) break;

        /* "resiliparse_dom/extract/html2text.pyx":889
 *             next_node = parent
 *             while next_node and not next_node.next:
 *                 next_node = next_node.parent             # <<<<<<<<<<<<<<
 *             if next_node:
 *                 next_node = next_node.next
 */
        __pyx_t_1 = __pyx_v_next_node->parent;
        __pyx_v_next_node = __pyx_t_1;
      }

      /* "resiliparse_dom/extract/html2text.pyx":890
 *             while next_node and not next_node.next:
 *                 next_node = next_node.parent
 *             if next_node:             # <<<<<<<<<<<<<<
 *                 next_node = next_node.next
 * 
 */
      __pyx_t_3 = (__pyx_v_next_node != 0);
      if (__pyx_t_3) {

        /* "resiliparse_dom/extract/html2text.pyx":891
 *                 next_node = next_node.parent
 *             if next_node:
 *                 next_node = next_node.next             # <<<<<<<<<<<<<<
 * 
 *         # Process node
 */
        __pyx_t_1 = __pyx_v_next_node->next;
        __pyx_v_next_node = __pyx_t_1;

        /* "resiliparse_dom/extract/html2text.pyx":890
 *             while next_node and not next_node.next:
 *                 next_node = next_node.parent
 *             if next_node:             # <<<<<<<<<<<<<<
 *                 next_node = next_node.next
 * 
 */
      }
    }
    __pyx_L16:;

    /* "resiliparse_dom/extract/html2text.pyx":894
 * 
 *         # Process node
 *         if current.type != LXB_DOM_NODE_TYPE_ELEMENT and current.type != LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *             lxb_dom_node_remove(current)
 *         elif blacklisted_nodes.find(current) != blacklisted_nodes.end() or \
 */
    switch (__pyx_v_current->type) {
      case LXB_DOM_NODE_TYPE_ELEMENT:
      case LXB_DOM_NODE_TYPE_TEXT:
      __pyx_t_3 = 0;
      break;
      default:
      __pyx_t_3 = 1;
      break;
    }
    if (__pyx_t_3) {

      /* "resiliparse_dom/extract/html2text.pyx":895
 *         # Process node
 *         if current.type != LXB_DOM_NODE_TYPE_ELEMENT and current.type != LXB_DOM_NODE_TYPE_TEXT:
 *             lxb_dom_node_remove(current)             # <<<<<<<<<<<<<<
 *         elif blacklisted_nodes.find(current) != blacklisted_nodes.end() or \
 *              (main_content and not _is_main_content_node(current, depth + base_depth, False)):
 */
      lxb_dom_node_remove(__pyx_v_current);

      /* "resiliparse_dom/extract/html2text.pyx":894
 * 
 *         # Process node
 *         if current.type != LXB_DOM_NODE_TYPE_ELEMENT and current.type != LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *             lxb_dom_node_remove(current)
 *         elif blacklisted_nodes.find(current) != blacklisted_nodes.end() or \
 */
      goto __pyx_L22;
    }

    /* "resiliparse_dom/extract/html2text.pyx":896
 *         if current.type != LXB_DOM_NODE_TYPE_ELEMENT and current.type != LXB_DOM_NODE_TYPE_TEXT:
 *             lxb_dom_node_remove(current)
 *         elif blacklisted_nodes.find(current) != blacklisted_nodes.end() or \             # <<<<<<<<<<<<<<
 *              (main_content and not _is_main_content_node(current, depth + base_depth, False)):
 *             # If we're about to remove a node that has children,
 */
    __pyx_t_4 = (__pyx_v_blacklisted_nodes.find(__pyx_v_current) != __pyx_v_blacklisted_nodes.end());
    if (!__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L23_bool_binop_done;
    }

    /* "resiliparse_dom/extract/html2text.pyx":897
 *             lxb_dom_node_remove(current)
 *         elif blacklisted_nodes.find(current) != blacklisted_nodes.end() or \
 *              (main_content and not _is_main_content_node(current, depth + base_depth, False)):             # <<<<<<<<<<<<<<
 *             # If we're about to remove a node that has children,
 *             # make sure next_node isn't pointing to one of them
 */
    if (__pyx_v_main_content) {
    } else {
      __pyx_t_3 = __pyx_v_main_content;
      goto __pyx_L23_bool_binop_done;
    }
    __pyx_t_4 = (!__pyx_f_15resiliparse_dom_7extract_9html2text__is_main_content_node(__pyx_v_current, (__pyx_v_depth + __pyx_v_base_depth), 0));
    __pyx_t_3 = __pyx_t_4;
    __pyx_L23_bool_binop_done:;

    /* "resiliparse_dom/extract/html2text.pyx":896
 *         if current.type != LXB_DOM_NODE_TYPE_ELEMENT and current.type != LXB_DOM_NODE_TYPE_TEXT:
 *             lxb_dom_node_remove(current)
 *         elif blacklisted_nodes.find(current) != blacklisted_nodes.end() or \             # <<<<<<<<<<<<<<
 *              (main_content and not _is_main_content_node(current, depth + base_depth, False)):
 *             # If we're about to remove a node that has children,
 */
    if (__pyx_t_3) {

      /* "resiliparse_dom/extract/html2text.pyx":900
 *             # If we're about to remove a node that has children,
 *             # make sure next_node isn't pointing to one of them
 *             if next_node and (next_node == current.first_child or is_descendant(current, next_node)):             # <<<<<<<<<<<<<<
 *                 if current.next:
 *                     next_node = current.next
 */
      __pyx_t_4 = (__pyx_v_next_node != 0);
      if (__pyx_t_4) {
      } else {
        __pyx_t_3 = __pyx_t_4;
        goto __pyx_L27_bool_binop_done;
      }
      __pyx_t_4 = (__pyx_v_next_node == __pyx_v_current->first_child);
      if (!__pyx_t_4) {
      } else {
        __pyx_t_3 = __pyx_t_4;
        goto __pyx_L27_bool_binop_done;
      }
      __pyx_t_4 = __pyx_f_15resiliparse_dom_7extract_9html2text_is_descendant(__pyx_v_current, __pyx_v_next_node); if (unlikely(__pyx_t_4 == ((int)-1) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 900, __pyx_L1_error)
      __pyx_t_3 = __pyx_t_4;
      __pyx_L27_bool_binop_done:;
      if (__pyx_t_3) {

        /* "resiliparse_dom/extract/html2text.pyx":901
 *             # make sure next_node isn't pointing to one of them
 *             if next_node and (next_node == current.first_child or is_descendant(current, next_node)):
 *                 if current.next:             # <<<<<<<<<<<<<<
 *                     next_node = current.next
 *                 else:
 */
        __pyx_t_3 = (__pyx_v_current->next != 0);
        if (__pyx_t_3) {

          /* "resiliparse_dom/extract/html2text.pyx":902
 *             if next_node and (next_node == current.first_child or is_descendant(current, next_node)):
 *                 if current.next:
 *                     next_node = current.next             # <<<<<<<<<<<<<<
 *                 else:
 *                     next_node = parent
 */
          __pyx_t_1 = __pyx_v_current->next;
          __pyx_v_next_node = __pyx_t_1;

          /* "resiliparse_dom/extract/html2text.pyx":901
 *             # make sure next_node isn't pointing to one of them
 *             if next_node and (next_node == current.first_child or is_descendant(current, next_node)):
 *                 if current.next:             # <<<<<<<<<<<<<<
 *                     next_node = current.next
 *                 else:
 */
          goto __pyx_L30;
        }

        /* "resiliparse_dom/extract/html2text.pyx":904
 *                     next_node = current.next
 *                 else:
 *                     next_node = parent             # <<<<<<<<<<<<<<
 *                     while next_node and not next_node.next:
 *                         next_node = next_node.parent
 */
        /*else*/ {
          __pyx_v_next_node = __pyx_v_parent;

          /* "resiliparse_dom/extract/html2text.pyx":905
 *                 else:
 *                     next_node = parent
 *                     while next_node and not next_node.next:             # <<<<<<<<<<<<<<
 *                         next_node = next_node.parent
 *                     if next_node:
 */
          while (1) {
            __pyx_t_4 = (__pyx_v_next_node != 0);
            if (__pyx_t_4) {
            } else {
              __pyx_t_3 = __pyx_t_4;
              goto __pyx_L33_bool_binop_done;
            }
            __pyx_t_4 = (!(__pyx_v_next_node->next != 0));
            __pyx_t_3 = __pyx_t_4;
            __pyx_L33_bool_binop_done:;
            if (!__pyx_t_3) break;

            /* "resiliparse_dom/extract/html2text.pyx":906
 *                     next_node = parent
 *                     while next_node and not next_node.next:
 *                         next_node = next_node.parent             # <<<<<<<<<<<<<<
 *                     if next_node:
 *                         next_node = next_node.next
 */
            __pyx_t_1 = __pyx_v_next_node->parent;
            __pyx_v_next_node = __pyx_t_1;
          }

          /* "resiliparse_dom/extract/html2text.pyx":907
 *                     while next_node and not next_node.next:
 *                         next_node = next_node.parent
 *                     if next_node:             # <<<<<<<<<<<<<<
 *                         next_node = next_node.next
 * 
 */
          __pyx_t_3 = (__pyx_v_next_node != 0);
          if (__pyx_t_3) {

            /* "resiliparse_dom/extract/html2text.pyx":908
 *                         next_node = next_node.parent
 *                     if next_node:
 *                         next_node = next_node.next             # <<<<<<<<<<<<<<
 * 
 *             # Remove all children first
 */
            __pyx_t_1 = __pyx_v_next_node->next;
            __pyx_v_next_node = __pyx_t_1;

            /* "resiliparse_dom/extract/html2text.pyx":907
 *                     while next_node and not next_node.next:
 *                         next_node = next_node.parent
 *                     if next_node:             # <<<<<<<<<<<<<<
 *                         next_node = next_node.next
 * 
 */
          }
        }
        __pyx_L30:;

        /* "resiliparse_dom/extract/html2text.pyx":900
 *             # If we're about to remove a node that has children,
 *             # make sure next_node isn't pointing to one of them
 *             if next_node and (next_node == current.first_child or is_descendant(current, next_node)):             # <<<<<<<<<<<<<<
 *                 if current.next:
 *                     next_node = current.next
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":911
 * 
 *             # Remove all children first
 *             child = current.first_child             # <<<<<<<<<<<<<<
 *             while child:
 *                 next_child = child.next
 */
      __pyx_t_1 = __pyx_v_current->first_child;
      __pyx_v_child = __pyx_t_1;

      /* "resiliparse_dom/extract/html2text.pyx":912
 *             # Remove all children first
 *             child = current.first_child
 *             while child:             # <<<<<<<<<<<<<<
 *                 next_child = child.next
 *                 lxb_dom_node_remove(child)
 */
      while (1) {
        __pyx_t_3 = (__pyx_v_child != 0);
        if (!__pyx_t_3) break;

        /* "resiliparse_dom/extract/html2text.pyx":913
 *             child = current.first_child
 *             while child:
 *                 next_child = child.next             # <<<<<<<<<<<<<<
 *                 lxb_dom_node_remove(child)
 *                 child = next_child
 */
        __pyx_t_1 = __pyx_v_child->next;
        __pyx_v_next_child = __pyx_t_1;

        /* "resiliparse_dom/extract/html2text.pyx":914
 *             while child:
 *                 next_child = child.next
 *                 lxb_dom_node_remove(child)             # <<<<<<<<<<<<<<
 *                 child = next_child
 * 
 */
        lxb_dom_node_remove(__pyx_v_child);

        /* "resiliparse_dom/extract/html2text.pyx":915
 *                 next_child = child.next
 *                 lxb_dom_node_remove(child)
 *                 child = next_child             # <<<<<<<<<<<<<<
 * 
 *             # Then remove the current node
 */
        __pyx_v_child = __pyx_v_next_child;
      }

      /* "resiliparse_dom/extract/html2text.pyx":918
 * 
 *             # Then remove the current node
 *             lxb_dom_node_remove(current)             # <<<<<<<<<<<<<<
 * 
 *         current = next_node
 */
      lxb_dom_node_remove(__pyx_v_current);

      /* "resiliparse_dom/extract/html2text.pyx":896
 *         if current.type != LXB_DOM_NODE_TYPE_ELEMENT and current.type != LXB_DOM_NODE_TYPE_TEXT:
 *             lxb_dom_node_remove(current)
 *         elif blacklisted_nodes.find(current) != blacklisted_nodes.end() or \             # <<<<<<<<<<<<<<
 *              (main_content and not _is_main_content_node(current, depth + base_depth, False)):
 *             # If we're about to remove a node that has children,
 */
    }
    __pyx_L22:;

    /* "resiliparse_dom/extract/html2text.pyx":920
 *             lxb_dom_node_remove(current)
 * 
 *         current = next_node             # <<<<<<<<<<<<<<
 * 
 *     return rstrip_str(serialize_node(ctx.root_node))
 */
    __pyx_v_current = __pyx_v_next_node;
  }

  /* "resiliparse_dom/extract/html2text.pyx":922
 *         current = next_node
 * 
 *     return rstrip_str(serialize_node(ctx.root_node))             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint is_descendant(lxb_dom_node_t* ancestor, lxb_dom_node_t* descendant) nogil:
 */
  __pyx_t_10 = __pyx_f_15resiliparse_dom_7extract_9html2text_serialize_node(__pyx_v_ctx.root_node); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 922, __pyx_L1_error)
  __pyx_r = rstrip_str(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_10));
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":811
 *     return extracted.decode(errors='ignore').replace('\x00', '')
 * 
 * cdef string _extract_simplified_dom_impl(HTMLTree tree,             # <<<<<<<<<<<<<<
 *                                        FormattingOpts preserve_formatting,
 *                                        bint main_content,
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._extract_simplified_dom_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":924
 *     return rstrip_str(serialize_node(ctx.root_node))
 * 
 * cdef inline bint is_descendant(lxb_dom_node_t* ancestor, lxb_dom_node_t* descendant) nogil:             # <<<<<<<<<<<<<<
 *     """Check if one node is a descendant of another."""
 *     while descendant:
 */

static CYTHON_INLINE int __pyx_f_15resiliparse_dom_7extract_9html2text_is_descendant(lxb_dom_node_t *__pyx_v_ancestor, lxb_dom_node_t *__pyx_v_descendant) {
  int __pyx_r;
  int __pyx_t_1;
  lxb_dom_node_t *__pyx_t_2;

  /* "resiliparse_dom/extract/html2text.pyx":926
 * cdef inline bint is_descendant(lxb_dom_node_t* ancestor, lxb_dom_node_t* descendant) nogil:
 *     """Check if one node is a descendant of another."""
 *     while descendant:             # <<<<<<<<<<<<<<
 *         if descendant.parent == ancestor:
 *             return True
 */
  while (1) {
    __pyx_t_1 = (__pyx_v_descendant != 0);
    if (!__pyx_t_1) break;

    /* "resiliparse_dom/extract/html2text.pyx":927
 *     """Check if one node is a descendant of another."""
 *     while descendant:
 *         if descendant.parent == ancestor:             # <<<<<<<<<<<<<<
 *             return True
 *         descendant = descendant.parent
 */
    __pyx_t_1 = (__pyx_v_descendant->parent == __pyx_v_ancestor);
    if (__pyx_t_1) {

      /* "resiliparse_dom/extract/html2text.pyx":928
 *     while descendant:
 *         if descendant.parent == ancestor:
 *             return True             # <<<<<<<<<<<<<<
 *         descendant = descendant.parent
 *     return False
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "resiliparse_dom/extract/html2text.pyx":927
 *     """Check if one node is a descendant of another."""
 *     while descendant:
 *         if descendant.parent == ancestor:             # <<<<<<<<<<<<<<
 *             return True
 *         descendant = descendant.parent
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":929
 *         if descendant.parent == ancestor:
 *             return True
 *         descendant = descendant.parent             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
    __pyx_t_2 = __pyx_v_descendant->parent;
    __pyx_v_descendant = __pyx_t_2;
  }

  /* "resiliparse_dom/extract/html2text.pyx":930
 *             return True
 *         descendant = descendant.parent
 *     return False             # <<<<<<<<<<<<<<
 * 
 * def extract_plain_text(html,
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":924
 *     return rstrip_str(serialize_node(ctx.root_node))
 * 
 * cdef inline bint is_descendant(lxb_dom_node_t* ancestor, lxb_dom_node_t* descendant) nogil:             # <<<<<<<<<<<<<<
 *     """Check if one node is a descendant of another."""
 *     while descendant:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":932
 *     return False
 * 
 * def extract_plain_text(html,             # <<<<<<<<<<<<<<
 *                        preserve_formatting=True,
 *                        bint main_content=False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_15resiliparse_dom_7extract_9html2text_3extract_plain_text(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_15resiliparse_dom_7extract_9html2text_2extract_plain_text, "\n    extract_plain_text(html, preserve_formatting=True, main_content=False, list_bullets=True, alt_texts=False,                        links=True, form_fields=False, noscript=False, comments=None, skip_elements=None)\n\n    Perform a simple plain-text extraction from the given DOM node and its children.\n\n    Extracts all visible text (excluding script/style elements, comment nodes etc.)\n    and collapses consecutive white space characters.\n\n    If ``preserve_formatting`` is ``True``, line breaks, paragraphs, other block-level elements,\n    list elements, and pre-formatted text will be preserved. Use the special value ``'minimal_html'`` to\n    add reduced HTML markup to the formatted output, preserving headings (``<h1-6>``), paragraphs (``<p>``),\n    lists (``<ul>``, ``<ol>``), ``<pre>`` text, ``<br>`` line breaks, and links (``<a>``, if ``links=True``).\n\n    Extraction of particular elements and attributes such as links, alt texts, or form fields\n    can be configured individually by setting the corresponding parameter to ``True``.\n    Defaults to ``False`` for most elements (i.e., only basic text will be extracted).\n\n    :param html: HTML as DOM tree or Unicode string\n    :type html: HTMLTree or str\n    :param preserve_formatting: preserve basic block-level formatting (use ``'minimal_html'`` for minimal HTML\n                                markup in output)\n    :type preserve_formatting: bool or t.Literal['minimal_html']\n    :param main_content: apply simple heuristics for extracting only \"main-content\" elements\n    :type main_content: bool\n    :param list_bullets: insert bullets / numbers for list items\n    :type list_bullets: bool\n    :param alt_texts: preserve alternative text descriptions\n    :type alt_texts: bool\n    :param links: extract link target URLs\n    :type links: bool\n    :param form_fields: extract form fields and their values\n    :type form_fields: bool\n    :param noscript: extract contents of <noscript> elements\n   "" :param comments: treat comment sections as main content\n    :type comments: bool\n    :param skip_elements: list of CSS selectors for elements to skip\n    :type skip_elements: t.Iterable[str] or None\n    :type noscript: bool\n    :return: extracted plain text\n    :rtype: str\n    ");
static PyMethodDef __pyx_mdef_15resiliparse_dom_7extract_9html2text_3extract_plain_text = {"extract_plain_text", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_15resiliparse_dom_7extract_9html2text_3extract_plain_text, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_15resiliparse_dom_7extract_9html2text_2extract_plain_text};
static PyObject *__pyx_pw_15resiliparse_dom_7extract_9html2text_3extract_plain_text(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_html = 0;
  PyObject *__pyx_v_preserve_formatting = 0;
  int __pyx_v_main_content;
  int __pyx_v_list_bullets;
  int __pyx_v_alt_texts;
  int __pyx_v_links;
  int __pyx_v_form_fields;
  int __pyx_v_noscript;
  int __pyx_v_comments;
  PyObject *__pyx_v_skip_elements = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extract_plain_text (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_html,&__pyx_n_s_preserve_formatting,&__pyx_n_s_main_content,&__pyx_n_s_list_bullets,&__pyx_n_s_alt_texts,&__pyx_n_s_links,&__pyx_n_s_form_fields,&__pyx_n_s_noscript,&__pyx_n_s_comments,&__pyx_n_s_skip_elements,0};

    /* "resiliparse_dom/extract/html2text.pyx":933
 * 
 * def extract_plain_text(html,
 *                        preserve_formatting=True,             # <<<<<<<<<<<<<<
 *                        bint main_content=False,
 *                        bint list_bullets=True,
 */
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));

    /* "resiliparse_dom/extract/html2text.pyx":941
 *                        bint noscript=False,
 *                        bint comments=True,
 *                        skip_elements=None):             # <<<<<<<<<<<<<<
 *     """
 *     extract_plain_text(html, preserve_formatting=True, main_content=False, list_bullets=True, alt_texts=False, \
 */
    values[9] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_html)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_preserve_formatting);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_main_content);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_list_bullets);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_alt_texts);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_links);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_form_fields);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_noscript);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_comments);
          if (value) { values[8] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_skip_elements);
          if (value) { values[9] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "extract_plain_text") < 0)) __PYX_ERR(0, 932, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_html = values[0];
    __pyx_v_preserve_formatting = values[1];
    if (values[2]) {
      __pyx_v_main_content = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_main_content == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 934, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":934
 * def extract_plain_text(html,
 *                        preserve_formatting=True,
 *                        bint main_content=False,             # <<<<<<<<<<<<<<
 *                        bint list_bullets=True,
 *                        bint alt_texts=True,
 */
      __pyx_v_main_content = ((int)((int)0));
    }
    if (values[3]) {
      __pyx_v_list_bullets = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_list_bullets == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 935, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":935
 *                        preserve_formatting=True,
 *                        bint main_content=False,
 *                        bint list_bullets=True,             # <<<<<<<<<<<<<<
 *                        bint alt_texts=True,
 *                        bint links=False,
 */
      __pyx_v_list_bullets = ((int)((int)1));
    }
    if (values[4]) {
      __pyx_v_alt_texts = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_alt_texts == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":936
 *                        bint main_content=False,
 *                        bint list_bullets=True,
 *                        bint alt_texts=True,             # <<<<<<<<<<<<<<
 *                        bint links=False,
 *                        bint form_fields=False,
 */
      __pyx_v_alt_texts = ((int)((int)1));
    }
    if (values[5]) {
      __pyx_v_links = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_links == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 937, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":937
 *                        bint list_bullets=True,
 *                        bint alt_texts=True,
 *                        bint links=False,             # <<<<<<<<<<<<<<
 *                        bint form_fields=False,
 *                        bint noscript=False,
 */
      __pyx_v_links = ((int)((int)0));
    }
    if (values[6]) {
      __pyx_v_form_fields = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_form_fields == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 938, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":938
 *                        bint alt_texts=True,
 *                        bint links=False,
 *                        bint form_fields=False,             # <<<<<<<<<<<<<<
 *                        bint noscript=False,
 *                        bint comments=True,
 */
      __pyx_v_form_fields = ((int)((int)0));
    }
    if (values[7]) {
      __pyx_v_noscript = __Pyx_PyObject_IsTrue(values[7]); if (unlikely((__pyx_v_noscript == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 939, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":939
 *                        bint links=False,
 *                        bint form_fields=False,
 *                        bint noscript=False,             # <<<<<<<<<<<<<<
 *                        bint comments=True,
 *                        skip_elements=None):
 */
      __pyx_v_noscript = ((int)((int)0));
    }
    if (values[8]) {
      __pyx_v_comments = __Pyx_PyObject_IsTrue(values[8]); if (unlikely((__pyx_v_comments == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L3_error)
    } else {

      /* "resiliparse_dom/extract/html2text.pyx":940
 *                        bint form_fields=False,
 *                        bint noscript=False,
 *                        bint comments=True,             # <<<<<<<<<<<<<<
 *                        skip_elements=None):
 *     """
 */
      __pyx_v_comments = ((int)((int)1));
    }
    __pyx_v_skip_elements = values[9];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extract_plain_text", 0, 1, 10, __pyx_nargs); __PYX_ERR(0, 932, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("resiliparse_dom.extract.html2text.extract_plain_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15resiliparse_dom_7extract_9html2text_2extract_plain_text(__pyx_self, __pyx_v_html, __pyx_v_preserve_formatting, __pyx_v_main_content, __pyx_v_list_bullets, __pyx_v_alt_texts, __pyx_v_links, __pyx_v_form_fields, __pyx_v_noscript, __pyx_v_comments, __pyx_v_skip_elements);

  /* "resiliparse_dom/extract/html2text.pyx":932
 *     return False
 * 
 * def extract_plain_text(html,             # <<<<<<<<<<<<<<
 *                        preserve_formatting=True,
 *                        bint main_content=False,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15resiliparse_dom_7extract_9html2text_2extract_plain_text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_html, PyObject *__pyx_v_preserve_formatting, int __pyx_v_main_content, int __pyx_v_list_bullets, int __pyx_v_alt_texts, int __pyx_v_links, int __pyx_v_form_fields, int __pyx_v_noscript, int __pyx_v_comments, PyObject *__pyx_v_skip_elements) {
  struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *__pyx_v_tree = 0;
  PyObject *__pyx_v_skip_selectors = NULL;
  std::string __pyx_v_skip_selector;
  FormattingOpts __pyx_v_formatting_opts;
  std::string __pyx_v_extracted;
  PyObject *__pyx_8genexpr1__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  std::string __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_plain_text", 1);

  /* "resiliparse_dom/extract/html2text.pyx":986
 * 
 *     cdef HTMLTree tree
 *     if isinstance(html, str):             # <<<<<<<<<<<<<<
 *         tree = HTMLTree.parse(html)
 *     elif isinstance(html, HTMLTree):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_html); 
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":987
 *     cdef HTMLTree tree
 *     if isinstance(html, str):
 *         tree = HTMLTree.parse(html)             # <<<<<<<<<<<<<<
 *     elif isinstance(html, HTMLTree):
 *         tree = <HTMLTree>html
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree), __pyx_n_s_parse); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_html};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 987, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree))))) __PYX_ERR(0, 987, __pyx_L1_error)
    __pyx_v_tree = ((struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "resiliparse_dom/extract/html2text.pyx":986
 * 
 *     cdef HTMLTree tree
 *     if isinstance(html, str):             # <<<<<<<<<<<<<<
 *         tree = HTMLTree.parse(html)
 *     elif isinstance(html, HTMLTree):
 */
    goto __pyx_L3;
  }

  /* "resiliparse_dom/extract/html2text.pyx":988
 *     if isinstance(html, str):
 *         tree = HTMLTree.parse(html)
 *     elif isinstance(html, HTMLTree):             # <<<<<<<<<<<<<<
 *         tree = <HTMLTree>html
 *     else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_html, __pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree); 
  if (likely(__pyx_t_1)) {

    /* "resiliparse_dom/extract/html2text.pyx":989
 *         tree = HTMLTree.parse(html)
 *     elif isinstance(html, HTMLTree):
 *         tree = <HTMLTree>html             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError('Parameter "html" is neither string nor HTMLTree.')
 */
    __pyx_t_2 = __pyx_v_html;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_tree = ((struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "resiliparse_dom/extract/html2text.pyx":988
 *     if isinstance(html, str):
 *         tree = HTMLTree.parse(html)
 *     elif isinstance(html, HTMLTree):             # <<<<<<<<<<<<<<
 *         tree = <HTMLTree>html
 *     else:
 */
    goto __pyx_L3;
  }

  /* "resiliparse_dom/extract/html2text.pyx":991
 *         tree = <HTMLTree>html
 *     else:
 *         raise TypeError('Parameter "html" is neither string nor HTMLTree.')             # <<<<<<<<<<<<<<
 * 
 *     if not check_node(tree.body):
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 991, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "resiliparse_dom/extract/html2text.pyx":993
 *         raise TypeError('Parameter "html" is neither string nor HTMLTree.')
 * 
 *     if not check_node(tree.body):             # <<<<<<<<<<<<<<
 *         return ''
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tree), __pyx_n_s_body); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_15resiliparse_dom_5parse_4html_DOMNode))))) __PYX_ERR(0, 993, __pyx_L1_error)
  __pyx_t_1 = (!__pyx_f_15resiliparse_dom_5parse_4html_check_node(((struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode *)__pyx_t_2)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":994
 * 
 *     if not check_node(tree.body):
 *         return ''             # <<<<<<<<<<<<<<
 * 
 *     skip_selectors = {e.encode() for e in skip_elements or []}
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_u__2);
    __pyx_r = __pyx_kp_u__2;
    goto __pyx_L0;

    /* "resiliparse_dom/extract/html2text.pyx":993
 *         raise TypeError('Parameter "html" is neither string nor HTMLTree.')
 * 
 *     if not check_node(tree.body):             # <<<<<<<<<<<<<<
 *         return ''
 * 
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":996
 *         return ''
 * 
 *     skip_selectors = {e.encode() for e in skip_elements or []}             # <<<<<<<<<<<<<<
 *     skip_selectors.update({b'script', b'style', b'iframe', b'frame', b'template'})
 *     if not alt_texts:
 */
  { /* enter inner scope */
    __pyx_t_2 = PySet_New(NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_skip_elements); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 996, __pyx_L7_error)
    if (!__pyx_t_1) {
    } else {
      __Pyx_INCREF(__pyx_v_skip_elements);
      __pyx_t_3 = __pyx_v_skip_elements;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 996, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_L10_bool_binop_done:;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 996, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 996, __pyx_L7_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 996, __pyx_L7_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 996, __pyx_L7_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 996, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 996, __pyx_L7_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 996, __pyx_L7_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 996, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 996, __pyx_L7_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_e, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr1__pyx_v_e, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 996, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 996, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      if (unlikely(PySet_Add(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 996, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_e); __pyx_8genexpr1__pyx_v_e = 0;
    goto __pyx_L13_exit_scope;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_e); __pyx_8genexpr1__pyx_v_e = 0;
    goto __pyx_L1_error;
    __pyx_L13_exit_scope:;
  } /* exit inner scope */
  __pyx_v_skip_selectors = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "resiliparse_dom/extract/html2text.pyx":997
 * 
 *     skip_selectors = {e.encode() for e in skip_elements or []}
 *     skip_selectors.update({b'script', b'style', b'iframe', b'frame', b'template'})             # <<<<<<<<<<<<<<
 *     if not alt_texts:
 *         skip_selectors.update({b'object', b'video', b'audio', b'embed' b'img', b'area',
 */
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PySet_Add(__pyx_t_2, __pyx_n_b_script) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_n_b_style) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_n_b_iframe) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_n_b_frame) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_n_b_template) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_v_skip_selectors, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "resiliparse_dom/extract/html2text.pyx":998
 *     skip_selectors = {e.encode() for e in skip_elements or []}
 *     skip_selectors.update({b'script', b'style', b'iframe', b'frame', b'template'})
 *     if not alt_texts:             # <<<<<<<<<<<<<<
 *         skip_selectors.update({b'object', b'video', b'audio', b'embed' b'img', b'area',
 *                                b'svg', b'figcaption', b'figure'})
 */
  __pyx_t_1 = (!__pyx_v_alt_texts);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":999
 *     skip_selectors.update({b'script', b'style', b'iframe', b'frame', b'template'})
 *     if not alt_texts:
 *         skip_selectors.update({b'object', b'video', b'audio', b'embed' b'img', b'area',             # <<<<<<<<<<<<<<
 *                                b'svg', b'figcaption', b'figure'})
 *     if not noscript:
 */
    __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 999, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PySet_Add(__pyx_t_4, __pyx_n_b_object) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_video) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_audio) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_embedimg) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_area) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_svg) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_figcaption) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
    if (PySet_Add(__pyx_t_4, __pyx_n_b_figure) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
    __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_v_skip_selectors, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 999, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "resiliparse_dom/extract/html2text.pyx":998
 *     skip_selectors = {e.encode() for e in skip_elements or []}
 *     skip_selectors.update({b'script', b'style', b'iframe', b'frame', b'template'})
 *     if not alt_texts:             # <<<<<<<<<<<<<<
 *         skip_selectors.update({b'object', b'video', b'audio', b'embed' b'img', b'area',
 *                                b'svg', b'figcaption', b'figure'})
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":1001
 *         skip_selectors.update({b'object', b'video', b'audio', b'embed' b'img', b'area',
 *                                b'svg', b'figcaption', b'figure'})
 *     if not noscript:             # <<<<<<<<<<<<<<
 *         skip_selectors.add(b'noscript')
 *     if not form_fields:
 */
  __pyx_t_1 = (!__pyx_v_noscript);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":1002
 *                                b'svg', b'figcaption', b'figure'})
 *     if not noscript:
 *         skip_selectors.add(b'noscript')             # <<<<<<<<<<<<<<
 *     if not form_fields:
 *         skip_selectors.update({b'textarea', b'input', b'button', b'select', b'option', b'label', })
 */
    __pyx_t_10 = PySet_Add(__pyx_v_skip_selectors, __pyx_n_b_noscript); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 1002, __pyx_L1_error)

    /* "resiliparse_dom/extract/html2text.pyx":1001
 *         skip_selectors.update({b'object', b'video', b'audio', b'embed' b'img', b'area',
 *                                b'svg', b'figcaption', b'figure'})
 *     if not noscript:             # <<<<<<<<<<<<<<
 *         skip_selectors.add(b'noscript')
 *     if not form_fields:
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":1003
 *     if not noscript:
 *         skip_selectors.add(b'noscript')
 *     if not form_fields:             # <<<<<<<<<<<<<<
 *         skip_selectors.update({b'textarea', b'input', b'button', b'select', b'option', b'label', })
 *     cdef string skip_selector = <string>b','.join(skip_selectors)
 */
  __pyx_t_1 = (!__pyx_v_form_fields);
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":1004
 *         skip_selectors.add(b'noscript')
 *     if not form_fields:
 *         skip_selectors.update({b'textarea', b'input', b'button', b'select', b'option', b'label', })             # <<<<<<<<<<<<<<
 *     cdef string skip_selector = <string>b','.join(skip_selectors)
 * 
 */
    __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PySet_Add(__pyx_t_2, __pyx_n_b_textarea) < 0) __PYX_ERR(0, 1004, __pyx_L1_error)
    if (PySet_Add(__pyx_t_2, __pyx_n_b_input) < 0) __PYX_ERR(0, 1004, __pyx_L1_error)
    if (PySet_Add(__pyx_t_2, __pyx_n_b_button) < 0) __PYX_ERR(0, 1004, __pyx_L1_error)
    if (PySet_Add(__pyx_t_2, __pyx_n_b_select) < 0) __PYX_ERR(0, 1004, __pyx_L1_error)
    if (PySet_Add(__pyx_t_2, __pyx_n_b_option) < 0) __PYX_ERR(0, 1004, __pyx_L1_error)
    if (PySet_Add(__pyx_t_2, __pyx_n_b_label) < 0) __PYX_ERR(0, 1004, __pyx_L1_error)
    __pyx_t_4 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_update, __pyx_v_skip_selectors, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "resiliparse_dom/extract/html2text.pyx":1003
 *     if not noscript:
 *         skip_selectors.add(b'noscript')
 *     if not form_fields:             # <<<<<<<<<<<<<<
 *         skip_selectors.update({b'textarea', b'input', b'button', b'select', b'option', b'label', })
 *     cdef string skip_selector = <string>b','.join(skip_selectors)
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":1005
 *     if not form_fields:
 *         skip_selectors.update({b'textarea', b'input', b'button', b'select', b'option', b'label', })
 *     cdef string skip_selector = <string>b','.join(skip_selectors)             # <<<<<<<<<<<<<<
 * 
 *     cdef FormattingOpts formatting_opts = FormattingOpts.FORMAT_OFF
 */
  __pyx_t_4 = __Pyx_PyBytes_Join(__pyx_kp_b__3, __pyx_v_skip_selectors); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_skip_selector = ((std::string)__pyx_t_11);

  /* "resiliparse_dom/extract/html2text.pyx":1007
 *     cdef string skip_selector = <string>b','.join(skip_selectors)
 * 
 *     cdef FormattingOpts formatting_opts = FormattingOpts.FORMAT_OFF             # <<<<<<<<<<<<<<
 *     if preserve_formatting == 'minimal_html':
 *         formatting_opts = FormattingOpts.FORMAT_MINIMAL_HTML
 */
  __pyx_v_formatting_opts = FORMAT_OFF;

  /* "resiliparse_dom/extract/html2text.pyx":1008
 * 
 *     cdef FormattingOpts formatting_opts = FormattingOpts.FORMAT_OFF
 *     if preserve_formatting == 'minimal_html':             # <<<<<<<<<<<<<<
 *         formatting_opts = FormattingOpts.FORMAT_MINIMAL_HTML
 *     elif preserve_formatting:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_preserve_formatting, __pyx_n_u_minimal_html, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1008, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":1009
 *     cdef FormattingOpts formatting_opts = FormattingOpts.FORMAT_OFF
 *     if preserve_formatting == 'minimal_html':
 *         formatting_opts = FormattingOpts.FORMAT_MINIMAL_HTML             # <<<<<<<<<<<<<<
 *     elif preserve_formatting:
 *         formatting_opts = FormattingOpts.FORMAT_BASIC
 */
    __pyx_v_formatting_opts = FORMAT_MINIMAL_HTML;

    /* "resiliparse_dom/extract/html2text.pyx":1008
 * 
 *     cdef FormattingOpts formatting_opts = FormattingOpts.FORMAT_OFF
 *     if preserve_formatting == 'minimal_html':             # <<<<<<<<<<<<<<
 *         formatting_opts = FormattingOpts.FORMAT_MINIMAL_HTML
 *     elif preserve_formatting:
 */
    goto __pyx_L17;
  }

  /* "resiliparse_dom/extract/html2text.pyx":1010
 *     if preserve_formatting == 'minimal_html':
 *         formatting_opts = FormattingOpts.FORMAT_MINIMAL_HTML
 *     elif preserve_formatting:             # <<<<<<<<<<<<<<
 *         formatting_opts = FormattingOpts.FORMAT_BASIC
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_preserve_formatting); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1010, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "resiliparse_dom/extract/html2text.pyx":1011
 *         formatting_opts = FormattingOpts.FORMAT_MINIMAL_HTML
 *     elif preserve_formatting:
 *         formatting_opts = FormattingOpts.FORMAT_BASIC             # <<<<<<<<<<<<<<
 * 
 *     cdef string extracted
 */
    __pyx_v_formatting_opts = FORMAT_BASIC;

    /* "resiliparse_dom/extract/html2text.pyx":1010
 *     if preserve_formatting == 'minimal_html':
 *         formatting_opts = FormattingOpts.FORMAT_MINIMAL_HTML
 *     elif preserve_formatting:             # <<<<<<<<<<<<<<
 *         formatting_opts = FormattingOpts.FORMAT_BASIC
 * 
 */
  }
  __pyx_L17:;

  /* "resiliparse_dom/extract/html2text.pyx":1014
 * 
 *     cdef string extracted
 *     with nogil:             # <<<<<<<<<<<<<<
 *         extracted = _extract_plain_text_impl(
 *             tree,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "resiliparse_dom/extract/html2text.pyx":1015
 *     cdef string extracted
 *     with nogil:
 *         extracted = _extract_plain_text_impl(             # <<<<<<<<<<<<<<
 *             tree,
 *             formatting_opts,
 */
        __pyx_v_extracted = __pyx_f_15resiliparse_dom_7extract_9html2text__extract_plain_text_impl(__pyx_v_tree, __pyx_v_formatting_opts, __pyx_v_main_content, __pyx_v_list_bullets, __pyx_v_alt_texts, __pyx_v_links, __pyx_v_form_fields, __pyx_v_noscript, __pyx_v_comments, __pyx_v_skip_selector);
      }

      /* "resiliparse_dom/extract/html2text.pyx":1014
 * 
 *     cdef string extracted
 *     with nogil:             # <<<<<<<<<<<<<<
 *         extracted = _extract_plain_text_impl(
 *             tree,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L20;
        }
        __pyx_L20:;
      }
  }

  /* "resiliparse_dom/extract/html2text.pyx":1026
 *             comments,
 *             skip_selector)
 *     return extracted.decode(errors='ignore')             # <<<<<<<<<<<<<<
 * 
 * cdef string _extract_plain_text_impl(HTMLTree tree,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(__pyx_v_extracted); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_errors, __pyx_n_u_ignore) < 0) __PYX_ERR(0, 1026, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":932
 *     return False
 * 
 * def extract_plain_text(html,             # <<<<<<<<<<<<<<
 *                        preserve_formatting=True,
 *                        bint main_content=False,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("resiliparse_dom.extract.html2text.extract_plain_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tree);
  __Pyx_XDECREF(__pyx_v_skip_selectors);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "resiliparse_dom/extract/html2text.pyx":1028
 *     return extracted.decode(errors='ignore')
 * 
 * cdef string _extract_plain_text_impl(HTMLTree tree,             # <<<<<<<<<<<<<<
 *                                      FormattingOpts preserve_formatting,
 *                                      bint main_content,
 */

static std::string __pyx_f_15resiliparse_dom_7extract_9html2text__extract_plain_text_impl(struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *__pyx_v_tree, FormattingOpts __pyx_v_preserve_formatting, int __pyx_v_main_content, int __pyx_v_list_bullets, int __pyx_v_alt_texts, int __pyx_v_links, int __pyx_v_form_fields, int __pyx_v_noscript, int __pyx_v_comments, std::string __pyx_v_skip_selector) {
  struct ExtractContext __pyx_v_ctx;
  CYTHON_UNUSED lxb_char_t const *__pyx_v_tag_name;
  size_t __pyx_v_i;
  CYTHON_UNUSED int __pyx_v_skip;
  int __pyx_v_is_end_tag;
  std::string __pyx_v_main_content_selector;
  lxb_dom_collection_t *__pyx_v_root_candidates;
  lxb_dom_collection_t *__pyx_v_blacklist_coll;
  std::set<lxb_dom_node_t *>  __pyx_v_blacklisted_nodes;
  size_t __pyx_v_base_depth;
  lxb_dom_node_t *__pyx_v_pnode;
  std::vector<std::shared_ptr<struct ExtractNode> >  __pyx_v_extract_nodes;
  size_t __pyx_v_chars_extracted;
  size_t __pyx_v_nodes_extracted;
  std::string __pyx_r;
  lxb_dom_node_t *__pyx_t_1;
  struct ExtractOpts __pyx_t_2;
  int __pyx_t_3;
  std::string __pyx_t_4;
  lxb_dom_collection_t *__pyx_t_5;
  struct __pyx_opt_args_15resiliparse_dom_5parse_4html_query_selector_all_impl __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  int __pyx_t_10;
  struct __pyx_opt_args_15resiliparse_dom_5parse_4html_next_node __pyx_t_11;
  bool __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":1041
 * 
 *     cdef ExtractContext ctx
 *     ctx.root_node = <lxb_dom_node_t*>tree.dom_document.body             # <<<<<<<<<<<<<<
 *     ctx.node = ctx.root_node
 *     ctx.opts = [
 */
  __pyx_v_ctx.root_node = ((lxb_dom_node_t *)__pyx_v_tree->dom_document->body);

  /* "resiliparse_dom/extract/html2text.pyx":1042
 *     cdef ExtractContext ctx
 *     ctx.root_node = <lxb_dom_node_t*>tree.dom_document.body
 *     ctx.node = ctx.root_node             # <<<<<<<<<<<<<<
 *     ctx.opts = [
 *         preserve_formatting,
 */
  __pyx_t_1 = __pyx_v_ctx.root_node;
  __pyx_v_ctx.node = __pyx_t_1;

  /* "resiliparse_dom/extract/html2text.pyx":1043
 *     ctx.root_node = <lxb_dom_node_t*>tree.dom_document.body
 *     ctx.node = ctx.root_node
 *     ctx.opts = [             # <<<<<<<<<<<<<<
 *         preserve_formatting,
 *         list_bullets,
 */
  __pyx_t_2.preserve_formatting = __pyx_v_preserve_formatting;
  __pyx_t_2.list_bullets = __pyx_v_list_bullets;
  __pyx_t_2.links = __pyx_v_links;
  __pyx_t_2.alt_texts = __pyx_v_alt_texts;
  __pyx_t_2.form_fields = __pyx_v_form_fields;
  __pyx_t_2.noscript = __pyx_v_noscript;
  __pyx_v_ctx.opts = __pyx_t_2;

  /* "resiliparse_dom/extract/html2text.pyx":1051
 *         noscript]
 * 
 *     cdef const lxb_char_t* tag_name = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t tag_name_len
 *     cdef string tag_name_str
 */
  __pyx_v_tag_name = NULL;

  /* "resiliparse_dom/extract/html2text.pyx":1055
 *     cdef string tag_name_str
 *     cdef size_t i
 *     cdef bint skip = False             # <<<<<<<<<<<<<<
 *     cdef bint is_end_tag = False
 * 
 */
  __pyx_v_skip = 0;

  /* "resiliparse_dom/extract/html2text.pyx":1056
 *     cdef size_t i
 *     cdef bint skip = False
 *     cdef bint is_end_tag = False             # <<<<<<<<<<<<<<
 * 
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_DOCUMENT:
 */
  __pyx_v_is_end_tag = 0;

  /* "resiliparse_dom/extract/html2text.pyx":1058
 *     cdef bint is_end_tag = False
 * 
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_DOCUMENT:             # <<<<<<<<<<<<<<
 *         ctx.root_node = next_element_node(ctx.node, ctx.node.first_child)
 *         ctx.node = ctx.root_node
 */
  __pyx_t_3 = (__pyx_v_ctx.node->type == LXB_DOM_NODE_TYPE_DOCUMENT);
  if (__pyx_t_3) {

    /* "resiliparse_dom/extract/html2text.pyx":1059
 * 
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_DOCUMENT:
 *         ctx.root_node = next_element_node(ctx.node, ctx.node.first_child)             # <<<<<<<<<<<<<<
 *         ctx.node = ctx.root_node
 * 
 */
    __pyx_v_ctx.root_node = __pyx_f_15resiliparse_dom_5parse_4html_next_element_node(__pyx_v_ctx.node, __pyx_v_ctx.node->first_child, NULL);

    /* "resiliparse_dom/extract/html2text.pyx":1060
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_DOCUMENT:
 *         ctx.root_node = next_element_node(ctx.node, ctx.node.first_child)
 *         ctx.node = ctx.root_node             # <<<<<<<<<<<<<<
 * 
 *     cdef string main_content_selector
 */
    __pyx_t_1 = __pyx_v_ctx.root_node;
    __pyx_v_ctx.node = __pyx_t_1;

    /* "resiliparse_dom/extract/html2text.pyx":1058
 *     cdef bint is_end_tag = False
 * 
 *     if ctx.node.type == LXB_DOM_NODE_TYPE_DOCUMENT:             # <<<<<<<<<<<<<<
 *         ctx.root_node = next_element_node(ctx.node, ctx.node.first_child)
 *         ctx.node = ctx.root_node
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":1063
 * 
 *     cdef string main_content_selector
 *     cdef lxb_dom_collection_t* root_candidates = NULL             # <<<<<<<<<<<<<<
 *     if main_content:
 *         main_content_selector = string(b'.article-body, .articleBody, .contentBody, .article-text,'
 */
  __pyx_v_root_candidates = NULL;

  /* "resiliparse_dom/extract/html2text.pyx":1064
 *     cdef string main_content_selector
 *     cdef lxb_dom_collection_t* root_candidates = NULL
 *     if main_content:             # <<<<<<<<<<<<<<
 *         main_content_selector = string(b'.article-body, .articleBody, .contentBody, .article-text,'
 *                                        b'.main-content, .postcontent, .post-content, .single-post,'
 */
  if (__pyx_v_main_content) {

    /* "resiliparse_dom/extract/html2text.pyx":1065
 *     cdef lxb_dom_collection_t* root_candidates = NULL
 *     if main_content:
 *         main_content_selector = string(b'.article-body, .articleBody, .contentBody, .article-text,'             # <<<<<<<<<<<<<<
 *                                        b'.main-content, .postcontent, .post-content, .single-post,'
 *                                        b'[role="main"]')
 */
    try {
      __pyx_t_4 = std::string(((char const *)".article-body, .articleBody, .contentBody, .article-text,.main-content, .postcontent, .post-content, .single-post,[role=\"main\"]"));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 1065, __pyx_L1_error)
    }
    __pyx_v_main_content_selector = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

    /* "resiliparse_dom/extract/html2text.pyx":1068
 *                                        b'.main-content, .postcontent, .post-content, .single-post,'
 *                                        b'[role="main"]')
 *         root_candidates = query_selector_all_impl(ctx.node, tree,             # <<<<<<<<<<<<<<
 *                                                   main_content_selector.data(), main_content_selector.size(), 5)
 *         if root_candidates != NULL:
 */
    __pyx_t_6.__pyx_n = 1;
    __pyx_t_6.init_size = 5;
    __pyx_t_5 = __pyx_f_15resiliparse_dom_5parse_4html_query_selector_all_impl(__pyx_v_ctx.node, __pyx_v_tree, __pyx_v_main_content_selector.data(), __pyx_v_main_content_selector.size(), &__pyx_t_6); if (unlikely(__pyx_t_5 == ((lxb_dom_collection_t *)((lxb_dom_collection_t *)-1L)))) __PYX_ERR(0, 1068, __pyx_L1_error)
    __pyx_v_root_candidates = __pyx_t_5;

    /* "resiliparse_dom/extract/html2text.pyx":1070
 *         root_candidates = query_selector_all_impl(ctx.node, tree,
 *                                                   main_content_selector.data(), main_content_selector.size(), 5)
 *         if root_candidates != NULL:             # <<<<<<<<<<<<<<
 *             if lxb_dom_collection_length(root_candidates) == 1:
 *                 # Use result only if there is exactly one match
 */
    __pyx_t_3 = (__pyx_v_root_candidates != NULL);
    if (__pyx_t_3) {

      /* "resiliparse_dom/extract/html2text.pyx":1071
 *                                                   main_content_selector.data(), main_content_selector.size(), 5)
 *         if root_candidates != NULL:
 *             if lxb_dom_collection_length(root_candidates) == 1:             # <<<<<<<<<<<<<<
 *                 # Use result only if there is exactly one match
 *                 ctx.root_node = lxb_dom_collection_node(root_candidates, 0)
 */
      __pyx_t_3 = (lxb_dom_collection_length(__pyx_v_root_candidates) == 1);
      if (__pyx_t_3) {

        /* "resiliparse_dom/extract/html2text.pyx":1073
 *             if lxb_dom_collection_length(root_candidates) == 1:
 *                 # Use result only if there is exactly one match
 *                 ctx.root_node = lxb_dom_collection_node(root_candidates, 0)             # <<<<<<<<<<<<<<
 *                 ctx.node = ctx.root_node
 *             lxb_dom_collection_destroy(root_candidates, True)
 */
        __pyx_v_ctx.root_node = lxb_dom_collection_node(__pyx_v_root_candidates, 0);

        /* "resiliparse_dom/extract/html2text.pyx":1074
 *                 # Use result only if there is exactly one match
 *                 ctx.root_node = lxb_dom_collection_node(root_candidates, 0)
 *                 ctx.node = ctx.root_node             # <<<<<<<<<<<<<<
 *             lxb_dom_collection_destroy(root_candidates, True)
 *             root_candidates = NULL
 */
        __pyx_t_1 = __pyx_v_ctx.root_node;
        __pyx_v_ctx.node = __pyx_t_1;

        /* "resiliparse_dom/extract/html2text.pyx":1071
 *                                                   main_content_selector.data(), main_content_selector.size(), 5)
 *         if root_candidates != NULL:
 *             if lxb_dom_collection_length(root_candidates) == 1:             # <<<<<<<<<<<<<<
 *                 # Use result only if there is exactly one match
 *                 ctx.root_node = lxb_dom_collection_node(root_candidates, 0)
 */
      }

      /* "resiliparse_dom/extract/html2text.pyx":1075
 *                 ctx.root_node = lxb_dom_collection_node(root_candidates, 0)
 *                 ctx.node = ctx.root_node
 *             lxb_dom_collection_destroy(root_candidates, True)             # <<<<<<<<<<<<<<
 *             root_candidates = NULL
 * 
 */
      (void)(lxb_dom_collection_destroy(__pyx_v_root_candidates, 1));

      /* "resiliparse_dom/extract/html2text.pyx":1076
 *                 ctx.node = ctx.root_node
 *             lxb_dom_collection_destroy(root_candidates, True)
 *             root_candidates = NULL             # <<<<<<<<<<<<<<
 * 
 *     # Select all blacklisted elements and store them in a set
 */
      __pyx_v_root_candidates = NULL;

      /* "resiliparse_dom/extract/html2text.pyx":1070
 *         root_candidates = query_selector_all_impl(ctx.node, tree,
 *                                                   main_content_selector.data(), main_content_selector.size(), 5)
 *         if root_candidates != NULL:             # <<<<<<<<<<<<<<
 *             if lxb_dom_collection_length(root_candidates) == 1:
 *                 # Use result only if there is exactly one match
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":1064
 *     cdef string main_content_selector
 *     cdef lxb_dom_collection_t* root_candidates = NULL
 *     if main_content:             # <<<<<<<<<<<<<<
 *         main_content_selector = string(b'.article-body, .articleBody, .contentBody, .article-text,'
 *                                        b'.main-content, .postcontent, .post-content, .single-post,'
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":1079
 * 
 *     # Select all blacklisted elements and store them in a set
 *     cdef lxb_dom_collection_t* blacklist_coll = query_selector_all_impl(ctx.root_node, tree,             # <<<<<<<<<<<<<<
 *                                                                         skip_selector.data(), skip_selector.size(), 30)
 *     cdef stl_set[lxb_dom_node_t*] blacklisted_nodes
 */
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.init_size = 30;
  __pyx_t_5 = __pyx_f_15resiliparse_dom_5parse_4html_query_selector_all_impl(__pyx_v_ctx.root_node, __pyx_v_tree, __pyx_v_skip_selector.data(), __pyx_v_skip_selector.size(), &__pyx_t_6); if (unlikely(__pyx_t_5 == ((lxb_dom_collection_t *)((lxb_dom_collection_t *)-1L)))) __PYX_ERR(0, 1079, __pyx_L1_error)
  __pyx_v_blacklist_coll = __pyx_t_5;

  /* "resiliparse_dom/extract/html2text.pyx":1082
 *                                                                         skip_selector.data(), skip_selector.size(), 30)
 *     cdef stl_set[lxb_dom_node_t*] blacklisted_nodes
 *     if blacklist_coll != NULL:             # <<<<<<<<<<<<<<
 *         for i in range(lxb_dom_collection_length(blacklist_coll)):
 *             blacklisted_nodes.insert(lxb_dom_collection_node(blacklist_coll, i))
 */
  __pyx_t_3 = (__pyx_v_blacklist_coll != NULL);
  if (__pyx_t_3) {

    /* "resiliparse_dom/extract/html2text.pyx":1083
 *     cdef stl_set[lxb_dom_node_t*] blacklisted_nodes
 *     if blacklist_coll != NULL:
 *         for i in range(lxb_dom_collection_length(blacklist_coll)):             # <<<<<<<<<<<<<<
 *             blacklisted_nodes.insert(lxb_dom_collection_node(blacklist_coll, i))
 *         lxb_dom_collection_destroy(blacklist_coll, True)
 */
    __pyx_t_7 = lxb_dom_collection_length(__pyx_v_blacklist_coll);
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "resiliparse_dom/extract/html2text.pyx":1084
 *     if blacklist_coll != NULL:
 *         for i in range(lxb_dom_collection_length(blacklist_coll)):
 *             blacklisted_nodes.insert(lxb_dom_collection_node(blacklist_coll, i))             # <<<<<<<<<<<<<<
 *         lxb_dom_collection_destroy(blacklist_coll, True)
 * 
 */
      try {
        __pyx_v_blacklisted_nodes.insert(lxb_dom_collection_node(__pyx_v_blacklist_coll, __pyx_v_i));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1084, __pyx_L1_error)
      }
    }

    /* "resiliparse_dom/extract/html2text.pyx":1085
 *         for i in range(lxb_dom_collection_length(blacklist_coll)):
 *             blacklisted_nodes.insert(lxb_dom_collection_node(blacklist_coll, i))
 *         lxb_dom_collection_destroy(blacklist_coll, True)             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t base_depth = 0
 */
    (void)(lxb_dom_collection_destroy(__pyx_v_blacklist_coll, 1));

    /* "resiliparse_dom/extract/html2text.pyx":1082
 *                                                                         skip_selector.data(), skip_selector.size(), 30)
 *     cdef stl_set[lxb_dom_node_t*] blacklisted_nodes
 *     if blacklist_coll != NULL:             # <<<<<<<<<<<<<<
 *         for i in range(lxb_dom_collection_length(blacklist_coll)):
 *             blacklisted_nodes.insert(lxb_dom_collection_node(blacklist_coll, i))
 */
  }

  /* "resiliparse_dom/extract/html2text.pyx":1087
 *         lxb_dom_collection_destroy(blacklist_coll, True)
 * 
 *     cdef size_t base_depth = 0             # <<<<<<<<<<<<<<
 *     cdef lxb_dom_node_t* pnode = ctx.node
 *     while pnode.local_name != LXB_TAG_BODY and pnode.parent:
 */
  __pyx_v_base_depth = 0;

  /* "resiliparse_dom/extract/html2text.pyx":1088
 * 
 *     cdef size_t base_depth = 0
 *     cdef lxb_dom_node_t* pnode = ctx.node             # <<<<<<<<<<<<<<
 *     while pnode.local_name != LXB_TAG_BODY and pnode.parent:
 *         preinc(base_depth)
 */
  __pyx_t_1 = __pyx_v_ctx.node;
  __pyx_v_pnode = __pyx_t_1;

  /* "resiliparse_dom/extract/html2text.pyx":1089
 *     cdef size_t base_depth = 0
 *     cdef lxb_dom_node_t* pnode = ctx.node
 *     while pnode.local_name != LXB_TAG_BODY and pnode.parent:             # <<<<<<<<<<<<<<
 *         preinc(base_depth)
 *         pnode = pnode.parent
 */
  while (1) {
    __pyx_t_10 = (__pyx_v_pnode->local_name != LXB_TAG_BODY);
    if (__pyx_t_10) {
    } else {
      __pyx_t_3 = __pyx_t_10;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_10 = (__pyx_v_pnode->parent != 0);
    __pyx_t_3 = __pyx_t_10;
    __pyx_L12_bool_binop_done:;
    if (!__pyx_t_3) break;

    /* "resiliparse_dom/extract/html2text.pyx":1090
 *     cdef lxb_dom_node_t* pnode = ctx.node
 *     while pnode.local_name != LXB_TAG_BODY and pnode.parent:
 *         preinc(base_depth)             # <<<<<<<<<<<<<<
 *         pnode = pnode.parent
 * 
 */
    (void)((++__pyx_v_base_depth));

    /* "resiliparse_dom/extract/html2text.pyx":1091
 *     while pnode.local_name != LXB_TAG_BODY and pnode.parent:
 *         preinc(base_depth)
 *         pnode = pnode.parent             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[shared_ptr[ExtractNode]] extract_nodes
 */
    __pyx_t_1 = __pyx_v_pnode->parent;
    __pyx_v_pnode = __pyx_t_1;
  }

  /* "resiliparse_dom/extract/html2text.pyx":1094
 * 
 *     cdef vector[shared_ptr[ExtractNode]] extract_nodes
 *     cdef size_t chars_extracted = 0             # <<<<<<<<<<<<<<
 *     cdef size_t nodes_extracted = 0
 *     extract_nodes.reserve(150)
 */
  __pyx_v_chars_extracted = 0;

  /* "resiliparse_dom/extract/html2text.pyx":1095
 *     cdef vector[shared_ptr[ExtractNode]] extract_nodes
 *     cdef size_t chars_extracted = 0
 *     cdef size_t nodes_extracted = 0             # <<<<<<<<<<<<<<
 *     extract_nodes.reserve(150)
 *     while ctx.node:
 */
  __pyx_v_nodes_extracted = 0;

  /* "resiliparse_dom/extract/html2text.pyx":1096
 *     cdef size_t chars_extracted = 0
 *     cdef size_t nodes_extracted = 0
 *     extract_nodes.reserve(150)             # <<<<<<<<<<<<<<
 *     while ctx.node:
 *         # Skip everything except element and text nodes
 */
  try {
    __pyx_v_extract_nodes.reserve(0x96);
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1096, __pyx_L1_error)
  }

  /* "resiliparse_dom/extract/html2text.pyx":1097
 *     cdef size_t nodes_extracted = 0
 *     extract_nodes.reserve(150)
 *     while ctx.node:             # <<<<<<<<<<<<<<
 *         # Skip everything except element and text nodes
 *         if ctx.node.type != LXB_DOM_NODE_TYPE_ELEMENT and ctx.node.type != LXB_DOM_NODE_TYPE_TEXT:
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_ctx.node != 0);
    if (!__pyx_t_3) break;

    /* "resiliparse_dom/extract/html2text.pyx":1099
 *     while ctx.node:
 *         # Skip everything except element and text nodes
 *         if ctx.node.type != LXB_DOM_NODE_TYPE_ELEMENT and ctx.node.type != LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *             is_end_tag = True
 *             ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)
 */
    switch (__pyx_v_ctx.node->type) {
      case LXB_DOM_NODE_TYPE_ELEMENT:
      case LXB_DOM_NODE_TYPE_TEXT:
      __pyx_t_3 = 0;
      break;
      default:
      __pyx_t_3 = 1;
      break;
    }
    if (__pyx_t_3) {

      /* "resiliparse_dom/extract/html2text.pyx":1100
 *         # Skip everything except element and text nodes
 *         if ctx.node.type != LXB_DOM_NODE_TYPE_ELEMENT and ctx.node.type != LXB_DOM_NODE_TYPE_TEXT:
 *             is_end_tag = True             # <<<<<<<<<<<<<<
 *             ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)
 *             continue
 */
      __pyx_v_is_end_tag = 1;

      /* "resiliparse_dom/extract/html2text.pyx":1101
 *         if ctx.node.type != LXB_DOM_NODE_TYPE_ELEMENT and ctx.node.type != LXB_DOM_NODE_TYPE_TEXT:
 *             is_end_tag = True
 *             ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_t_11.__pyx_n = 2;
      __pyx_t_11.depth = (&__pyx_v_ctx.depth);
      __pyx_t_11.end_tag = (&__pyx_v_is_end_tag);
      __pyx_t_1 = __pyx_f_15resiliparse_dom_5parse_4html_next_node(__pyx_v_ctx.root_node, __pyx_v_ctx.node, &__pyx_t_11); 
      __pyx_v_ctx.node = __pyx_t_1;

      /* "resiliparse_dom/extract/html2text.pyx":1102
 *             is_end_tag = True
 *             ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         # Skip blacklisted or non-main-content nodes
 */
      goto __pyx_L14_continue;

      /* "resiliparse_dom/extract/html2text.pyx":1099
 *     while ctx.node:
 *         # Skip everything except element and text nodes
 *         if ctx.node.type != LXB_DOM_NODE_TYPE_ELEMENT and ctx.node.type != LXB_DOM_NODE_TYPE_TEXT:             # <<<<<<<<<<<<<<
 *             is_end_tag = True
 *             ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":1105
 * 
 *         # Skip blacklisted or non-main-content nodes
 *         if blacklisted_nodes.find(ctx.node) != blacklisted_nodes.end() or \             # <<<<<<<<<<<<<<
 *                 (main_content and not _is_main_content_node(ctx.node, ctx.depth + base_depth, comments)):
 *             is_end_tag = True
 */
    __pyx_t_10 = (__pyx_v_blacklisted_nodes.find(__pyx_v_ctx.node) != __pyx_v_blacklisted_nodes.end());
    if (!__pyx_t_10) {
    } else {
      __pyx_t_3 = __pyx_t_10;
      goto __pyx_L18_bool_binop_done;
    }

    /* "resiliparse_dom/extract/html2text.pyx":1106
 *         # Skip blacklisted or non-main-content nodes
 *         if blacklisted_nodes.find(ctx.node) != blacklisted_nodes.end() or \
 *                 (main_content and not _is_main_content_node(ctx.node, ctx.depth + base_depth, comments)):             # <<<<<<<<<<<<<<
 *             is_end_tag = True
 *             ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)
 */
    if (__pyx_v_main_content) {
    } else {
      __pyx_t_3 = __pyx_v_main_content;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_10 = (!__pyx_f_15resiliparse_dom_7extract_9html2text__is_main_content_node(__pyx_v_ctx.node, (__pyx_v_ctx.depth + __pyx_v_base_depth), __pyx_v_comments));
    __pyx_t_3 = __pyx_t_10;
    __pyx_L18_bool_binop_done:;

    /* "resiliparse_dom/extract/html2text.pyx":1105
 * 
 *         # Skip blacklisted or non-main-content nodes
 *         if blacklisted_nodes.find(ctx.node) != blacklisted_nodes.end() or \             # <<<<<<<<<<<<<<
 *                 (main_content and not _is_main_content_node(ctx.node, ctx.depth + base_depth, comments)):
 *             is_end_tag = True
 */
    if (__pyx_t_3) {

      /* "resiliparse_dom/extract/html2text.pyx":1107
 *         if blacklisted_nodes.find(ctx.node) != blacklisted_nodes.end() or \
 *                 (main_content and not _is_main_content_node(ctx.node, ctx.depth + base_depth, comments)):
 *             is_end_tag = True             # <<<<<<<<<<<<<<
 *             ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)
 *             continue
 */
      __pyx_v_is_end_tag = 1;

      /* "resiliparse_dom/extract/html2text.pyx":1108
 *                 (main_content and not _is_main_content_node(ctx.node, ctx.depth + base_depth, comments)):
 *             is_end_tag = True
 *             ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_t_11.__pyx_n = 2;
      __pyx_t_11.depth = (&__pyx_v_ctx.depth);
      __pyx_t_11.end_tag = (&__pyx_v_is_end_tag);
      __pyx_t_1 = __pyx_f_15resiliparse_dom_5parse_4html_next_node(__pyx_v_ctx.root_node, __pyx_v_ctx.node, &__pyx_t_11); 
      __pyx_v_ctx.node = __pyx_t_1;

      /* "resiliparse_dom/extract/html2text.pyx":1109
 *             is_end_tag = True
 *             ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         _extract_cb(extract_nodes, ctx, is_end_tag)
 */
      goto __pyx_L14_continue;

      /* "resiliparse_dom/extract/html2text.pyx":1105
 * 
 *         # Skip blacklisted or non-main-content nodes
 *         if blacklisted_nodes.find(ctx.node) != blacklisted_nodes.end() or \             # <<<<<<<<<<<<<<
 *                 (main_content and not _is_main_content_node(ctx.node, ctx.depth + base_depth, comments)):
 *             is_end_tag = True
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":1111
 *             continue
 * 
 *         _extract_cb(extract_nodes, ctx, is_end_tag)             # <<<<<<<<<<<<<<
 *         if extract_nodes.size() > nodes_extracted and deref(extract_nodes.back()).text_contents:
 *             chars_extracted += deref(deref(extract_nodes.back()).text_contents).size()
 */
    __pyx_f_15resiliparse_dom_7extract_9html2text__extract_cb(__pyx_v_extract_nodes, __pyx_v_ctx, __pyx_v_is_end_tag);

    /* "resiliparse_dom/extract/html2text.pyx":1112
 * 
 *         _extract_cb(extract_nodes, ctx, is_end_tag)
 *         if extract_nodes.size() > nodes_extracted and deref(extract_nodes.back()).text_contents:             # <<<<<<<<<<<<<<
 *             chars_extracted += deref(deref(extract_nodes.back()).text_contents).size()
 *             preinc(nodes_extracted)
 */
    __pyx_t_10 = (__pyx_v_extract_nodes.size() > __pyx_v_nodes_extracted);
    if (__pyx_t_10) {
    } else {
      __pyx_t_3 = __pyx_t_10;
      goto __pyx_L22_bool_binop_done;
    }
    __pyx_t_12 = (*__pyx_v_extract_nodes.back()).text_contents.operator bool();
    __pyx_t_3 = __pyx_t_12;
    __pyx_L22_bool_binop_done:;
    if (__pyx_t_3) {

      /* "resiliparse_dom/extract/html2text.pyx":1113
 *         _extract_cb(extract_nodes, ctx, is_end_tag)
 *         if extract_nodes.size() > nodes_extracted and deref(extract_nodes.back()).text_contents:
 *             chars_extracted += deref(deref(extract_nodes.back()).text_contents).size()             # <<<<<<<<<<<<<<
 *             preinc(nodes_extracted)
 * 
 */
      __pyx_v_chars_extracted = (__pyx_v_chars_extracted + (*(*__pyx_v_extract_nodes.back()).text_contents).size());

      /* "resiliparse_dom/extract/html2text.pyx":1114
 *         if extract_nodes.size() > nodes_extracted and deref(extract_nodes.back()).text_contents:
 *             chars_extracted += deref(deref(extract_nodes.back()).text_contents).size()
 *             preinc(nodes_extracted)             # <<<<<<<<<<<<<<
 * 
 *         ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)
 */
      (void)((++__pyx_v_nodes_extracted));

      /* "resiliparse_dom/extract/html2text.pyx":1112
 * 
 *         _extract_cb(extract_nodes, ctx, is_end_tag)
 *         if extract_nodes.size() > nodes_extracted and deref(extract_nodes.back()).text_contents:             # <<<<<<<<<<<<<<
 *             chars_extracted += deref(deref(extract_nodes.back()).text_contents).size()
 *             preinc(nodes_extracted)
 */
    }

    /* "resiliparse_dom/extract/html2text.pyx":1116
 *             preinc(nodes_extracted)
 * 
 *         ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)             # <<<<<<<<<<<<<<
 * 
 *     return rstrip_str(_serialize_extract_nodes(extract_nodes, ctx.opts, <size_t>(chars_extracted * 1.2)))
 */
    __pyx_t_11.__pyx_n = 2;
    __pyx_t_11.depth = (&__pyx_v_ctx.depth);
    __pyx_t_11.end_tag = (&__pyx_v_is_end_tag);
    __pyx_t_1 = __pyx_f_15resiliparse_dom_5parse_4html_next_node(__pyx_v_ctx.root_node, __pyx_v_ctx.node, &__pyx_t_11); 
    __pyx_v_ctx.node = __pyx_t_1;
    __pyx_L14_continue:;
  }

  /* "resiliparse_dom/extract/html2text.pyx":1118
 *         ctx.node = next_node(ctx.root_node, ctx.node, &ctx.depth, &is_end_tag)
 * 
 *     return rstrip_str(_serialize_extract_nodes(extract_nodes, ctx.opts, <size_t>(chars_extracted * 1.2)))             # <<<<<<<<<<<<<<
 */
  __pyx_r = rstrip_str(__pyx_f_15resiliparse_dom_7extract_9html2text__serialize_extract_nodes(__pyx_v_extract_nodes, __pyx_v_ctx.opts, ((size_t)(__pyx_v_chars_extracted * 1.2))));
  goto __pyx_L0;

  /* "resiliparse_dom/extract/html2text.pyx":1028
 *     return extracted.decode(errors='ignore')
 * 
 * cdef string _extract_plain_text_impl(HTMLTree tree,             # <<<<<<<<<<<<<<
 *                                      FormattingOpts preserve_formatting,
 *                                      bint main_content,
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("resiliparse_dom.extract.html2text._extract_plain_text_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_Parameter_html_is_neither_string, __pyx_k_Parameter_html_is_neither_string, sizeof(__pyx_k_Parameter_html_is_neither_string), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 0, 1, 1},
    {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
    {&__pyx_kp_b__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 0, 0},
    {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
    {&__pyx_n_b_alert, __pyx_k_alert, sizeof(__pyx_k_alert), 0, 0, 0, 1},
    {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
    {&__pyx_n_s_alt_texts, __pyx_k_alt_texts, sizeof(__pyx_k_alt_texts), 0, 0, 1, 1},
    {&__pyx_n_b_area, __pyx_k_area, sizeof(__pyx_k_area), 0, 0, 0, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_b_audio, __pyx_k_audio, sizeof(__pyx_k_audio), 0, 0, 0, 1},
    {&__pyx_n_b_banner, __pyx_k_banner, sizeof(__pyx_k_banner), 0, 0, 0, 1},
    {&__pyx_n_s_body, __pyx_k_body, sizeof(__pyx_k_body), 0, 0, 1, 1},
    {&__pyx_n_b_button, __pyx_k_button, sizeof(__pyx_k_button), 0, 0, 0, 1},
    {&__pyx_n_b_checkbox, __pyx_k_checkbox, sizeof(__pyx_k_checkbox), 0, 0, 0, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_b_comment, __pyx_k_comment, sizeof(__pyx_k_comment), 0, 0, 0, 1},
    {&__pyx_n_s_comments, __pyx_k_comments, sizeof(__pyx_k_comments), 0, 0, 1, 1},
    {&__pyx_n_b_complementary, __pyx_k_complementary, sizeof(__pyx_k_complementary), 0, 0, 0, 1},
    {&__pyx_n_b_contentinfo, __pyx_k_contentinfo, sizeof(__pyx_k_contentinfo), 0, 0, 0, 1},
    {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
    {&__pyx_n_b_dialog, __pyx_k_dialog, sizeof(__pyx_k_dialog), 0, 0, 0, 1},
    {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
    {&__pyx_n_b_embed, __pyx_k_embed, sizeof(__pyx_k_embed), 0, 0, 0, 1},
    {&__pyx_n_b_embedimg, __pyx_k_embedimg, sizeof(__pyx_k_embedimg), 0, 0, 0, 1},
    {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
    {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
    {&__pyx_n_s_extract_plain_text, __pyx_k_extract_plain_text, sizeof(__pyx_k_extract_plain_text), 0, 0, 1, 1},
    {&__pyx_n_u_extract_plain_text, __pyx_k_extract_plain_text, sizeof(__pyx_k_extract_plain_text), 0, 1, 0, 1},
    {&__pyx_n_s_extract_simplified_dom, __pyx_k_extract_simplified_dom, sizeof(__pyx_k_extract_simplified_dom), 0, 0, 1, 1},
    {&__pyx_n_s_extracted, __pyx_k_extracted, sizeof(__pyx_k_extracted), 0, 0, 1, 1},
    {&__pyx_n_b_figcaption, __pyx_k_figcaption, sizeof(__pyx_k_figcaption), 0, 0, 0, 1},
    {&__pyx_n_b_figure, __pyx_k_figure, sizeof(__pyx_k_figure), 0, 0, 0, 1},
    {&__pyx_n_s_form_fields, __pyx_k_form_fields, sizeof(__pyx_k_form_fields), 0, 0, 1, 1},
    {&__pyx_n_s_formatting_opts, __pyx_k_formatting_opts, sizeof(__pyx_k_formatting_opts), 0, 0, 1, 1},
    {&__pyx_n_b_frame, __pyx_k_frame, sizeof(__pyx_k_frame), 0, 0, 0, 1},
    {&__pyx_n_s_html, __pyx_k_html, sizeof(__pyx_k_html), 0, 0, 1, 1},
    {&__pyx_n_b_iframe, __pyx_k_iframe, sizeof(__pyx_k_iframe), 0, 0, 0, 1},
    {&__pyx_n_u_ignore, __pyx_k_ignore, sizeof(__pyx_k_ignore), 0, 1, 0, 1},
    {&__pyx_n_b_img, __pyx_k_img, sizeof(__pyx_k_img), 0, 0, 0, 1},
    {&__pyx_n_b_input, __pyx_k_input, sizeof(__pyx_k_input), 0, 0, 0, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
    {&__pyx_n_b_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 0, 1},
    {&__pyx_n_s_links, __pyx_k_links, sizeof(__pyx_k_links), 0, 0, 1, 1},
    {&__pyx_n_s_list_bullets, __pyx_k_list_bullets, sizeof(__pyx_k_list_bullets), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_main_content, __pyx_k_main_content, sizeof(__pyx_k_main_content), 0, 0, 1, 1},
    {&__pyx_n_b_menu, __pyx_k_menu, sizeof(__pyx_k_menu), 0, 0, 0, 1},
    {&__pyx_n_b_menubar, __pyx_k_menubar, sizeof(__pyx_k_menubar), 0, 0, 0, 1},
    {&__pyx_n_b_menuitem, __pyx_k_menuitem, sizeof(__pyx_k_menuitem), 0, 0, 0, 1},
    {&__pyx_n_u_minimal_html, __pyx_k_minimal_html, sizeof(__pyx_k_minimal_html), 0, 1, 0, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_b_navigation, __pyx_k_navigation, sizeof(__pyx_k_navigation), 0, 0, 0, 1},
    {&__pyx_n_b_noscript, __pyx_k_noscript, sizeof(__pyx_k_noscript), 0, 0, 0, 1},
    {&__pyx_n_s_noscript, __pyx_k_noscript, sizeof(__pyx_k_noscript), 0, 0, 1, 1},
    {&__pyx_n_b_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 0, 1},
    {&__pyx_n_b_option, __pyx_k_option, sizeof(__pyx_k_option), 0, 0, 0, 1},
    {&__pyx_n_s_parse, __pyx_k_parse, sizeof(__pyx_k_parse), 0, 0, 1, 1},
    {&__pyx_n_b_presentation, __pyx_k_presentation, sizeof(__pyx_k_presentation), 0, 0, 0, 1},
    {&__pyx_n_s_preserve_formatting, __pyx_k_preserve_formatting, sizeof(__pyx_k_preserve_formatting), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_b_radio, __pyx_k_radio, sizeof(__pyx_k_radio), 0, 0, 0, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
    {&__pyx_kp_s_resiliparse_dom_extract_html2tex, __pyx_k_resiliparse_dom_extract_html2tex, sizeof(__pyx_k_resiliparse_dom_extract_html2tex), 0, 0, 1, 0},
    {&__pyx_n_s_resiliparse_dom_extract_html2tex_2, __pyx_k_resiliparse_dom_extract_html2tex_2, sizeof(__pyx_k_resiliparse_dom_extract_html2tex_2), 0, 0, 1, 1},
    {&__pyx_n_b_script, __pyx_k_script, sizeof(__pyx_k_script), 0, 0, 0, 1},
    {&__pyx_n_b_search, __pyx_k_search, sizeof(__pyx_k_search), 0, 0, 0, 1},
    {&__pyx_n_b_searchbox, __pyx_k_searchbox, sizeof(__pyx_k_searchbox), 0, 0, 0, 1},
    {&__pyx_n_b_select, __pyx_k_select, sizeof(__pyx_k_select), 0, 0, 0, 1},
    {&__pyx_n_b_separator, __pyx_k_separator, sizeof(__pyx_k_separator), 0, 0, 0, 1},
    {&__pyx_n_s_skip_elements, __pyx_k_skip_elements, sizeof(__pyx_k_skip_elements), 0, 0, 1, 1},
    {&__pyx_n_s_skip_selector, __pyx_k_skip_selector, sizeof(__pyx_k_skip_selector), 0, 0, 1, 1},
    {&__pyx_n_s_skip_selectors, __pyx_k_skip_selectors, sizeof(__pyx_k_skip_selectors), 0, 0, 1, 1},
    {&__pyx_n_b_style, __pyx_k_style, sizeof(__pyx_k_style), 0, 0, 0, 1},
    {&__pyx_n_b_svg, __pyx_k_svg, sizeof(__pyx_k_svg), 0, 0, 0, 1},
    {&__pyx_n_b_tab, __pyx_k_tab, sizeof(__pyx_k_tab), 0, 0, 0, 1},
    {&__pyx_n_b_template, __pyx_k_template, sizeof(__pyx_k_template), 0, 0, 0, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_b_textarea, __pyx_k_textarea, sizeof(__pyx_k_textarea), 0, 0, 0, 1},
    {&__pyx_n_b_toolbar, __pyx_k_toolbar, sizeof(__pyx_k_toolbar), 0, 0, 0, 1},
    {&__pyx_n_b_tooltip, __pyx_k_tooltip, sizeof(__pyx_k_tooltip), 0, 0, 0, 1},
    {&__pyx_n_s_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_b_video, __pyx_k_video, sizeof(__pyx_k_video), 0, 0, 0, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 119, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 778, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "resiliparse_dom/extract/html2text.pyx":778
 *         tree = <HTMLTree>html
 *     else:
 *         raise TypeError('Parameter "html" is neither string nor HTMLTree.')             # <<<<<<<<<<<<<<
 * 
 *     if not check_node(tree.body):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Parameter_html_is_neither_string); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "resiliparse_dom/extract/html2text.pyx":809
 *             comments,
 *             skip_selector)
 *     return extracted.decode(errors='ignore').replace('\x00', '')             # <<<<<<<<<<<<<<
 * 
 * cdef string _extract_simplified_dom_impl(HTMLTree tree,
 */
  __pyx_tuple__5 = PyTuple_Pack(2, __pyx_kp_u__4, __pyx_kp_u__2); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "resiliparse_dom/extract/html2text.pyx":756
 * 
 * 
 * def extract_simplified_dom(html,             # <<<<<<<<<<<<<<
 *                           bint preserve_formatting=True,
 *                           bint main_content=False,
 */
  __pyx_tuple__6 = PyTuple_Pack(15, __pyx_n_s_html, __pyx_n_s_preserve_formatting, __pyx_n_s_main_content, __pyx_n_s_list_bullets, __pyx_n_s_alt_texts, __pyx_n_s_links, __pyx_n_s_form_fields, __pyx_n_s_noscript, __pyx_n_s_comments, __pyx_n_s_skip_elements, __pyx_n_s_tree, __pyx_n_s_skip_selectors, __pyx_n_s_skip_selector, __pyx_n_s_extracted, __pyx_n_s_e); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(10, 0, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_resiliparse_dom_extract_html2tex, __pyx_n_s_extract_simplified_dom, 756, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 756, __pyx_L1_error)

  /* "resiliparse_dom/extract/html2text.pyx":932
 *     return False
 * 
 * def extract_plain_text(html,             # <<<<<<<<<<<<<<
 *                        preserve_formatting=True,
 *                        bint main_content=False,
 */
  __pyx_tuple__8 = PyTuple_Pack(16, __pyx_n_s_html, __pyx_n_s_preserve_formatting, __pyx_n_s_main_content, __pyx_n_s_list_bullets, __pyx_n_s_alt_texts, __pyx_n_s_links, __pyx_n_s_form_fields, __pyx_n_s_noscript, __pyx_n_s_comments, __pyx_n_s_skip_elements, __pyx_n_s_tree, __pyx_n_s_skip_selectors, __pyx_n_s_skip_selector, __pyx_n_s_formatting_opts, __pyx_n_s_extracted, __pyx_n_s_e); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(10, 0, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_resiliparse_dom_extract_html2tex, __pyx_n_s_extract_plain_text, 932, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PySet_Type_update.type = (PyObject*)&PySet_Type;
  __pyx_umethod_PySet_Type_update.method_name = &__pyx_n_s_update;
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("resiliparse_dom.parse.html"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_15resiliparse_dom_5parse_4html_DOMElementClassList = __Pyx_ImportType_3_0_10(__pyx_t_1, "resiliparse_dom.parse.html", "DOMElementClassList", sizeof(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMElementClassList), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMElementClassList),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_15resiliparse_dom_5parse_4html_DOMElementClassList) __PYX_ERR(2, 73, __pyx_L1_error)
  __pyx_vtabptr_15resiliparse_dom_5parse_4html_DOMElementClassList = (struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMElementClassList*)__Pyx_GetVtable(__pyx_ptype_15resiliparse_dom_5parse_4html_DOMElementClassList); if (unlikely(!__pyx_vtabptr_15resiliparse_dom_5parse_4html_DOMElementClassList)) __PYX_ERR(2, 73, __pyx_L1_error)
  __pyx_ptype_15resiliparse_dom_5parse_4html_DOMNode = __Pyx_ImportType_3_0_10(__pyx_t_1, "resiliparse_dom.parse.html", "DOMNode", sizeof(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMNode),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_15resiliparse_dom_5parse_4html_DOMNode) __PYX_ERR(2, 82, __pyx_L1_error)
  __pyx_vtabptr_15resiliparse_dom_5parse_4html_DOMNode = (struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMNode*)__Pyx_GetVtable(__pyx_ptype_15resiliparse_dom_5parse_4html_DOMNode); if (unlikely(!__pyx_vtabptr_15resiliparse_dom_5parse_4html_DOMNode)) __PYX_ERR(2, 82, __pyx_L1_error)
  __pyx_ptype_15resiliparse_dom_5parse_4html_DOMCollection = __Pyx_ImportType_3_0_10(__pyx_t_1, "resiliparse_dom.parse.html", "DOMCollection", sizeof(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(struct __pyx_obj_15resiliparse_dom_5parse_4html_DOMCollection),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_15resiliparse_dom_5parse_4html_DOMCollection) __PYX_ERR(2, 113, __pyx_L1_error)
  __pyx_vtabptr_15resiliparse_dom_5parse_4html_DOMCollection = (struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_DOMCollection*)__Pyx_GetVtable(__pyx_ptype_15resiliparse_dom_5parse_4html_DOMCollection); if (unlikely(!__pyx_vtabptr_15resiliparse_dom_5parse_4html_DOMCollection)) __PYX_ERR(2, 113, __pyx_L1_error)
  __pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree = __Pyx_ImportType_3_0_10(__pyx_t_1, "resiliparse_dom.parse.html", "HTMLTree", sizeof(struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree) __PYX_ERR(2, 149, __pyx_L1_error)
  __pyx_vtabptr_15resiliparse_dom_5parse_4html_HTMLTree = (struct __pyx_vtabstruct_15resiliparse_dom_5parse_4html_HTMLTree*)__Pyx_GetVtable(__pyx_ptype_15resiliparse_dom_5parse_4html_HTMLTree); if (unlikely(!__pyx_vtabptr_15resiliparse_dom_5parse_4html_HTMLTree)) __PYX_ERR(2, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("resiliparse_dom.parse.html"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_10(__pyx_t_1, "next_node", (void (**)(void))&__pyx_f_15resiliparse_dom_5parse_4html_next_node, "lxb_dom_node_t *(lxb_dom_node_t const *, lxb_dom_node_t *, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_next_node *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_10(__pyx_t_1, "get_node_text", (void (**)(void))&__pyx_f_15resiliparse_dom_5parse_4html_get_node_text, "std::string (lxb_dom_node_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_10(__pyx_t_1, "query_selector_all_impl", (void (**)(void))&__pyx_f_15resiliparse_dom_5parse_4html_query_selector_all_impl, "lxb_dom_collection_t *(lxb_dom_node_t *, struct __pyx_obj_15resiliparse_dom_5parse_4html_HTMLTree *, char const *, size_t, struct __pyx_opt_args_15resiliparse_dom_5parse_4html_query_selector_all_impl *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_10(__pyx_t_1, "is_block_element", (void (**)(void))&__pyx_f_15resiliparse_dom_5parse_4html_is_block_element, "int (lxb_tag_id_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_html2text(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_html2text},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "html2text",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inithtml2text(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inithtml2text(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_html2text(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_html2text(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_html2text(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::set<std::string>  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'html2text' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("html2text", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "html2text" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_html2text(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_resiliparse_dom__extract__html2text) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "resiliparse_dom.extract.html2text")) {
      if (unlikely((PyDict_SetItemString(modules, "resiliparse_dom.extract.html2text", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely((__Pyx_modinit_function_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "resiliparse_dom/extract/html2text.pyx":33
 * 
 * 
 * __all__ = [             # <<<<<<<<<<<<<<
 *     'extract_plain_text',
 * ]
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_extract_plain_text);
  __Pyx_GIVEREF(__pyx_n_u_extract_plain_text);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_extract_plain_text)) __PYX_ERR(0, 33, __pyx_L1_error);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_2) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "resiliparse_dom/extract/html2text.pyx":129
 * 
 * 
 * cdef string LIST_BULLET = <const char*>b'\xe2\x80\xa2'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_LIST_BULLET = ((char const *)((char const *)"\342\200\242"));

  /* "resiliparse_dom/extract/html2text.pyx":466
 * 
 * cdef RE2Options re_opts
 * re_opts.set_case_sensitive(False)             # <<<<<<<<<<<<<<
 * 
 * cdef RE2 article_cls_regex = RE2(rb'(?:^|[\s_-])(?:article|entry|post|story|single[_-]?post|main[_-]content)(?:content|body|text|page)?(?:$|[\s_-])', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts.set_case_sensitive(0);

  /* "resiliparse_dom/extract/html2text.pyx":468
 * re_opts.set_case_sensitive(False)
 * 
 * cdef RE2 article_cls_regex = RE2(rb'(?:^|[\s_-])(?:article|entry|post|story|single[_-]?post|main[_-]content)(?:content|body|text|page)?(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 nav_cls_regex = RE2(rb'(?:^|\s)(?:(?:l|m|wp|main|site|page|sub|article|global|sticky|main)[_-]*)?(?:nav(?:igation)?|menu(?:[_-]item)?|drop[_-]?down|bread[_-]?crumbs?)|(?:links?[_-]?(?:bar|box|list|container|section|wrapp(?:er))?)(?:$|[\s_-])', re_opts)
 * cdef RE2 recommended_cls_regex = RE2(rb'(?:^|[\s_-])(?:trends|trending|recommended|featured|popular|editors?[_-]picks|related|read-next|(?:related|more|other)[_-]?(?:links|articles|posts|guides|stories))(?:$|[\s_-])', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_article_cls_regex = RE2Stack(((char const *)"(?:^|[\\s_-])(?:article|entry|post|story|single[_-]?post|main[_-]content)(?:content|body|text|page)?(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":469
 * 
 * cdef RE2 article_cls_regex = RE2(rb'(?:^|[\s_-])(?:article|entry|post|story|single[_-]?post|main[_-]content)(?:content|body|text|page)?(?:$|[\s_-])', re_opts)
 * cdef RE2 nav_cls_regex = RE2(rb'(?:^|\s)(?:(?:l|m|wp|main|site|page|sub|article|global|sticky|main)[_-]*)?(?:nav(?:igation)?|menu(?:[_-]item)?|drop[_-]?down|bread[_-]?crumbs?)|(?:links?[_-]?(?:bar|box|list|container|section|wrapp(?:er))?)(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 recommended_cls_regex = RE2(rb'(?:^|[\s_-])(?:trends|trending|recommended|featured|popular|editors?[_-]picks|related|read-next|(?:related|more|other)[_-]?(?:links|articles|posts|guides|stories))(?:$|[\s_-])', re_opts)
 * cdef RE2 landmark_id_regex = RE2(rb'^(?:(?:l|wp|global|page|site|full|sticky)[_-]*)?(?:(?:head|foot)(?:er)?|right)$', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_nav_cls_regex = RE2Stack(((char const *)"(?:^|\\s)(?:(?:l|m|wp|main|site|page|sub|article|global|sticky|main)[_-]*)?(?:nav(?:igation)?|menu(?:[_-]item)?|drop[_-]?down|bread[_-]?crumbs?)|(?:links?[_-]?(?:bar|box|list|container|section|wrapp(?:er))?)(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":470
 * cdef RE2 article_cls_regex = RE2(rb'(?:^|[\s_-])(?:article|entry|post|story|single[_-]?post|main[_-]content)(?:content|body|text|page)?(?:$|[\s_-])', re_opts)
 * cdef RE2 nav_cls_regex = RE2(rb'(?:^|\s)(?:(?:l|m|wp|main|site|page|sub|article|global|sticky|main)[_-]*)?(?:nav(?:igation)?|menu(?:[_-]item)?|drop[_-]?down|bread[_-]?crumbs?)|(?:links?[_-]?(?:bar|box|list|container|section|wrapp(?:er))?)(?:$|[\s_-])', re_opts)
 * cdef RE2 recommended_cls_regex = RE2(rb'(?:^|[\s_-])(?:trends|trending|recommended|featured|popular|editors?[_-]picks|related|read-next|(?:related|more|other)[_-]?(?:links|articles|posts|guides|stories))(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 landmark_id_regex = RE2(rb'^(?:(?:l|wp|global|page|site|full|sticky)[_-]*)?(?:(?:head|foot)(?:er)?|right)$', re_opts)
 * cdef RE2 header_cls_regex = RE2(rb'(?:^|\s)(?:l|m|wp|global|page|site|full|sticky)[_-]*header(?:[_-]?wrap(?:per)?|bar)?(?:$|\s)', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_recommended_cls_regex = RE2Stack(((char const *)"(?:^|[\\s_-])(?:trends|trending|recommended|featured|popular|editors?[_-]picks|related|read-next|(?:related|more|other)[_-]?(?:links|articles|posts|guides|stories))(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":471
 * cdef RE2 nav_cls_regex = RE2(rb'(?:^|\s)(?:(?:l|m|wp|main|site|page|sub|article|global|sticky|main)[_-]*)?(?:nav(?:igation)?|menu(?:[_-]item)?|drop[_-]?down|bread[_-]?crumbs?)|(?:links?[_-]?(?:bar|box|list|container|section|wrapp(?:er))?)(?:$|[\s_-])', re_opts)
 * cdef RE2 recommended_cls_regex = RE2(rb'(?:^|[\s_-])(?:trends|trending|recommended|featured|popular|editors?[_-]picks|related|read-next|(?:related|more|other)[_-]?(?:links|articles|posts|guides|stories))(?:$|[\s_-])', re_opts)
 * cdef RE2 landmark_id_regex = RE2(rb'^(?:(?:l|wp|global|page|site|full|sticky)[_-]*)?(?:(?:head|foot)(?:er)?|right)$', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 header_cls_regex = RE2(rb'(?:^|\s)(?:l|m|wp|global|page|site|full|sticky)[_-]*header(?:[_-]?wrap(?:per)?|bar)?(?:$|\s)', re_opts)
 * cdef RE2 footer_cls_regex = RE2(rb'(?:^|[\s_-])(?:global|page|site|copyright)?(?:footer|copyright|cookie|consent|legal|fcontainer)(?:$|[\s_-])', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_landmark_id_regex = RE2Stack(((char const *)"^(?:(?:l|wp|global|page|site|full|sticky)[_-]*)?(?:(?:head|foot)(?:er)?|right)$"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":472
 * cdef RE2 recommended_cls_regex = RE2(rb'(?:^|[\s_-])(?:trends|trending|recommended|featured|popular|editors?[_-]picks|related|read-next|(?:related|more|other)[_-]?(?:links|articles|posts|guides|stories))(?:$|[\s_-])', re_opts)
 * cdef RE2 landmark_id_regex = RE2(rb'^(?:(?:l|wp|global|page|site|full|sticky)[_-]*)?(?:(?:head|foot)(?:er)?|right)$', re_opts)
 * cdef RE2 header_cls_regex = RE2(rb'(?:^|\s)(?:l|m|wp|global|page|site|full|sticky)[_-]*header(?:[_-]?wrap(?:per)?|bar)?(?:$|\s)', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 footer_cls_regex = RE2(rb'(?:^|[\s_-])(?:global|page|site|copyright)?(?:footer|copyright|cookie|consent|legal|fcontainer)(?:$|[\s_-])', re_opts)
 * cdef RE2 post_meta_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:post|entry|article(?:page)?|content|story|section)[_-]*(?:text[_-]*)?(?:footer|teaser|meta(?:[_-]?data)?|subline|sidebar|author(?:name)?|published|timestamp|date|posted[_-]?on|info|labels?|tags?|keywords|category)|by[_-]?line|date[_-]?line|author-date|submitted(?:-by)?)|meta[_-]?data(?:$|[\s_-])', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_header_cls_regex = RE2Stack(((char const *)"(?:^|\\s)(?:l|m|wp|global|page|site|full|sticky)[_-]*header(?:[_-]?wrap(?:per)?|bar)?(?:$|\\s)"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":473
 * cdef RE2 landmark_id_regex = RE2(rb'^(?:(?:l|wp|global|page|site|full|sticky)[_-]*)?(?:(?:head|foot)(?:er)?|right)$', re_opts)
 * cdef RE2 header_cls_regex = RE2(rb'(?:^|\s)(?:l|m|wp|global|page|site|full|sticky)[_-]*header(?:[_-]?wrap(?:per)?|bar)?(?:$|\s)', re_opts)
 * cdef RE2 footer_cls_regex = RE2(rb'(?:^|[\s_-])(?:global|page|site|copyright)?(?:footer|copyright|cookie|consent|legal|fcontainer)(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 post_meta_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:post|entry|article(?:page)?|content|story|section)[_-]*(?:text[_-]*)?(?:footer|teaser|meta(?:[_-]?data)?|subline|sidebar|author(?:name)?|published|timestamp|date|posted[_-]?on|info|labels?|tags?|keywords|category)|by[_-]?line|date[_-]?line|author-date|submitted(?:-by)?)|meta[_-]?data(?:$|[\s_-])', re_opts)
 * cdef RE2 sidebar_cls_regex = RE2(rb'(?:^|\s)(?:(?:l|wp|right|left|global|sticky)[_-]*)?(?:(?:side|sticky)[_-]?(?:bars?|box)|one-third)(?:$|[\s_-])', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_footer_cls_regex = RE2Stack(((char const *)"(?:^|[\\s_-])(?:global|page|site|copyright)?(?:footer|copyright|cookie|consent|legal|fcontainer)(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":474
 * cdef RE2 header_cls_regex = RE2(rb'(?:^|\s)(?:l|m|wp|global|page|site|full|sticky)[_-]*header(?:[_-]?wrap(?:per)?|bar)?(?:$|\s)', re_opts)
 * cdef RE2 footer_cls_regex = RE2(rb'(?:^|[\s_-])(?:global|page|site|copyright)?(?:footer|copyright|cookie|consent|legal|fcontainer)(?:$|[\s_-])', re_opts)
 * cdef RE2 post_meta_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:post|entry|article(?:page)?|content|story|section)[_-]*(?:text[_-]*)?(?:footer|teaser|meta(?:[_-]?data)?|subline|sidebar|author(?:name)?|published|timestamp|date|posted[_-]?on|info|labels?|tags?|keywords|category)|by[_-]?line|date[_-]?line|author-date|submitted(?:-by)?)|meta[_-]?data(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 sidebar_cls_regex = RE2(rb'(?:^|\s)(?:(?:l|wp|right|left|global|sticky)[_-]*)?(?:(?:side|sticky)[_-]?(?:bars?|box)|one-third)(?:$|[\s_-])', re_opts)
 * cdef RE2 search_cls_regex = RE2(rb'(?:^|[\s_-])search(?:[_-]?(?:bar|facility|box))?(?:$|\s)', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_post_meta_cls_regex = RE2Stack(((char const *)"(?:^|[\\s_-])(?:(?:post|entry|article(?:page)?|content|story|section)[_-]*(?:text[_-]*)?(?:footer|teaser|meta(?:[_-]?data)?|subline|sidebar|author(?:name)?|published|timestamp|date|posted[_-]?on|info|labels?|tags?|keywords|category)|by[_-]?line|date[_-]?line|author-date|submitted(?:-by)?)|meta[_-]?data(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":475
 * cdef RE2 footer_cls_regex = RE2(rb'(?:^|[\s_-])(?:global|page|site|copyright)?(?:footer|copyright|cookie|consent|legal|fcontainer)(?:$|[\s_-])', re_opts)
 * cdef RE2 post_meta_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:post|entry|article(?:page)?|content|story|section)[_-]*(?:text[_-]*)?(?:footer|teaser|meta(?:[_-]?data)?|subline|sidebar|author(?:name)?|published|timestamp|date|posted[_-]?on|info|labels?|tags?|keywords|category)|by[_-]?line|date[_-]?line|author-date|submitted(?:-by)?)|meta[_-]?data(?:$|[\s_-])', re_opts)
 * cdef RE2 sidebar_cls_regex = RE2(rb'(?:^|\s)(?:(?:l|wp|right|left|global|sticky)[_-]*)?(?:(?:side|sticky)[_-]?(?:bars?|box)|one-third)(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 search_cls_regex = RE2(rb'(?:^|[\s_-])search(?:[_-]?(?:bar|facility|box))?(?:$|\s)', re_opts)
 * cdef RE2 skip_link_cls_regex = RE2(rb'(?:^|\s)(?:link[_-]?)?(?:skip(?:[_-]?(?:to|link))?|scroll[_-]?(?:up|down)|next|prev(?:ious)?|permalink|pagination)(?:$|\s|[_-]?(?:post|article))', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_sidebar_cls_regex = RE2Stack(((char const *)"(?:^|\\s)(?:(?:l|wp|right|left|global|sticky)[_-]*)?(?:(?:side|sticky)[_-]?(?:bars?|box)|one-third)(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":476
 * cdef RE2 post_meta_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:post|entry|article(?:page)?|content|story|section)[_-]*(?:text[_-]*)?(?:footer|teaser|meta(?:[_-]?data)?|subline|sidebar|author(?:name)?|published|timestamp|date|posted[_-]?on|info|labels?|tags?|keywords|category)|by[_-]?line|date[_-]?line|author-date|submitted(?:-by)?)|meta[_-]?data(?:$|[\s_-])', re_opts)
 * cdef RE2 sidebar_cls_regex = RE2(rb'(?:^|\s)(?:(?:l|wp|right|left|global|sticky)[_-]*)?(?:(?:side|sticky)[_-]?(?:bars?|box)|one-third)(?:$|[\s_-])', re_opts)
 * cdef RE2 search_cls_regex = RE2(rb'(?:^|[\s_-])search(?:[_-]?(?:bar|facility|box))?(?:$|\s)', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 skip_link_cls_regex = RE2(rb'(?:^|\s)(?:link[_-]?)?(?:skip(?:[_-]?(?:to|link))?|scroll[_-]?(?:up|down)|next|prev(?:ious)?|permalink|pagination)(?:$|\s|[_-]?(?:post|article))', re_opts)
 * cdef RE2 display_cls_regex = RE2(rb'(?:^|\s)(?:is[_-])?(?:display-none|hidden|invisible|collapsed|h-0|nocontent|expandable)(?:-xs|-sm|-lg|-2?xl)?(?:$|\s)', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_search_cls_regex = RE2Stack(((char const *)"(?:^|[\\s_-])search(?:[_-]?(?:bar|facility|box))?(?:$|\\s)"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":477
 * cdef RE2 sidebar_cls_regex = RE2(rb'(?:^|\s)(?:(?:l|wp|right|left|global|sticky)[_-]*)?(?:(?:side|sticky)[_-]?(?:bars?|box)|one-third)(?:$|[\s_-])', re_opts)
 * cdef RE2 search_cls_regex = RE2(rb'(?:^|[\s_-])search(?:[_-]?(?:bar|facility|box))?(?:$|\s)', re_opts)
 * cdef RE2 skip_link_cls_regex = RE2(rb'(?:^|\s)(?:link[_-]?)?(?:skip(?:[_-]?(?:to|link))?|scroll[_-]?(?:up|down)|next|prev(?:ious)?|permalink|pagination)(?:$|\s|[_-]?(?:post|article))', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 display_cls_regex = RE2(rb'(?:^|\s)(?:is[_-])?(?:display-none|hidden|invisible|collapsed|h-0|nocontent|expandable)(?:-xs|-sm|-lg|-2?xl)?(?:$|\s)', re_opts)
 * cdef RE2 display_css_regex = RE2(rb'(?:^|;\s*)(?:display\s?:\s?none|visibility\s?:\s?hidden)(?:$|\s?;)', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_skip_link_cls_regex = RE2Stack(((char const *)"(?:^|\\s)(?:link[_-]?)?(?:skip(?:[_-]?(?:to|link))?|scroll[_-]?(?:up|down)|next|prev(?:ious)?|permalink|pagination)(?:$|\\s|[_-]?(?:post|article))"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":478
 * cdef RE2 search_cls_regex = RE2(rb'(?:^|[\s_-])search(?:[_-]?(?:bar|facility|box))?(?:$|\s)', re_opts)
 * cdef RE2 skip_link_cls_regex = RE2(rb'(?:^|\s)(?:link[_-]?)?(?:skip(?:[_-]?(?:to|link))?|scroll[_-]?(?:up|down)|next|prev(?:ious)?|permalink|pagination)(?:$|\s|[_-]?(?:post|article))', re_opts)
 * cdef RE2 display_cls_regex = RE2(rb'(?:^|\s)(?:is[_-])?(?:display-none|hidden|invisible|collapsed|h-0|nocontent|expandable)(?:-xs|-sm|-lg|-2?xl)?(?:$|\s)', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 display_css_regex = RE2(rb'(?:^|;\s*)(?:display\s?:\s?none|visibility\s?:\s?hidden)(?:$|\s?;)', re_opts)
 * cdef RE2 modal_cls_regex = RE2(rb'(?:^|\s)(?:wp-|p-|-l)?(?:modal|popup|lightbox)(?:[_-]*(?:window|pane|box))?(?:$|[\s_-])', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_display_cls_regex = RE2Stack(((char const *)"(?:^|\\s)(?:is[_-])?(?:display-none|hidden|invisible|collapsed|h-0|nocontent|expandable)(?:-xs|-sm|-lg|-2?xl)?(?:$|\\s)"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":479
 * cdef RE2 skip_link_cls_regex = RE2(rb'(?:^|\s)(?:link[_-]?)?(?:skip(?:[_-]?(?:to|link))?|scroll[_-]?(?:up|down)|next|prev(?:ious)?|permalink|pagination)(?:$|\s|[_-]?(?:post|article))', re_opts)
 * cdef RE2 display_cls_regex = RE2(rb'(?:^|\s)(?:is[_-])?(?:display-none|hidden|invisible|collapsed|h-0|nocontent|expandable)(?:-xs|-sm|-lg|-2?xl)?(?:$|\s)', re_opts)
 * cdef RE2 display_css_regex = RE2(rb'(?:^|;\s*)(?:display\s?:\s?none|visibility\s?:\s?hidden)(?:$|\s?;)', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 modal_cls_regex = RE2(rb'(?:^|\s)(?:wp-|p-|-l)?(?:modal|popup|lightbox)(?:[_-]*(?:window|pane|box))?(?:$|[\s_-])', re_opts)
 * cdef RE2 gallery_cls_regex = RE2(rb'(?:^|[\s_-])(?:gallery|carousel)(?:$|[\s_-])', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_display_css_regex = RE2Stack(((char const *)"(?:^|;\\s*)(?:display\\s?:\\s?none|visibility\\s?:\\s?hidden)(?:$|\\s?;)"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":480
 * cdef RE2 display_cls_regex = RE2(rb'(?:^|\s)(?:is[_-])?(?:display-none|hidden|invisible|collapsed|h-0|nocontent|expandable)(?:-xs|-sm|-lg|-2?xl)?(?:$|\s)', re_opts)
 * cdef RE2 display_css_regex = RE2(rb'(?:^|;\s*)(?:display\s?:\s?none|visibility\s?:\s?hidden)(?:$|\s?;)', re_opts)
 * cdef RE2 modal_cls_regex = RE2(rb'(?:^|\s)(?:wp-|p-|-l)?(?:modal|popup|lightbox)(?:[_-]*(?:window|pane|box))?(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 gallery_cls_regex = RE2(rb'(?:^|[\s_-])(?:gallery|carousel)(?:$|[\s_-])', re_opts)
 * cdef RE2 signin_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:log[_-]?in|sign[_-]?(?:in|up)|account)|user[_-](?:info|profile|settings|actions))(?:$|[\s_-])', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_modal_cls_regex = RE2Stack(((char const *)"(?:^|\\s)(?:wp-|p-|-l)?(?:modal|popup|lightbox)(?:[_-]*(?:window|pane|box))?(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":481
 * cdef RE2 display_css_regex = RE2(rb'(?:^|;\s*)(?:display\s?:\s?none|visibility\s?:\s?hidden)(?:$|\s?;)', re_opts)
 * cdef RE2 modal_cls_regex = RE2(rb'(?:^|\s)(?:wp-|p-|-l)?(?:modal|popup|lightbox)(?:[_-]*(?:window|pane|box))?(?:$|[\s_-])', re_opts)
 * cdef RE2 gallery_cls_regex = RE2(rb'(?:^|[\s_-])(?:gallery|carousel)(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 signin_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:log[_-]?in|sign[_-]?(?:in|up)|account)|user[_-](?:info|profile|settings|actions))(?:$|[\s_-])', re_opts)
 * cdef RE2 ads_cls_regex = RE2(rb'(?:^|\s)(?:(?:google|wide)[_-]?ads?|ad(?:vert|vertise(?:ment|link)?|$|_[a-f0-9]+)|sponsor(?:ed)?|promoted|paid|(?:wide)?banner|donate)(?:$|[\s_-])', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_gallery_cls_regex = RE2Stack(((char const *)"(?:^|[\\s_-])(?:gallery|carousel)(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":482
 * cdef RE2 modal_cls_regex = RE2(rb'(?:^|\s)(?:wp-|p-|-l)?(?:modal|popup|lightbox)(?:[_-]*(?:window|pane|box))?(?:$|[\s_-])', re_opts)
 * cdef RE2 gallery_cls_regex = RE2(rb'(?:^|[\s_-])(?:gallery|carousel)(?:$|[\s_-])', re_opts)
 * cdef RE2 signin_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:log[_-]?in|sign[_-]?(?:in|up)|account)|user[_-](?:info|profile|settings|actions))(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 ads_cls_regex = RE2(rb'(?:^|\s)(?:(?:google|wide)[_-]?ads?|ad(?:vert|vertise(?:ment|link)?|$|_[a-f0-9]+)|sponsor(?:ed)?|promoted|paid|(?:wide)?banner|donate)(?:$|[\s_-])', re_opts)
 * cdef RE2 social_cls_regex = RE2(rb'(?:^|\s|__|--|mobile-|desktop-|l-|m-|c-)(?:social(?:media|search)?|share(?:daddy)?|syndication|newsletter|sharing|follow|email|likes?|(?:give[_-]?)?feedback|(?:brand[_-])?engagement|facebook|twitter|subscribe|wa|jp|aptf-follow)(?:[_-]?(?:post|links?|section|icons?|btn|buttons?|target))?(?:$|[\s_-])', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_signin_cls_regex = RE2Stack(((char const *)"(?:^|[\\s_-])(?:(?:log[_-]?in|sign[_-]?(?:in|up)|account)|user[_-](?:info|profile|settings|actions))(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":483
 * cdef RE2 gallery_cls_regex = RE2(rb'(?:^|[\s_-])(?:gallery|carousel)(?:$|[\s_-])', re_opts)
 * cdef RE2 signin_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:log[_-]?in|sign[_-]?(?:in|up)|account)|user[_-](?:info|profile|settings|actions))(?:$|[\s_-])', re_opts)
 * cdef RE2 ads_cls_regex = RE2(rb'(?:^|\s)(?:(?:google|wide)[_-]?ads?|ad(?:vert|vertise(?:ment|link)?|$|_[a-f0-9]+)|sponsor(?:ed)?|promoted|paid|(?:wide)?banner|donate)(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 social_cls_regex = RE2(rb'(?:^|\s|__|--|mobile-|desktop-|l-|m-|c-)(?:social(?:media|search)?|share(?:daddy)?|syndication|newsletter|sharing|follow|email|likes?|(?:give[_-]?)?feedback|(?:brand[_-])?engagement|facebook|twitter|subscribe|wa|jp|aptf-follow)(?:[_-]?(?:post|links?|section|icons?|btn|buttons?|target))?(?:$|[\s_-])', re_opts)
 * cdef RE2 comments_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:article|user|post)[_-]*)?(?:(?:no[_-]?)?comments?|comment[_-]?list|reply)(?:$|[\s_-])', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_ads_cls_regex = RE2Stack(((char const *)"(?:^|\\s)(?:(?:google|wide)[_-]?ads?|ad(?:vert|vertise(?:ment|link)?|$|_[a-f0-9]+)|sponsor(?:ed)?|promoted|paid|(?:wide)?banner|donate)(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":484
 * cdef RE2 signin_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:log[_-]?in|sign[_-]?(?:in|up)|account)|user[_-](?:info|profile|settings|actions))(?:$|[\s_-])', re_opts)
 * cdef RE2 ads_cls_regex = RE2(rb'(?:^|\s)(?:(?:google|wide)[_-]?ads?|ad(?:vert|vertise(?:ment|link)?|$|_[a-f0-9]+)|sponsor(?:ed)?|promoted|paid|(?:wide)?banner|donate)(?:$|[\s_-])', re_opts)
 * cdef RE2 social_cls_regex = RE2(rb'(?:^|\s|__|--|mobile-|desktop-|l-|m-|c-)(?:social(?:media|search)?|share(?:daddy)?|syndication|newsletter|sharing|follow|email|likes?|(?:give[_-]?)?feedback|(?:brand[_-])?engagement|facebook|twitter|subscribe|wa|jp|aptf-follow)(?:[_-]?(?:post|links?|section|icons?|btn|buttons?|target))?(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 comments_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:article|user|post)[_-]*)?(?:(?:no[_-]?)?comments?|comment[_-]?list|reply)(?:$|[\s_-])', re_opts)
 * cdef RE2 logo_cls_regex = RE2(rb'(?:brand(?:ing)?[_-]*)?logo(?:$|\s)', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_social_cls_regex = RE2Stack(((char const *)"(?:^|\\s|__|--|mobile-|desktop-|l-|m-|c-)(?:social(?:media|search)?|share(?:daddy)?|syndication|newsletter|sharing|follow|email|likes?|(?:give[_-]?)?feedback|(?:brand[_-])?engagement|facebook|twitter|subscribe|wa|jp|aptf-follow)(?:[_-]?(?:post|links?|section|icons?|btn|buttons?|target))?(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":485
 * cdef RE2 ads_cls_regex = RE2(rb'(?:^|\s)(?:(?:google|wide)[_-]?ads?|ad(?:vert|vertise(?:ment|link)?|$|_[a-f0-9]+)|sponsor(?:ed)?|promoted|paid|(?:wide)?banner|donate)(?:$|[\s_-])', re_opts)
 * cdef RE2 social_cls_regex = RE2(rb'(?:^|\s|__|--|mobile-|desktop-|l-|m-|c-)(?:social(?:media|search)?|share(?:daddy)?|syndication|newsletter|sharing|follow|email|likes?|(?:give[_-]?)?feedback|(?:brand[_-])?engagement|facebook|twitter|subscribe|wa|jp|aptf-follow)(?:[_-]?(?:post|links?|section|icons?|btn|buttons?|target))?(?:$|[\s_-])', re_opts)
 * cdef RE2 comments_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:article|user|post)[_-]*)?(?:(?:no[_-]?)?comments?|comment[_-]?list|reply)(?:$|[\s_-])', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 logo_cls_regex = RE2(rb'(?:brand(?:ing)?[_-]*)?logo(?:$|\s)', re_opts)
 * cdef RE2 print_cls_regex = RE2(rb'(?:^|\s)print[_-]', re_opts)
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_comments_cls_regex = RE2Stack(((char const *)"(?:^|[\\s_-])(?:(?:article|user|post)[_-]*)?(?:(?:no[_-]?)?comments?|comment[_-]?list|reply)(?:$|[\\s_-])"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":486
 * cdef RE2 social_cls_regex = RE2(rb'(?:^|\s|__|--|mobile-|desktop-|l-|m-|c-)(?:social(?:media|search)?|share(?:daddy)?|syndication|newsletter|sharing|follow|email|likes?|(?:give[_-]?)?feedback|(?:brand[_-])?engagement|facebook|twitter|subscribe|wa|jp|aptf-follow)(?:[_-]?(?:post|links?|section|icons?|btn|buttons?|target))?(?:$|[\s_-])', re_opts)
 * cdef RE2 comments_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:article|user|post)[_-]*)?(?:(?:no[_-]?)?comments?|comment[_-]?list|reply)(?:$|[\s_-])', re_opts)
 * cdef RE2 logo_cls_regex = RE2(rb'(?:brand(?:ing)?[_-]*)?logo(?:$|\s)', re_opts)             # <<<<<<<<<<<<<<
 * cdef RE2 print_cls_regex = RE2(rb'(?:^|\s)print[_-]', re_opts)
 * 
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_logo_cls_regex = RE2Stack(((char const *)"(?:brand(?:ing)?[_-]*)?logo(?:$|\\s)"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":487
 * cdef RE2 comments_cls_regex = RE2(rb'(?:^|[\s_-])(?:(?:article|user|post)[_-]*)?(?:(?:no[_-]?)?comments?|comment[_-]?list|reply)(?:$|[\s_-])', re_opts)
 * cdef RE2 logo_cls_regex = RE2(rb'(?:brand(?:ing)?[_-]*)?logo(?:$|\s)', re_opts)
 * cdef RE2 print_cls_regex = RE2(rb'(?:^|\s)print[_-]', re_opts)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_15resiliparse_dom_7extract_9html2text_print_cls_regex = RE2Stack(((char const *)"(?:^|\\s)print[_-]"), __pyx_v_15resiliparse_dom_7extract_9html2text_re_opts);

  /* "resiliparse_dom/extract/html2text.pyx":521
 * 
 * 
 * cdef stl_set[string] blacklist_aria_roles = [b'alert', b'banner', b'checkbox', b'comment', b'complementary',             # <<<<<<<<<<<<<<
 *                                              b'contentinfo', b'dialog', b'img', b'menu', b'menubar', b'menuitem',
 *                                              b'navigation', b'presentation', b'radio', b'search', b'searchbox',
 */
  __pyx_t_2 = PyList_New(20); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_b_alert);
  __Pyx_GIVEREF(__pyx_n_b_alert);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_b_alert)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_banner);
  __Pyx_GIVEREF(__pyx_n_b_banner);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_b_banner)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_checkbox);
  __Pyx_GIVEREF(__pyx_n_b_checkbox);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_b_checkbox)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_comment);
  __Pyx_GIVEREF(__pyx_n_b_comment);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_b_comment)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_complementary);
  __Pyx_GIVEREF(__pyx_n_b_complementary);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_b_complementary)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_contentinfo);
  __Pyx_GIVEREF(__pyx_n_b_contentinfo);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_b_contentinfo)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_dialog);
  __Pyx_GIVEREF(__pyx_n_b_dialog);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_b_dialog)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_img);
  __Pyx_GIVEREF(__pyx_n_b_img);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_b_img)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_menu);
  __Pyx_GIVEREF(__pyx_n_b_menu);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 8, __pyx_n_b_menu)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_menubar);
  __Pyx_GIVEREF(__pyx_n_b_menubar);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 9, __pyx_n_b_menubar)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_menuitem);
  __Pyx_GIVEREF(__pyx_n_b_menuitem);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 10, __pyx_n_b_menuitem)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_navigation);
  __Pyx_GIVEREF(__pyx_n_b_navigation);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 11, __pyx_n_b_navigation)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_presentation);
  __Pyx_GIVEREF(__pyx_n_b_presentation);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 12, __pyx_n_b_presentation)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_radio);
  __Pyx_GIVEREF(__pyx_n_b_radio);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 13, __pyx_n_b_radio)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_search);
  __Pyx_GIVEREF(__pyx_n_b_search);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 14, __pyx_n_b_search)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_searchbox);
  __Pyx_GIVEREF(__pyx_n_b_searchbox);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 15, __pyx_n_b_searchbox)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_separator);
  __Pyx_GIVEREF(__pyx_n_b_separator);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 16, __pyx_n_b_separator)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_tab);
  __Pyx_GIVEREF(__pyx_n_b_tab);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 17, __pyx_n_b_tab)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_toolbar);
  __Pyx_GIVEREF(__pyx_n_b_toolbar);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 18, __pyx_n_b_toolbar)) __PYX_ERR(0, 521, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_b_tooltip);
  __Pyx_GIVEREF(__pyx_n_b_tooltip);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 19, __pyx_n_b_tooltip)) __PYX_ERR(0, 521, __pyx_L1_error);
  __pyx_t_3 = __pyx_convert_set_from_py_std_3a__3a_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_15resiliparse_dom_7extract_9html2text_blacklist_aria_roles = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "resiliparse_dom/extract/html2text.pyx":757
 * 
 * def extract_simplified_dom(html,
 *                           bint preserve_formatting=True,             # <<<<<<<<<<<<<<
 *                           bint main_content=False,
 *                           bint list_bullets=True,
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "resiliparse_dom/extract/html2text.pyx":758
 * def extract_simplified_dom(html,
 *                           bint preserve_formatting=True,
 *                           bint main_content=False,             # <<<<<<<<<<<<<<
 *                           bint list_bullets=True,
 *                           bint alt_texts=True,
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "resiliparse_dom/extract/html2text.pyx":759
 *                           bint preserve_formatting=True,
 *                           bint main_content=False,
 *                           bint list_bullets=True,             # <<<<<<<<<<<<<<
 *                           bint alt_texts=True,
 *                           bint links=False,
 */
  __pyx_t_5 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "resiliparse_dom/extract/html2text.pyx":760
 *                           bint main_content=False,
 *                           bint list_bullets=True,
 *                           bint alt_texts=True,             # <<<<<<<<<<<<<<
 *                           bint links=False,
 *                           bint form_fields=False,
 */
  __pyx_t_6 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "resiliparse_dom/extract/html2text.pyx":761
 *                           bint list_bullets=True,
 *                           bint alt_texts=True,
 *                           bint links=False,             # <<<<<<<<<<<<<<
 *                           bint form_fields=False,
 *                           bint noscript=False,
 */
  __pyx_t_7 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "resiliparse_dom/extract/html2text.pyx":762
 *                           bint alt_texts=True,
 *                           bint links=False,
 *                           bint form_fields=False,             # <<<<<<<<<<<<<<
 *                           bint noscript=False,
 *                           bint comments=True,
 */
  __pyx_t_8 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "resiliparse_dom/extract/html2text.pyx":763
 *                           bint links=False,
 *                           bint form_fields=False,
 *                           bint noscript=False,             # <<<<<<<<<<<<<<
 *                           bint comments=True,
 *                           skip_elements=None):
 */
  __pyx_t_9 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "resiliparse_dom/extract/html2text.pyx":764
 *                           bint form_fields=False,
 *                           bint noscript=False,
 *                           bint comments=True,             # <<<<<<<<<<<<<<
 *                           skip_elements=None):
 *     """
 */
  __pyx_t_10 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);

  /* "resiliparse_dom/extract/html2text.pyx":756
 * 
 * 
 * def extract_simplified_dom(html,             # <<<<<<<<<<<<<<
 *                           bint preserve_formatting=True,
 *                           bint main_content=False,
 */
  __pyx_t_11 = PyTuple_New(9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_2)) __PYX_ERR(0, 756, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4)) __PYX_ERR(0, 756, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_5)) __PYX_ERR(0, 756, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_6)) __PYX_ERR(0, 756, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 4, __pyx_t_7)) __PYX_ERR(0, 756, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 5, __pyx_t_8)) __PYX_ERR(0, 756, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_9);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 6, __pyx_t_9)) __PYX_ERR(0, 756, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 7, __pyx_t_10)) __PYX_ERR(0, 756, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 8, Py_None)) __PYX_ERR(0, 756, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_CyFunction_New(&__pyx_mdef_15resiliparse_dom_7extract_9html2text_1extract_simplified_dom, 0, __pyx_n_s_extract_simplified_dom, NULL, __pyx_n_s_resiliparse_dom_extract_html2tex_2, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_10, __pyx_t_11);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extract_simplified_dom, __pyx_t_10) < 0) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "resiliparse_dom/extract/html2text.pyx":934
 * def extract_plain_text(html,
 *                        preserve_formatting=True,
 *                        bint main_content=False,             # <<<<<<<<<<<<<<
 *                        bint list_bullets=True,
 *                        bint alt_texts=True,
 */
  __pyx_t_10 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);

  /* "resiliparse_dom/extract/html2text.pyx":935
 *                        preserve_formatting=True,
 *                        bint main_content=False,
 *                        bint list_bullets=True,             # <<<<<<<<<<<<<<
 *                        bint alt_texts=True,
 *                        bint links=False,
 */
  __pyx_t_11 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "resiliparse_dom/extract/html2text.pyx":936
 *                        bint main_content=False,
 *                        bint list_bullets=True,
 *                        bint alt_texts=True,             # <<<<<<<<<<<<<<
 *                        bint links=False,
 *                        bint form_fields=False,
 */
  __pyx_t_9 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "resiliparse_dom/extract/html2text.pyx":937
 *                        bint list_bullets=True,
 *                        bint alt_texts=True,
 *                        bint links=False,             # <<<<<<<<<<<<<<
 *                        bint form_fields=False,
 *                        bint noscript=False,
 */
  __pyx_t_8 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "resiliparse_dom/extract/html2text.pyx":938
 *                        bint alt_texts=True,
 *                        bint links=False,
 *                        bint form_fields=False,             # <<<<<<<<<<<<<<
 *                        bint noscript=False,
 *                        bint comments=True,
 */
  __pyx_t_7 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "resiliparse_dom/extract/html2text.pyx":939
 *                        bint links=False,
 *                        bint form_fields=False,
 *                        bint noscript=False,             # <<<<<<<<<<<<<<
 *                        bint comments=True,
 *                        skip_elements=None):
 */
  __pyx_t_6 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "resiliparse_dom/extract/html2text.pyx":940
 *                        bint form_fields=False,
 *                        bint noscript=False,
 *                        bint comments=True,             # <<<<<<<<<<<<<<
 *                        skip_elements=None):
 *     """
 */
  __pyx_t_5 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "resiliparse_dom/extract/html2text.pyx":932
 *     return False
 * 
 * def extract_plain_text(html,             # <<<<<<<<<<<<<<
 *                        preserve_formatting=True,
 *                        bint main_content=False,
 */
  __pyx_t_4 = PyTuple_New(9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)Py_True));
  __Pyx_GIVEREF(((PyObject *)Py_True));
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_True))) __PYX_ERR(0, 932, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_10)) __PYX_ERR(0, 932, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_11)) __PYX_ERR(0, 932, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_9);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_9)) __PYX_ERR(0, 932, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_t_8)) __PYX_ERR(0, 932, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_7)) __PYX_ERR(0, 932, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_t_6)) __PYX_ERR(0, 932, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_5)) __PYX_ERR(0, 932, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 8, Py_None)) __PYX_ERR(0, 932, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_9 = 0;
  __pyx_t_8 = 0;
  __pyx_t_7 = 0;
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_15resiliparse_dom_7extract_9html2text_3extract_plain_text, 0, __pyx_n_s_extract_plain_text, NULL, __pyx_n_s_resiliparse_dom_extract_html2tex_2, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extract_plain_text, __pyx_t_5) < 0) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "resiliparse_dom/extract/html2text.pyx":1
 * # Copyright 2021 Janek Bevendorff             # <<<<<<<<<<<<<<
 * #
 * # Licensed under the Apache License, Version 2.0 (the "License");
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init resiliparse_dom.extract.html2text", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init resiliparse_dom.extract.html2text");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* UnpackUnboundCMethod */
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
     METH_VARARGS | METH_KEYWORDS,
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #else
    if (likely(!__Pyx_CyOrPyCFunction_Check(method)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            target->method = unbound_method;
        }
    }
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            #else
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            #endif
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2)
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* StringJoin */
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    (void) __Pyx_PyObject_CallMethod1;
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION < 3
    return _PyString_Join(sep, values);
#elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
    return _PyBytes_Join(sep, values);
#else
    return __Pyx_PyObject_CallMethod1(sep, __pyx_n_s_join, values);
#endif
}

/* ErrOccurredWithGIL */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
  int err;
  #ifdef WITH_THREAD
  PyGILState_STATE _save = PyGILState_Ensure();
  #endif
  err = !!PyErr_Occurred();
  #ifdef WITH_THREAD
  PyGILState_Release(_save);
  #endif
  return err;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_10
#define __PYX_HAVE_RT_ImportType_3_0_10
static PyTypeObject *__Pyx_ImportType_3_0_10(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_10 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_10 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_10 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(char) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) >= 2 * PyLong_SHIFT)) {
                                return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) >= 3 * PyLong_SHIFT)) {
                                return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) >= 4 * PyLong_SHIFT)) {
                                return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(char) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(char) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(char) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                                return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                                return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                                return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                                return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                                return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                                return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(char) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(char) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (char) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (char) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (char) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (char) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (char) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(char) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((char) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(char) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((char) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((char) 1) << (sizeof(char) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_FormattingOpts(FormattingOpts value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const FormattingOpts neg_one = (FormattingOpts) -1, const_zero = (FormattingOpts) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(FormattingOpts) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(FormattingOpts) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(FormattingOpts) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(FormattingOpts) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(FormattingOpts) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(FormattingOpts),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(FormattingOpts));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__10);
    }
    return name;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction_3_0_10
#define __PYX_HAVE_RT_ImportFunction_3_0_10
static int __Pyx_ImportFunction_3_0_10(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
